<?php
defined('SYSPATH') or die('No direct script access.');
/**
 * Created by PhpStorm.
 * User: majin
 * Date: 15/12/31
 * Time: 上午11:32
 */
class Controller_User extends AdminController {

    protected $permission_array = array(

        'map' => array(
                'List' => array('Detail'),
                'Detail'=>	array('IdentityPic','Identity','CreditAuth','OrderList','CouponList',"PhoneBook", 'Coin', 'Relation', 'Location', 'CreditDetail'),
                ),

    );

    public $_status = NULL;
    public $verify_status = NULL;
    public $identity_status = NULL;
    public $permissions_change = NULL;

    public function before() {
        parent::before(); // TODO: Change the autogenerated stub
        $this->_status = Model::factory('User')->status_array;
        $this->verify_status = Model::factory('User')->verify_status_array;
        $this->identity_status = Model::factory('User_Identity')->status_array;
        $this->permissions_change  = 0;
    }


    public function action_List() {

        $page = isset($this->get['page']) ? intval($this->get['page']) : 1;
        $perpage = isset($this->get['pagesize']) ? intval($this->get['pagesize']) : 20;
        $array = array();
        if(isset($this->get['user_id']) && $this->get['user_id'] ) {
            $array['user_id'] = $this->get['user_id'];
        }
        if(isset($this->get['validated_identity']) && $this->get['validated_identity'] ) {
            $array['validated_identity'] = $this->get['validated_identity'];
        }
        if(isset($this->get['mobile']) && $this->get['mobile'] ) {
            $array['mobile'] = trim($this->get['mobile']);
        }
        if(isset($this->get['name']) && $this->get['name'] ) {
            $array['name'] = trim($this->get['name']);
        }

        if(isset($this->get['identity_code']) && $this->get['identity_code'] ) {
            $array['identity_code'] = trim($this->get['identity_code']);
        }

        if(isset($this->get['username']) && $this->get['username']) {
            $array['username'] = $this->get['username'];
        }
        if(isset($this->get['email']) && $this->get['email']) {
            $array['email'] = $this->get['email'];
        }

        //新增借记卡银行卡卡号搜索
        if(isset($this->get['bank_card_no']) && $this->get['bank_card_no'] ) {
            $array['bank_card_no'] = trim($this->get['bank_card_no']);
        }

        //新增借记卡银行卡卡号搜索
        if(isset($this->get['credit_card_no']) && $this->get['credit_card_no'] ) {
            $array['credit_card_no'] = trim($this->get['credit_card_no']);
        }


        $total = Model::factory('User')->getTotal($array);
        $pagination = Pagination::factory(
            array(
                'total_items' => $total,
                'items_per_page' => $perpage,
            ));
        $list = Model::factory('User')->getList($array, $perpage, $page);

        Template::factory('User/List', array(
                'list' => $list,
                'pagination' => $pagination,
                '_status'=>$this->_status,
                'verify_status'=>$this->verify_status,
                'identity_status'=>$this->identity_status,
                'permissions_change'=>$this->permissions_change
            )
        )->response();

    }

    public function action_Detail() {
        $message = NULL;
        $id = isset($this->get['id']) ? intval($this->get['id']):0;

        if(empty($id)){
            $this->empty_back();
        }



        //获取用户基本信息
        $user = $this->getInformation($id);
 
 
        Template::factory('User/Detail',array(
                    'user'   => $user,
                    '_status'=>$this->_status,
                    'verify_status'=>$this->verify_status,
                    'identity_status'=>$this->identity_status,
                )
            )->response();
    }


     /**
     * 获取用户基本信息
     * @param $user_id  int    用户ID
     * @return array   返回用户列表
     */
    private function getInformation($user_id){


         $user =Model::factory('User')->getInformation($user_id);
         
         $photoData = Model::factory('User')->getFaceIdAuth($user_id,$user['identity_face']);

          
        return array_merge($user,$photoData);
    }


    //更改
    public function action_Edit() {

        $message = NULL;
        $id = isset($this->get['id']) ? intval($this->get['id']) : 0;
        $data = Model::factory('User')->getOne($id);

        if (!$data) {
            $this->empty_back();
        }

        if( isset($this->post['submit_delete']) && $this->post['submit_delete'] ){//取消用户
            $update_array = array('status'=>Model_User::STATUS_DELETED);
            $update = Model::factory('User')->update($id, $update_array);
            if ($update) {
                $this->admin()->opteration_log('删除用户 ID:'.$id,trim($this->post['admin_log_message']));
                $message = array('type' => 'success', 'message' => '操作成功.');
                $data = Model::factory('User')->get_one($id);
            } else {
                $message = array('type' => 'error', 'message' => '操作失败.');
            }

        }elseif( isset($this->post['submit']) && $this->post['submit'] ) {//更改信息 (账号信息、身份证、密码)
            $message['type'] = 'success';
            if($data['mobile']!=$this->post['mobile']) {
                if(Model::factory('User')->getByField(array(
                    array('mobile','=',$this->post['mobile']),
                    array('validated_mobile','=',Model_User::STATUS_VERIFIED),
                    array('id','<>',$id)))
                ){
                    $message['type'] = 'error';
                    $message['message'][] = '手机号码已存在';
                }
            }

            if( $this->post['identity_code'] && $this->post['name'] && ($data['identity_code']!=$this->post['identity_code'] || $data['name']!=$this->post['name']) ) {
                if (Lib::factory('IDCard')->isIDCard($this->post['identity_code'])) {

                    if ( Model::factory('User')->getByField(array(
                        array('identity_code', '=', $this->post['identity_code']),
                        array('validated_identity', '=', Model_User_Identity::STATUS_VERIFIED),
                        array('id', '<>', $id),
                    ))) {
                        $message['type'] = 'error';
                        $message['message'][] = '身份证号码已经存在';
                    }

                } else {
                    $message['type'] = 'error';
                    $message['message'][] = '无效的身份证号码';
                }
            }

            if( $message['type']=='success' ){

                $update_array = array(
                    'mobile' => $this->post['mobile'],

                    'name' => $this->post['name'],

                    'status' => isset($this->post['status']) ? (int)$this->post['status'] : 0 ,
                    'allow_login' => isset($this->post['allow_login']) ? (int)$this->post['allow_login']  : 0,
                );
                $update = Model::factory('User')->update($id, $update_array);

                if (isset($this->post['password'])) {//新密码
                    $update_password = Model::factory('User')->change_password($id, $this->post['password']);
                }

                if ($update) {
                    $this->admin()->opteration_log('更改用户 ID:'.$id,trim($this->post['admin_log_message']));
                    $message = array('type' => 'success', 'message' => '更改完成.');
                    $data = Model::factory('User')->get_one($id);
                } else {
                    $message = array('type' => 'error', 'message' => '更改失败.');
                }
            }
        }
        Template::factory('User/Edit',array(
            'message'=>$message,
            '_status'=>$this->_status,
            'verify_status'=>$this->verify_status,
            'data'=>$data,
        ))->response();

    }

    public function action_Export() {
        $this->_orderstatus = Model::factory('Order')->status_array;
        if(isset($this->post['_export']) && $this->post['_export']){
            /*if($this->post['orderstatus']){
                $array['status']=explode(",",$this->post['orderstatus']);
            }else{
                $array['status']='';
            }*/
            $this->export($this->_orderstatus);
        }
        Template::factory('User/Export', array(
                '_orderstatus'=>$this->_orderstatus,
            )
        )->response();
    }



    /**
     *  获取用户授信信息
     */
    public  function action_CreditAuth(){
        $message = NULL;
        $user_id = isset($this->get['user_id']) ? intval($this->get['user_id']):0;
        $data =  $data = Model::factory('User')->get_user_credit_auth($user_id);
        Template::factory('User/CreditAuth')
            ->set('user_id',$user_id )
            ->set('data',$data)
            ->set('permissions_change',$this->permissions_change)
            ->response();
    }


    /**
     *  获取用户借款记录
     */
    public  function action_OrderList(){

        $message = NULL;
        $user_id = isset($this->get['user_id']) ? intval($this->get['user_id']):0;
        $page = isset($this->get['page']) ? intval($this->get['page']) : 1;
        $this->_status = Model_Order::$status_array;

        $array =['user_id'=>$user_id];
        $_type = Model::factory('Order')->type_array;
        $total = Model::factory('Order')->getTotal($array);
        $pagination = Pagination::factory(
            array(
                'total_items' => $total,
                'items_per_page' => 20,
            ));
        $list = Model::factory('Order')->getList($array,[],20, $page);
        Template::factory('User/OrderList')
            ->set('user_id', $user_id)
            ->set('list',$list)
            ->set('_type',$_type)
            ->set('pagination',$pagination)
            ->set( '_status',$this->_status)
            ->set('permissions_change',$this->permissions_change)
            ->response();
    }

    /**
     *  获取用户优惠券列表
     */
    public  function action_CouponList(){

        $message = NULL;
        $user_id = isset($this->get['user_id']) ? intval($this->get['user_id']):0;
        $list = Model::factory('Coupon')->get_user_coupon_list($user_id);
        Template::factory('User/CouponList')
            ->set('user_id', $user_id)
            ->set('list',$list)
            ->set('permissions_change',$this->permissions_change)
            ->response();
    }





    public function action_IdentityPic() {
        $identity_face = isset($this->get['identity_face']) ? $this->get['identity_face']:'';
        if(empty($identity_face)){
            $this->empty_back();
        }
        if($identity_face) {
            SecurityFile::response($identity_face);
        }
    }



    public function action_Identity(){
        $message = NULL;
        $code = isset($this->get['code']) ? $this->get['code']:0;
        $data['identity']  = Model::factory('User_Identity')->get_one_by_code($code);
        if(empty($data['identity'])){
            $this->empty_back();
        }
        $picdata=array();
        if(isset($data['identity']['identity_face']) && $data['identity']['identity_face']){
            $picdata['hash'] = $data['identity']['identity_face'];
            $identity_face = HttpClient::factory($this->site_config['ps_site'].'/API/Operation/Json')->get($picdata)->httpheader(array("CLIENTID:wx","CLIENTSIGN:".md5(json_encode($picdata).'1111')))->execute()->body();
        }else{
            $identity_face ='';
        }
        Template::factory('User/Identity')
            ->set($data)
            ->set(array(
                    'identity_face'=>json_decode($identity_face,true),
                    '_status'=>$this->_status,
                    'verify_status'=>$this->verify_status,
                    'identity_status'=>$this->identity_status,
                )
            )
            ->response();
    }



    //客服查询列表
    public function action_CustomerServiceList() {

        $page = isset($this->get['page']) ? intval($this->get['page']) : 1;
        $perpage = isset($this->get['pagesize']) ? intval($this->get['pagesize']) : 20;
        $array = array();
        if(isset($this->get['validated_identity']) && $this->get['validated_identity'] ) {
            $array['validated_identity'] = $this->get['validated_identity'];
        }
        if(isset($this->get['mobile']) && $this->get['mobile'] ) {
            $array['mobile'] = trim($this->get['mobile']);
        }
        if(isset($this->get['name']) && $this->get['name'] ) {
            $array['name'] = trim($this->get['name']);
        }

        if(isset($this->get['identity_code']) && $this->get['identity_code'] ) {
            $array['identity_code'] = trim($this->get['identity_code']);
        }

        if(isset($this->get['username']) && $this->get['username']) {
            $array['username'] = $this->get['username'];
        }

        if(isset($this->get['email']) && $this->get['email']) {
            $array['email'] = $this->get['email'];
        }


        $total = Model::factory('User')->get_total($array);
        $pagination = Pagination::factory(
            array(
                'total_items' => $total,
                'items_per_page' => $perpage,
            ));
        $list = Model::factory('User')->get_list($array, $perpage, $page);

        Template::factory('User/CustomerServiceList', array(
                'list' => $list,
                'pagination' => $pagination,
                '_status'=>$this->_status,
                'verify_status'=>$this->verify_status,
                'identity_status'=>$this->identity_status,
            )
        )->response();


    }

/*
    //添加
    public function action_Add() {
        $message = NULL;
        if(isset($this->post['submit'])) {

            $valid = Validation::factory($this->post)
                ->rule('username','not_empty')
                ->rule('username','min_length',array(':value',3))
                ->rule('password','not_empty')
                ->rule('password','min_length',array(':value',6));
            if($valid->check()) {

                $new_id = Model::factory('User')->create(array(
                    'mobile'=>$this->post['mobile'],
                    'username'=>$this->post['username'],
                    'email'=>$this->post['email'],
                    'password'=>$this->post['password'],
                    'name'=>$this->post['name'],
                    'validated_identity'=> intval($this->post['validated_identity']),
                    'validated_mobile' => intval($this->post['validated_mobile']),
                    'validated_email' => intval($this->post['validated_email']),
                ));

                if($new_id) {
                    if(isset($this->post['identity_code'])) {
                        Model::factory('User_Identity')->create(array('user_id'=>$new_id,'code'=>$this->post['identity_code'],'sex'=>$this->post['sex'],'status'=>intval($this->post['validated_identity'])));
                    }

                    $message = array('type' => 'success', 'message' => '添加成功.');
                }else {
                    $message = array('type' => 'error', 'message' => '添加失败.');
                }
            }else {
                $message = array('type' => 'error', 'message' => '添加失败,请查看是否有必填信息未填.');
            }
        }

        Template::factory('User/Add',array(
            'message'=>$message,
            '_status'=>$this->_status,
            'verify_status'=>$this->verify_status,
            'identity_status'=>$this->identity_status,
        ))->response();


    }*/



    //更改
    public function action_AllowLogin() {

        $message = NULL;
        $id = isset($this->get['id']) ? intval($this->get['id']) : 0;
        $data = Model::factory('User')->get_one($id);

        if (!$data) {
            $this->empty_back();
        }

        if( isset($this->post['submit']) && $this->post['submit'] ) {//更改信息 (账号信息、身份证、密码)

            //获取未完成订单
            if ($order_info = Model::factory('Order')->get_one_by_user_id($id, Model_Order::STATUSGROUP_UNFINISHED)) {
                    $message = array('type' => 'error', 'message' => '有未完成订单.不能修改');
            }else{
                $update_array = array(
                    'status' => isset($this->post['status']) ? (int)$this->post['status'] : 0 ,
                    'allow_login' => isset($this->post['allow_login']) ? (int)$this->post['allow_login']  : 0,
                );
                $update = Model::factory('User')->update($id, $update_array);

                if ($update) {
                    $this->admin()->opteration_log('更改用户 ID:'.$id,trim($this->post['admin_log_message']));
                    $message = array('type' => 'success', 'message' => '更改完成.');
                    $data = Model::factory('User')->get_one($id);
                } else {
                    $message = array('type' => 'error', 'message' => '更改失败.');
                }
            }
        }
        Template::factory('User/AllowLogin',array(
            'message'=>$message,
            '_status'=>$this->_status,
            'verify_status'=>$this->verify_status,
            'data'=>$data,
        ))->response();

    }





    //删除
    public function action_Delete() {
        $message = NULL;
        $id = isset($this->get['id']) ? intval($this->get['id']) : 0;
        $rs = Model::factory('User')->get_one($id);
        if (!$rs) {
            $this->empty_back();
        }
        $del = Model::factory('User_Identity')->delete($id);
        if ($del) {
            Template::factory()->message(
                array(
                    'type' => 'success',
                    'title' => '删除成功',
                    'message' => '身份认证:'.$rs['name'].' 证件号码:'. $rs['code'] .'  被成功删除.',
                    'redirect' => $this->request->referrer() ? $this->request->referrer() : '/' . $this->controller . '/List',
                    'redirect_time' => 3,
                    'back' => FALSE)
            );
        }
        Template::factory()->message(
            array(
                'type' => 'error',
                'title' => '删除失败',
                'message' => '身份认证:'.$rs['name'].' 证件号码:'. $rs['code'] .'  删除未成功,请核实或联系技术人员处理.',
                'back' => TRUE,)
        );
    }

    function empty_back(){
        Template::factory()->message(
            array(
                'type' => 'error',
                'title' => '信息不存在',
                'message' => '信息不存在或已经被删除.',
                'back' => TRUE,)
        );
    }


    /**
     * 获取用户通讯录号码
     */
    public function  action_PhoneBook(){
        $message = NULL;

        $user_id =  isset($this->get['user_id']) ? intval($this->get['user_id']):0;

        if(empty($user_id ) &&  $user_id <1){
            Template::factory()->message(
                array(
                    'type' => 'error',
                    'title' => '用户不存在',
                    'message' => '用户不存在,1秒后返回列表.',
                    'redirect' => $this->backurl() ? $this->backurl() : '/' . $this->controller . '/List',
                    'redirect_time' => 1,
                    'back' => FALSE,
                    'none'=>$this->backurlClear())//消除返回地址
            );
        }
        //判断用户组权限是否客服组
        if(!in_array(3,$this->group_id())){
            $permissions_change= 1;
        }else{
            $permissions_change= 0;
        }

        $navigation = "./Navigation.tpl";
        Template::factory('User/PhoneBook')
            ->set('user_id', $user_id)
            ->set('navigation',$navigation)
            ->set('permissions_change',$permissions_change)
            ->response();

    }

    /*public function action_Check()
    {
        $user_id = $this->get['user_id'];
        $list = Model::factory('User')->get_list(['user_id' => $user_id]);

        Template::factory('User/Check')
            ->set('user_id', $user_id)
            ->set('list', $list)
            ->set('id',$user_id )
            ->set('_status', $this->_status)
            ->set('bairong', Model::factory('AntiFraud_BaiRong')->get_short_all_by_user_id($user_id))
            ->set('tongdun', Model::factory('AntiFraud_TongDun')->get_short_all_by_user_id($user_id))
            ->set('rong360', Model::factory('Rong360_XiGua')->get_short_all_by_user_id($user_id))
            ->response();

    }*/

    //推广关系
    public function action_Relation(){
        $user_id = isset($this->get['user_id']) ? intval($this->get['user_id']):0;
        if($user_id == 0){
            exit('参数错误');
        }

        $user_info = Model::factory('User')->get_one($user_id);
        //PAPI
        $partner_code = Model::factory('User_PartnerCode')->getPartnerCodeByUserId($user_id);
        //代理商信息
        $agent_relation = Model::factory('AgentRelation')->getAgentRelationByUserId($user_id);
        //应用市场（渠道）信息
        $channel_relation = Model::factory('AgentRelation')->getAgentRelationByUserId($user_id);

        Template::factory('User/Relation')
            ->set('user_id', $user_id)
            ->set('user_info', $user_info)
            ->set('partner_code', $partner_code)
            ->set('agent_relation', $agent_relation)
            ->response();
    }


    //位置信息
    public function action_Location(){
        $user_id = isset($this->get['user_id']) ? intval($this->get['user_id']):0;
        if($user_id == 0){
            exit('参数错误');
        }

        $location_info = Model::factory('Location_BaiDuMap')->getLocationBaiDuMapByUserId($user_id);

        Template::factory('User/Location')
            ->set('user_id', $user_id)
            ->set('location_info', $location_info)
            ->response();
    }

    //决策与反欺诈
    public function action_CreditDetail(){
        $user_id = $this->get['user_id'];
        if($user_id == 0){
            exit('参数错误');
        }
        $list = Model::factory('User')->get_list(['user_id' => $user_id]);
        $credit_info = Model::factory('CreditPassRecord')->getCreditPassRecordByUserId($user_id);
        $model_order = new Model_Order();

        Template::factory('User/CreditDetail')
            ->set('user_id', $user_id)
            ->set('list', $list)
            ->set('credit_info', $credit_info)
            ->set('type_array', $model_order->type_array)
            ->set('pass_type', Model_CreditPassRecord::PASS_TYPE)
            ->set('id', $user_id)
            ->set('_status', $this->_status)
            ->set('bairong', Model::factory('AntiFraud_BaiRong')->get_short_all_by_user_id($user_id))
            ->set('bairongv2', Model::factory('AntiFraud_BaiRong')->get_short_v2_all_by_user_id($user_id))
            ->set('bairong_module', Model_AntiFraud_BaiRong::TYPE_MODULE)
            ->set('tongdun', Model::factory('AntiFraud_TongDun')->get_short_all_by_user_id($user_id))
            ->set('tongdun_module', Model_AntiFraud_TongDun::TYPE_MODULE)
            ->set('rong360', Model::factory('Rong360_XiGua')->get_short_all_by_user_id($user_id))
            ->set('rong360_module', Model_Rong360_XiGua::TYPE_MODULE)
            ->set('tcredit', Model::factory('TCredit_Short')->get_short_all_by_user_id($user_id))
            ->set('tcredit_module', Model_TCredit_Short::TYPE_MODULE)
            ->set('fuqianla', Model::factory('TCredit_Short')->get_short_all_by_user_id($user_id))
            ->set('fuqianla_module', Model_TCredit_Short::TYPE_MODULE)
            ->set('zhicheng', Model::factory('AntiFraud_ZhiChengCredit')->get_short_all_by_user_id($user_id))
            ->set('zhicheng_module', Model_AntiFraud_ZhiChengCredit::TYPE_MODULE)
            ->set('mobileaudit', Model::factory('AntiFraud_MobileAudit')->get_short_all_by_user_id($user_id))
            ->set('mobileaudit_module', Model_AntiFraud_MobileAudit::TYPE_MODULE)
            ->response();

    }
    
}
