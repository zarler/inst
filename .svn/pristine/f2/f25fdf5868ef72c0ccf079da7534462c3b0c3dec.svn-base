<?php
defined('SYSPATH') or die('No direct script access.');

/**
 * Created by PhpStorm.
 * User: chunyu
 * Date: 18/01/12
 *
 *  分期借款
 */
class Controller_Ver1_Inst_Loan extends AppCore
{
    protected $_check_token = true;
    protected $_check_user = true;

    protected static $order_type = Model_Order::TYPE_INST;
    protected static $bankcard_url = 'app://app.inst/BankCard/Add';
    protected static $unit = '元';
    protected static $describe = [
        'loan_amount' => '借款金额：',
        'life_of_loan' => '借款期限：',

        'total_repay' => '应还总额：',
        'total_interest' => '总利息：',
        'total_platform_manage' => '总管理费：',
        'month_repay' => '每月应还：',
        'start_end_date' => '起止日期：',
        'first_repay_date' => '首次还款日：',
        'repay_date' => '还款日：',

        'card_loan' => '收款银行卡：',
        'card_repay' => '还款银行卡：',
    ];
    protected static $note = '注：最终还款日以实际放款日为准';


    protected $tester = [96, 105, 505471, 11160, 363961, 153];


    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub
        $this->model['user'] = Model::factory('User');
        $this->model['order'] = Model::factory('Order');
        $this->model['order_charge'] = Model::factory('Order_Charge');
        $this->model['Inst'] = Model::factory('Order_Inst');
        $this->model['step'] = Model::factory('CreditInfo_Step');
        $this->model['bankcard'] = Model::factory('BankCard');
        $this->model['use_for'] = Model::factory('LoanUseFor');
        $this->log = new MyLog(APPPATH . 'logs/app/');
        $this->time = time();
    }


    /**
     * 用户状态,禁止借款
     */
    protected function check_status_deny()
    {
        if (empty(App::$_user['identity_code']) || (int)App::$_user['validated_identity'] != (int)Model_User::IDENTITY_STATUS_VERIFIED) {
            $this->response_json([], '5116', '用户未通过实名认证');
        }
        if ((int)App::$_user['allow_login'] !== (int)Model_User::ALLOW_LOGIN__ALLOWED) {
            $this->response_json([], '5082', '用户状态错误,禁止借款');
        }
        if (in_array(App::$_user['status'], [Model_User::STATUS_DENY, Model_User::STATUS_LOANDENY, Model_User::STATUS_DENYFOREVER, Model_User::STATUS_DENYTEMP, Model_User::STATUS_DELETED])) {
            $this->response_json([], '5082', '用户被禁止借款');
        }

    }


    /**
     * 费率表
     */
    public function action_ChargeMap()
    {
        $is_first = $this->model['order']->firstByUserId(App::$_token['user_id']);
        $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);

        $charge_rate = 1.0;
        $max_amount = 0;

        if ($fp) {
            if ($fp['inst_amount'] > 0) {
                $max_amount = bcmul(floor($fp['inst_amount'] / Model_Order_Inst::AMOUNT_STEP_LINE), Model_Order_Inst::AMOUNT_STEP_LINE);
            }

        }
        $total_loan_amount = $this->model['order']->unfinishedAmount(App::$_token['user_id']);
        $max_amount = (string)intval(bcsub($max_amount, $total_loan_amount, 2));

        $charge_rule = [
            'max_amount' => $max_amount ? (string)$max_amount : '0',
            'min_amount' => Model_Order_Inst::MIN_AMOUNT ? (string)Model_Order_Inst::MIN_AMOUNT : '0',
            'step_line' => Model_Order_Inst::AMOUNT_STEP_LINE ? (string)Model_Order_Inst::AMOUNT_STEP_LINE : '0',
            'max_month' => Model_Order_Inst::MAX_MONTH ? (string)Model_Order_Inst::MAX_MONTH : '0',
            'min_month' => Model_Order_Inst::MIN_MONTH ? (string)Model_Order_Inst::MIN_MONTH : '0',
        ];

        //费率表
        $formula = Model::factory('Order_Formula_Inst');
        $charge_map = [];
        $month_map = [];
        $money_map = [];
        $amount_map = Model_Order_Inst::AMOUNT_MAP;

        foreach ($amount_map as $money) {
            if ($money > $max_amount) {
                break;
            }
            if (Model_Order_Inst::AMOUNT_MONTH_MAP[$money] != null) {

                $amount_month_map = Model_Order_Inst::AMOUNT_MONTH_MAP[$money];

                if (count($amount_month_map) > 0) {

                    foreach ($amount_month_map as $month) {
                        if ($is_first) {
                            $fee = $formula->first($money, $month, $charge_rate);
                            $item = $this->model['order_charge']->make_fee_item($money, $month, $fee);
                        } else {
                            $fee = $formula->again($money, $month, $charge_rate);
                            $item = $this->model['order_charge']->make_fee_item($money, $month, $fee);

                        }

                        //$total_interest = $this->model['order_charge']->format_fee($this->model['order_charge']->make_fee_total($fee));

                        $key = '_' . $money . '_' . $month;
                        $repay_amount = bcadd($fee, $money, 2);
                        /*$charge_map[$key]['total_repay'] = self::$describe['total_repay'] . $repay_amount . self::$unit;
                        $charge_map[$key]['total_interest'] = self::$describe['total_interest'] . $total_interest[0]['amount'] . $total_interest[0]['unit'];
                        $charge_map[$key]['month_repay'] = self::$describe['month_repay'] . bcdiv($repay_amount, $month, 2);
                        $charge_map[$key]['start_end_date'] = self::$describe['start_end_date'] . date('Y/m/d') . '-' . $formula->date_formula($month + 1);
                        $charge_map[$key]['first_repay_date'] = self::$describe['first_repay_date'] . $formula->date_formula(1);
                        $charge_map[$key]['repay_date'] = self::$describe['repay_date'] . '每月' . date('d') . '日';
                        $charge_map[$key]['note'] = self::$note;*/

                        $charge_map[$key][] = ['left' => self::$describe['total_repay'], 'right' => ($fee + $money) . self::$unit, 'bold' => '1'];
                        $charge_map[$key][] = ['left' => self::$describe['total_interest'], 'right' => $item[Model_Order_Charge::TYPE_INTEREST['code']]['amount'] . self::$unit, 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['total_platform_manage'], 'right' => $item[Model_Order_Charge::TYPE_PLATFORM_MANAGE['code']]['amount'] . self::$unit, 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['month_repay'], 'right' => bcdiv($repay_amount, $month, 2) . self::$unit, 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['start_end_date'], 'right' => date('Y/m/d') . '-' . $formula->date_formula($month + 1), 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['first_repay_date'], 'right' => $formula->date_formula(1), 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['repay_date'], 'right' => '每月' . date('d') . '日', 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$note, 'right' => '', 'bold' => '0'];

                    }
                }

            }

        }

        foreach ($amount_map as $v) {
            if ($v > $max_amount) {
                break;
            }
            $money_map[] = ['loan_money' => (string)$v];
        }

        foreach (Model_Order_Inst::AMOUNT_MONTH_MAP as $money => $month) {
            foreach ($month as $v) {
                if ($money > $max_amount) {
                    break;
                }
                $k = '_' . $money;
                $month_map[$k][] = ['loan_month' => (string)$v];
            }
        }

        //借款用途
        $loan_use_for = [];
        $use_for = $this->model['use_for']->getList();
        foreach ($use_for as $val) {
            $loan_use_for[] = [
                'use_for_id' => $val['id'],
                'use_for_name' => $val['name'],
            ];
        }


        $response_array = [];
        if ($charge_rule) {
            $response_array['rule'] = $charge_rule;
        }

        if ($money_map) {
            $response_array['money'] = $money_map;
        }

        if ($month_map) {
            $response_array['month'] = $month_map;
        }

        if ($charge_map) {
            $response_array['map'] = $charge_map;
        }

        if ($use_for) {
            $response_array['use_for'] = $loan_use_for;
        }

        $response_array['other']['risk_alert'] = '【风险提醒】应国家相关政策法规要求，耀分期借款不得用于购房、股票和理财产品等权益性投资或其他非法经营活动';


        $this->response_json($response_array, '1000', '查询成功');

    }

    //授信信息检测
    public function action_CheckStatus()
    {

        if ($this->CheckStatus()) {
            $response_array['credit_ok'] = '1';
            $response_array['go_url'] = $this->_env['url']['app'] . '/v/Loan/Check'; //借款

        } else {
            $response_array['credit_ok'] = '0'; //授信资料过期
            $response_array['go_url'] = 'app://app.inst/CreditInfo/List'; //授信列表

        }

        $response_array['title'] = '提示';
        $response_array['msg'] = '请补充授信资料';

        $this->response_json($response_array, '1000', '查询成功');

    }


    //授信信息检测
    public function CheckStatus()
    {
        $credit_list = Lib::factory('Credit_Inst')->app_id(App::$id)->credit_list(App::$_token['user_id']);
        if (!is_array($credit_list)) {
            $this->response_json([], "4000", "用户授信数据异常");
        }
        //遍历每一项授信,如发现过期的则返回过期
        foreach ($credit_list as $k => $ci) {
            foreach ($ci as $v) {
                if (isset($v['expire'])) {
                    if ((int)$v['expire'] == 2) {
                        if ($this->model['user']->update(App::$_token['user_id'], ['credit_auth' => Model_User::CREDIT_AUTH_BASE_READY,])
                        ) {
                            return false;
                        }
                        $this->response_json([], '4000', '授信异常');

                    }

                } else {
                    $this->response_json([], '4000', '授信异常');

                }
            }

        }

        return true;

    }


    /**
     * 分期 状态查询
     */
    public function action_Status()
    {
        $is_first = $this->model['order']->firstByUserId(App::$_token['user_id']);
        $code = '1000';
        $response_array = [];
        $response_array['title'] = '提示';
        $response_array['msg'] = '';
        $response_array['on'] = ($is_first && Model_Order_Inst::PER_DAY_MAX_FIRST > 0) || (!$is_first && Model_Order_Inst::PER_DAY_MAX_AGAIN > 0) ? (string)Model_Order_Inst::ON : (string)Model_Order_Inst::OFF;//开关
        $today_start = (string)strtotime(date('Y-m-d ') . Model_Order_Inst::PER_DAY_START);
        $today_end = (string)strtotime(date('Y-m-d ') . Model_Order_Inst::PER_DAY_END);
        $response_array['total_text'] = '';//APP上的文字说明


        //去除旧的缓存数据
        $redis = Redis_Hash::instance();
        $status = $redis->get(Model_Order_Inst::KEY_STATUS);
        $date = date('Y-m-d');

        if (isset($status['date']) && $status['date'] == $date) {
            if (time() < $today_start) {
                $today_total = (string)0;//未开放之前应该是0
            }
            $response_array['last_update'] = (string)$status['last_update'];
        } else {
            //新的一天第一次刷新redis
            if ($is_first) {
                $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST, Model_Order_Inst::PER_DAY_MAX_FIRST);
            } else {
                $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN, Model_Order_Inst::PER_DAY_MAX_AGAIN);
            }
            $response_array['last_update'] = (string)$status['last_update'];
        }

        if ($is_first) {
            $surplus = Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST - (int)$status['first_today_total'] >= 0 ? Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST - (int)$status['first_today_total'] : 0;
            $response_array['total_text'] = '每日10:00开放' . Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST . '单,当前剩余' . $surplus . '单';

        } else {
            $surplus = Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN - (int)$status['again_today_total'] >= 0 ? Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN - (int)$status['again_today_total'] : 0;
            $response_array['total_text'] = '每日10:00开放' . Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN . '单,当前剩余' . $surplus . '单';

        }


        if ($response_array['on'] == Model_Order_Inst::ON && $surplus < 1) {
            $response_array['on'] = (string)Model_Order_Inst::OFF;
            $response_array['msg'] = '今日所有借款笔数已用光';
            $code = '5126';
        }


        if ($response_array['on'] == Model_Order_Inst::ON && time() < $today_start) {
            $response_array['on'] = (string)Model_Order_Inst::OFF;
            $response_array['msg'] = '开放抢单时间为每日' . Model_Order_Inst::PER_DAY_START . '，等下再来吧~';
            $code = '5127';

        }

        if ($response_array['on'] == Model_Order_Inst::ON && time() > $today_end) {
            $response_array['on'] = (string)Model_Order_Inst::OFF;
            $response_array['msg'] = '抢单时间已过,请明天再来吧~';
            $code = '5128';

        }


        //tester: 测试用户
        if (isset(App::$_token['user_id']) && in_array(App::$_token['user_id'], $this->tester)) {
            $response_array['total_text'] = '测试员专用! 首贷' . (isset($status['first_today_total']) ? $status['first_today_total'] : 0) . ' 复贷' . (isset($status['again_today_total']) ? $status['again_today_total'] : 0);
            $response_array['on'] = (string)Model_Order_Inst::ON;
            $response_array['msg'] = '';
            $code = '1000';

        }


        $this->response_json($response_array, $code, '查询成功');
    }


    /**
     * 借款前确认页面
     * 暂时未用
     *
     */
    public function action_Confirm()
    {

        $type = self::$order_type;
        $month = isset($this->_data['month']) && $this->_data['month'] > 0 ? (int)$this->_data['month'] : 0;
        $loan_amount = isset($this->_data['loan_amount']) && $this->_data['loan_amount'] > 0 ? $this->_data['loan_amount'] : 0;
        $use_for_id = isset($this->_data['use_for_id']) ? (int)$this->_data['use_for_id'] : 0;


        if (
            $month < Model_Order_Inst::MIN_MONTH ||
            $month > Model_Order_Inst::MAX_MONTH ||
            !in_array((int)$month, Model_Order_Inst::MONTH_MAP) ||
            $use_for_id < 1
        ) {
            $this->response_json([], '4005', '参数错误');
        }

        $use_for = $this->model['use_for']->getOne($use_for_id);
        if (empty($use_for)) {
            $this->response_json([], '4005', '参数错误');
        }


        //借款申请:每日只记一次
        Lib::factory('Credit_Inst')->app_id(App::$id)->apply_record_date(App::$_token['user_id']);


        //借记卡
        $bankcard = $this->model['bankcard']->get_one_by_user_id(App::$_token['user_id']);
        if(isset($bankcard['id']) && $bankcard['id'] > 0){
            $bankcard_id = $bankcard['id'];
        }else{
            $this->response_json(['api' => self::$bankcard_url], '5069', '储蓄卡错误');
        }

        //银行
        $bank = Model::factory('Bank')->get_one($bankcard['bank_id']);
        if (empty($bank)) {
            $this->response_json(['api' => self::$bankcard_url], '5069', '储蓄卡错误');

        }


        //授信状态判断,是否有授信额度
        $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);
        if ($fp || !isset($fp['inst_amount'])) {
            if ($fp['inst_amount'] > 0) {
                //正常
            } else {
                $this->response_json([], '5100', '没有可用额度');

            }

        } else {
            $this->response_json([], '5072', '用户数据异常');

        }

        $max_amount = bcmul(floor($fp['inst_amount'] / Model_Order_Inst::AMOUNT_STEP_LINE), Model_Order_Inst::AMOUNT_STEP_LINE);
        if (bcsub($loan_amount, $max_amount) == 1) {
            $this->response_json([], '5113', '用户借款金额超限');
        }
        $unfinished_amount = $this->model['order']->unfinishedAmount(App::$_token['user_id']);
        if ($unfinished_amount > 0 && bccomp($loan_amount, bcsub($max_amount - $unfinished_amount, 2)) == 1) {
            $this->response_json([], '5113', '用户借款金额超限');

        }

        $formula = Model::factory('Order_Formula_Inst');

        //首次借款判断与费率
        $is_first = $this->model['order']->firstByUserId(App::$_token['user_id']);
        if ($is_first) {
            $charge_amount = $formula->first($loan_amount, $month);
        } else {
            $charge_amount = $formula->again($loan_amount, $month);
        }


        $source_charge_amount = $charge_amount;
        //费率拆分细项生成
        $fees = Model::factory('Order_Charge')->make_fee_item($loan_amount, $month, $charge_amount);
        if (!$fees) {
            $this->response_json([], '5149', '费率异常');
        }


        /*$order_array = [
            'user_id' => App::$_token['user_id'],
            'id' => 0,
            'type' => $type,
            'bankcard_id' => $bankcard['id'],
            'bankcard_no' => $bankcard['card_no'],
            'name' => App::$_user['name'],
            'mobile' => App::$_user['mobile'],
            'loan_amount' => $loan_amount,
            'repay_amount' => bcadd($loan_amount, $charge_amount, 2),
            'month' => $month,
            'status' => Model_Order::STATUS_READY,
            'charge' => $charge_amount,
        ];*/

        $user['name'] = App::$_user['name'];
        $user['identity_code'] = substr_replace(App::$_user['identity_code'], '*****', 6, 4);

        $map['loan_amount'] = self::$describe['loan_amount'] . $loan_amount;
        $map['life_of_loan'] = self::$describe['life_of_loan'] . $month . '个月';
        $map['total_repay'] = self::$describe['total_repay'] . ($charge_amount + $loan_amount) . self::$unit;
        $map['total_interest'] = self::$describe['total_interest'] . $fees[Model_Order_Charge::TYPE_INTEREST['code']]['amount'] . self::$unit;
        $map['total_platform_manage'] = self::$describe['total_interest'] . $fees[Model_Order_Charge::TYPE_PLATFORM_MANAGE['code']]['amount'] . self::$unit;
        $map['month_repay'] = self::$describe['month_repay'] . bcdiv($map['total_repay'], $month, 2);
        $map['start_end_date'] = self::$describe['start_end_date'] . date('Y/m/d') . '-' . $formula->date_formula($month + 1);
        $map['first_repay_date'] = self::$describe['first_repay_date'] . $formula->date_formula(1);
        $map['repay_date'] = self::$describe['repay_date'] . '每月' . date('d') . '日';


        //卡信息
        $sub_card_no = substr($bankcard['card_no'], -4);
        $card['card_loan'] = self::$describe['card_loan'] . $bank['name'] . '（' . $sub_card_no . '）';
        $card['card_repay'] = self::$describe['card_repay'] . $bank['name'] . '（' . $sub_card_no . '）';


        $response_array = [];
        $response_array['user'] = $user;
        $response_array['loan_info'] = $map;
        $response_array['use_for'] = $use_for;//借款用途
        $response_array['card'] = $card;


        /*$response_array['order_extension'] = [
            ['left'=>'左边标题','right'=>'右边内容'],
            ['left'=>'左边标题','right'=>'右边内容'],
            ['left'=>'只有左边标题右边为空','right'=>''],
            ['left'=>'','right'=>'只有右边标题左边为空'],
            ['left'=>'只有左边标题没有右边'],
            ['right'=>'只有右边标题没有左边'],
            ['left'=>'链接','right'=>'这里是个链接','right_is_link'=>'http://www.sohu.com'],
        ];*/

        //费率说明和活动内容HTML
        $order_rate_html = Lib::factory('Helper_OrderFeeRate')->html($type);
        $response_array['foot_html'] = $order_rate_html ? $order_rate_html : '';


        $this->response_json($response_array, '1000', '借款详情');

    }


    /**
     * 分期贷款 借款申请
     */
    public function action_Apply()
    {
        $_token = isset($this->_data['_token']) ? $this->_data['_token'] : '';
        if (!Lib::factory('Target_Token')->auth($_token)) {
            //$this->response_json([], '5210', '页面失效，请重新提交');
        }

        $this->check_status_deny();

        $type = self::$order_type;
        $month = isset($this->_data['month']) && $this->_data['month'] > 0 ? (int)$this->_data['month'] : 0;
        $loan_amount = isset($this->_data['loan_amount']) && $this->_data['loan_amount'] > 0 ? $this->_data['loan_amount'] : 0;
        $bankcard_id = isset($this->_data['bankcard_id']) ? (int)$this->_data['bankcard_id'] : 0;
        $use_for_id = isset($this->_data['use_for_id']) ? (int)$this->_data['use_for_id'] : 0;


        if (
            $month < Model_Order_Inst::MIN_MONTH ||
            $month > Model_Order_Inst::MAX_MONTH ||
            !in_array((int)$month, Model_Order_Inst::MONTH_MAP) ||
            $use_for_id < 1
        ) {
            $this->response_json([], '4005', '参数错误');
        }

        $use_for = $this->model['use_for']->getOne($use_for_id);
        if (empty($use_for)) {
            $this->response_json([], '4005', '参数错误');
        }


        $is_first = $this->model['order']->firstByUserId(App::$_token['user_id']);
        if (($is_first && Model_Order_Inst::PER_DAY_MAX_FIRST == -1) || (!$is_first && Model_Order_Inst::PER_DAY_MAX_AGAIN == -1)) {
            $this->response_json([], '5129', '分期贷未开放');
        }

        //借款申请:每日只记一次
        Lib::factory('Credit_Inst')->app_id(App::$id)->apply_record_date(App::$_token['user_id']);

        //借记卡
        if ($bankcard_id < 1) {
            $this->response_json(['api' => self::$bankcard_url], '5069', '储蓄卡错误');
        }
        if ($bankcard = $this->model['bankcard']->get_one_by_user_id(App::$_token['user_id'], $bankcard_id)) {
            if ($bankcard['status'] != Model_BankCard::STATUS_ON) {
                $this->response_json(['api' => self::$bankcard_url], '5059', '储蓄卡状态不正确');
            } else {
                //储蓄卡有效
            }
        } else {
            $this->response_json(['api' => self::$bankcard_url], '5069', '储蓄卡错误');
        }


        //[test special]-----------------[begin]
        if (isset(App::$_token['user_id']) && in_array(App::$_token['user_id'], $this->tester)) {
            //测试员专用通道,不受借款时间和单量限制
        } else {
            $day_start_time = strtotime(date('Y-m-d') . ' ' . Model_Order_Inst::PER_DAY_START);
            $day_end_time = strtotime(date('Y-m-d') . ' ' . Model_Order_Inst::PER_DAY_END);
            if (time() < $day_start_time) {
                $this->response_json([], '5127', '开放抢单时间为每日' . Model_Order_Inst::PER_DAY_START . '，等下再来吧~');
            }
            if (time() > $day_end_time) {
                $this->response_json([], '5128', '抢单时间已过,请明天再来吧~');
            }
        }
        //[test special]-----------------[end]

        $age = (int)Lib::factory('IDCard')->age(App::$_user['identity_code']);
        if ($age < 22 || $age > 40) {
            $this->response_json([], '5103', '您的年龄暂不符合分期借款要求');//不符合年龄
        }


        //授信状态判断,是否有授信额度
        $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);
        if ($fp || !isset($fp['inst_amount'])) {
            if ($fp['inst_amount'] > 0) {
                //正常
            } else {
                $this->response_json([], '5100', '没有可用额度');

            }

        } else {
            $this->response_json([], '5072', '用户数据异常');

        }

        $max_amount = bcmul(floor(bcdiv($fp['inst_amount'], Model_Order_Inst::AMOUNT_STEP_LINE, 2)), Model_Order_Inst::AMOUNT_STEP_LINE);
        if (bcsub($loan_amount, $max_amount) == 1) {
            $this->response_json([], '5113', '用户借款金额超1限');
        }
        $unfinished_amount = $this->model['order']->unfinishedAmount(App::$_token['user_id']);
        if ($unfinished_amount > 0 && bccomp($loan_amount, bcsub($max_amount, $unfinished_amount, 2)) == 1) {
            $this->response_json([], '5113', '用户借款金额超限');

        }


        //$today_total = $this->model['fastloan']->total_by_date(date('Y-m-d'));
        //if (Model_Order_Inst::PER_DAY_MAX > 0 && $today_total >= Model_Order_Inst::PER_DAY_MAX) {
        //   $this->response_json(array(), '5122', '抱歉，今日分期贷款已抢完，明日10:00开放抢单');
        //}


        if (isset(App::$_token['user_id']) && in_array(App::$_token['user_id'], $this->tester)) {
            //测试员专用通道,不受借款时间和单量限制
        } else {
            $redis = Redis_Hash::instance();
            $status = $redis->get(Model_Order_Inst::KEY_STATUS);
            if (isset($status['date']) && $status['date'] != date('Y-m-d')) {
                if ($is_first) {
                    $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST, Model_Order_Inst::PER_DAY_MAX_FIRST);
                } else {
                    $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN, Model_Order_Inst::PER_DAY_MAX_AGAIN);
                }
            }
            $first_today_total = isset($status['first_today_total']) ? $status['first_today_total'] : 0;
            $again_today_total = isset($status['again_today_total']) ? $status['again_today_total'] : 0;
            if ($is_first && $first_today_total >= Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST) {
                $this->response_json([], '5122', '抱歉，今日分期贷款已抢完，明日10:00开放抢单');
            } elseif (!$is_first && $again_today_total >= Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN) {
                $this->response_json([], '5122', '抱歉，今日分期贷款已抢完，明日10:00开放抢单');
            }

        }

        $formula = Model::factory('Order_Formula_Inst');
        //首次借款判断与费率
        if ($is_first) {
            $charge_amount = $formula->first($loan_amount, $month);
        } else {
            $charge_amount = $formula->again($loan_amount, $month);
        }

        //记录order_charge表里
        //$order_charge[] = array('amount'=>$loan_charge, 'model_type'=>Model_Order_Charge::TYPE_LOAN);
        //记录一个原手续费
        //$source_charge_amount = $charge_amount;
        //费率拆分细项生成
        $fees = Model::factory('Order_Charge')->make_fee_item($loan_amount, $month, $charge_amount);
        if (!$fees) {
            $this->response_json([], '5149', '费率异常');
        }
        $interest = 0;
        $management_amount = 0;
        foreach ($fees as $v) {
            if (isset($v['model_type']) && isset($v['model_type']['code']) && $v['model_type']['code'] == Model_Order_Charge::TYPE_INTEREST['code']) {
                $interest = $v['amount'];//利息
            }
            if (isset($v['model_type']) && isset($v['model_type']['code']) && $v['model_type']['code'] == Model_Order_Charge::TYPE_PLATFORM_MANAGE['code']) {
                $management_amount = $v['amount'];//平台管理费
            }

        }


        //设备事件采集
        if (in_array(strtolower(App::$id), ['android', 'ios'])) {
            try {
                Model::factory('EquipmentEvent')->create(
                    [
                        'equipment_id' => App::$unique_id,
                        'user_id' => App::$_token['user_id'] > 0 ? App::$_token['user_id'] : 0,
                        'token' => App::$token,
                        'type' => Model_EquipmentEvent::TYPE_LOAN,
                        'type2' => Model_EquipmentEvent::TYPE2_INSTLOAN,
                        'extend' => [
                            'app' => [
                                'id' => App::$id,
                                'os' => App::$os,
                                'ver' => App::$ver,
                                'ip' => App::$ip,
                            ],
                        ],
                    ]);
            } catch (Exception $e) {
                //...
            }
        }

        //授信资料检测
        if (!$this->CheckStatus()) {
            $this->response_json(['go_url' => 'app://app.inst/CreditInfo/List'], '5131', '授信资料过期，请更新');
        }


        $order_no = $this->model['order']->makeNo();

        $repay_amount = bcadd($loan_amount, $charge_amount, 2);
        $create_array = [
            'order_no' => $order_no,
            'bankcard_id' => $bankcard['id'],
            'loan_amount' => $loan_amount,
            'pay_amount' => $loan_amount,
            'repay_amount' => $repay_amount,
            'status' => Model_Order::STATUS_READY,
            'type' => $type,
            'charge' => $charge_amount,
            'month' => $month,
            'name' => App::$_user['name'],
            'mobile' => App::$_user['mobile'],
            'identity_code' => App::$_user['identity_code'],
            'bankcard_no' => $bankcard['card_no'],
            'create_time' => time(),
        ];


        /* 创建订单   --------------------- */
        $order_id = 0;
        $db = Database::instance();
        $db->begin();
        try {

            $i = 0;
            while ($rs1 = $this->model['order']->getOneByOrderNo($order_no)) {//订单编号碰撞,重试3次
                $order_no = $this->model['order']->makeNo();
                if ($i >= 3) {
                    throw new Exception('订单号处理异常');
                } else {
                    $i++;
                }
            }

            $create_array['order_no'] = $order_no;
            $order_id = $this->model['order']->create(App::$_token['user_id'], $create_array);
            if ($order_id < 1) {
                throw new Exception('订单创建失败');
            }

            foreach ($fees as $v) { //记录费用表
                if ($this->model['order_charge']->create(App::$_token['user_id'], $order_id, $v['model_type'], $v['amount']) < 1) {
                    throw new Exception('order_charge创建失败');

                }
            }

            $bill = Model::factory('Bill');
            $BillArchive = Model::factory('BillArchive');

            $mod_repay_principal = bcdiv(bcmod(bcmul($loan_amount, 100), $month), 100, 2);//借款金额除以月份的余数
            $month_repay_principal = bcdiv(bcsub($loan_amount, $mod_repay_principal, 2), $month, 2);

            $mod_repay_interest = bcdiv(bcmod(bcmul($interest, 100), $month), 100, 2);//利息除以月份的余数
            $month_repay_interest = bcdiv(bcsub($interest, $mod_repay_interest, 2), $month, 2);

            $mod_repay_management = bcdiv(bcmod(bcmul($management_amount, 100), $month), 100, 2);//管理费除以月份的余数
            $month_repay_management = bcdiv(bcsub($management_amount, $mod_repay_management, 2), $month, 2);

            for ($i = 1; $i <= $month; $i++) {
                $bill_data = [
                    'order_id' => $order_id,
                    'user_id' => (int)App::$_token['user_id'],
                    'status' => Model_Bill::STATUS_INIT,
                    'repay_principal' => $month_repay_principal,//当期本金
                    'repay_interest' => $month_repay_interest,//当期利息
                    'repay_management' => $month_repay_management,//当期管理费
                ];
                $bill_archive_data = [
                    'order_id' => $order_id,
                    'user_id' => (int)App::$_token['user_id'],
                    'repay_principal' => $month_repay_principal,//当期本金存档
                    'repay_interest' => $month_repay_interest,//当期利息存档
                    'repay_management' => $month_repay_management,//当期管理费存档
                    'repay_damage' => bcmul($month_repay_principal, Model_Order_Charge::REPAY_DAMAGE_RATE, 2),//提前还款违约金存档
                    'day_penalty_rate' => Model_Order_Charge::DAY_PENALTY_RATE,//罚息日利率存档
                    'day_late_fee_rate' => Model_Order_Charge::DAY_LATE_FEE_RATE,//滞纳金日利率存档
                ];

                $bill_data['number'] = $i;

                if ($i == 1) {

                    if (bccomp($mod_repay_principal, 0, 2) == 1) {
                        $bill_data['repay_principal'] = bcadd($month_repay_principal, $mod_repay_principal, 2);
                    }
                    if (bccomp($mod_repay_interest, 0, 2) == 1) {
                        $bill_data['repay_interest'] = bcadd($month_repay_interest, $mod_repay_interest, 2);
                    }
                    if (bccomp($mod_repay_management, 0, 2) == 1) {
                        $bill_data['repay_management'] = bcadd($month_repay_management, $mod_repay_management, 2);
                    }
                }
                $bill_data['repay_amount'] = bcadd(bcadd($bill_data['repay_principal'], $bill_data['repay_interest'], 2), $bill_data['repay_management'], 2);
                $bill_data['start_time'] = $formula->date_formula(($i - 1), 'int');
                $bill_data['expire_time'] = $formula->date_formula($i, 'int');

                $bill_id = $bill->create(App::$_token['user_id'], $bill_data);
                if ($bill_id < 1) {
                    throw new Exception('账单创建失败');
                }

                $bill_archive_data['bill_id'] = $bill_id;
                $bill_archive_data['repay_principal'] = $bill_data['repay_principal'];
                $bill_archive_data['repay_interest'] = $bill_data['repay_interest'];
                $bill_archive_data['repay_management'] = $bill_data['repay_management'];

                if ($BillArchive->create($bill_archive_data) < 1) {
                    throw new Exception('账单存档创建失败');

                }
                //var_dump($bill_data);
            }
            //throw new Exception('账单存档创建失败');

            unset($create_array, $bill, $BillArchive, $bill_data, $bill_archive_data);
            //用途
            if (Model::factory('OrderLoanUseFor')->create([
                                                              'order_id' => $order_id,
                                                              'luf_id' => $use_for_id,
                                                          ]) < 1
            ) {
                throw new Exception('用途创建失败');

            }

            $db->commit();
        } catch (Exception $e) {
            $db->rollback();
            $this->response_json([], '4012', $e->getMessage() . '出现异常,数据已回滚');
        }

        if ($order_id > 0) {


            //数据渲染
            if ($is_first) {
                Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST, Model_Order_Inst::PER_DAY_MAX_FIRST, 'first');//订单计次
            } else {
                Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN, Model_Order_Inst::PER_DAY_MAX_AGAIN, 'again');//订单计次
            }


            /*
            //需要数据渲染,暂时屏蔽缓存删除功能
            $redis = Redis_Hash::instance();
            $redis->del(Model_Order_Inst::KEY_STATUS);
            */
            $bank = Model::factory('Bank')->get_one($bankcard['bank_id']);
            $bank_name = isset($bank['name']) ? $bank['name'] : '';

            $response_array = [
                'order_id' => $order_id,
                'order_no' => $order_no,
                'title' => '借款申请已提交',
                'loan_amount' => $loan_amount,
                'charge' => $charge_amount,
                'info' => '收款账户 ' . $bank_name . '(尾号' . substr($bankcard['card_no'], -4) . ')',
            ];


            $this->response_json($response_array, '1000', '借款申请成功');
        }
        $this->response_json([], '4000', '借款申请失败');


    }


}


