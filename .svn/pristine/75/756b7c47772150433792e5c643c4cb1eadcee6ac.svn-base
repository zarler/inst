<?php
defined('SYSPATH') or die('No direct script access.');

/**
 * Created by PhpStorm.
 * User: majin
 * Date: 16/6/1
 * Time: 下午5:08
 *
 * 借款订单
 *
 */
class Controller_Ver1_Order extends AppCore
{
    protected $_check_token = true;
    protected $_check_user = true;

    protected $front_url;
    protected $pagesize = 20;
    protected $model;

    protected $tester = [96, 105, 505471];

    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub
        $this->model['user'] = Model::factory('User');
        $this->model['order'] = Model::factory('Order');
        $this->model['bill'] = Model::factory('Bill');
        $this->model['order_charge'] = Model::factory('Order_Charge');
        $this->model['bankcard'] = Model::factory('BankCard');
        $this->model['bank'] = Model::factory('Bank');
        $this->model['verify'] = Model::factory('Verify_Sms');

        $config = Kohana::$config->load('api')->get('preauth');
        $this->front_url = $config['front_url'];
    }


    /**
     * 借款记录 分页
     */
    public function action_Unfinished()
    {
        $last_id = isset($this->_data['last_id']) && $this->_data['last_id'] > 0 ? (int)$this->_data['last_id'] : 0;
        $pagesize = isset($this->_data['limit']) && $this->_data['limit'] > 0 && $this->_data['limit'] <= 100 ? (int)$this->_data['limit'] : $this->pagesize;
echo App::$_token['user_id'];
        $rs = $this->model['order']->unfinished(App::$_token['user_id'], $pagesize, $last_id);
        $order_array = [];
        $last_id = 0;
        if ($rs) {
            foreach ($rs as $r) {
                if ($a = $this->model['order']->format($r)) {
                    $order_array[] = $a;
                }
                $last_id = $r['id'];
            }
        }
        $response_array = [];
        if ($order_array) {
            $response_array['order'] = $order_array;
        }
        $response_array['last_id'] = (string)$last_id;


        $this->response_json($response_array, "1000", "借款记录");
    }


    /**
     * 借款记录 分页
     */
    public function action_Finished()
    {
        $last_id = isset($this->_data['last_id']) && $this->_data['last_id'] > 0 ? (int)$this->_data['last_id'] : 0;
        $pagesize = isset($this->_data['limit']) && $this->_data['limit'] > 0 && $this->_data['limit'] <= 100 ? (int)$this->_data['limit'] : $this->pagesize;
        echo App::$_token['user_id'];
        $rs = $this->model['order']->finished(App::$_token['user_id'], $pagesize, $last_id);
        $order_array = [];
        $last_id = 0;
        if ($rs) {
            foreach ($rs as $r) {
                if ($a = $this->model['order']->format($r)) {
                    $order_array[] = $a;
                }
                $last_id = $r['id'];
            }
        }
        $response_array = [];
        if ($order_array) {
            $response_array['order'] = $order_array;
        }
        $response_array['last_id'] = (string)$last_id;


        $this->response_json($response_array, "1000", "借款记录");
    }


    /**
     * 需要还款订单
     */
    public function action_NeedRepay()
    {

        $rs = $this->model['order']->get_need_repay(App::$_token['user_id']);
        $order_array = [];

        if ($rs) {
            foreach ($rs as $r) {
                if ($a = $this->model['order']->format($r)) {
                    $order_array[] = $a;
                }
            }
        }
        $response_array = [];
        if ($order_array) {
            $response_array['order'] = $order_array;
        }

        $this->response_json($response_array, "1000", "需要还款订单");
    }


    /**
     * 还款短信验证码
     */
    public function action_RepayVerifySMS()
    {

        $order_id = isset($this->_data['order_id']) ? (int)$this->_data['order_id'] : 0;
        if ($order_id < 1) {
            $this->response_json([], "4005", "参数错误");
        }
        $rs1 = $this->model['order']->get_one_by_user_id(App::$_token['user_id'], $order_id);

        if (!isset($rs1['status']) || !in_array($rs1['status'], [Model_Order::STATUS_PAID, Model_Order::STATUS_OVERDUE])) {
            $this->response_json([], "5068", "订单状态不允许该操作");
        }
        $mobile = $rs1['mobile'];


        if (isset($mobile) &&
            Valid::phone($mobile, 11) &&
            strlen($mobile) == 11 &&
            Valid::regex($mobile, '/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')
        ) {

            $verify_code = Text::random('nozero', 1) . Text::random('numeric', 3);
            $verify_no = Text::random('numeric', 6);

            if ($rs = $this->model['verify']->today_mobile_token($mobile, App::$_token['id'], Model_Verify_Sms::TYPE_REPAY)) {
                if ($rs['send_count'] >= Model_Verify_Sms::RETRY_MAX) {
                    $this->response_json(['max_count' => Model_Verify_Sms::RETRY_MAX], "4006", "短信发送数超上限");
                };
                if ($rs['send_time'] > (time() - Model_Verify_Sms::RESEND_PERIOD)) {
                    $this->response_json(['next_send' => Model_Verify_Sms::RESEND_PERIOD - (time() - $rs['send_time'])], "5001", "短信发送间隔太短");
                };

                if (null !== $this->model['verify']->update($rs['id'], [
                        'verify_code' => $verify_code,
                        'verify_no' => $verify_no,
                        'send_count' => $rs['send_count'] + 1,
                        'expire_time' => time() + Model_Verify_Sms::EXPIRE_PERIOD,
                        'send_time' => time() + 1,
                    ])
                ) {
                    if ($this->model['verify']->send($mobile, $verify_code, Model_Verify_Sms::TYPE_REPAY)) {
                        $this->response_json(
                            [
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => $rs['send_count'] + 1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ],
                            "1000",
                            "发送成功");
                    };
                };

                $this->response_json(
                    [
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'send_count' => $rs['send_count'],
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ],
                    "4000",
                    "发送失败");


            } else {

                if ($new_id = $this->model['verify']->create([
                                                                 'mobile' => $mobile,
                                                                 'token_id' => (int)App::$_token['id'],
                                                                 'type' => Model_Verify_Sms::TYPE_REPAY,
                                                                 'verify_code' => $verify_code,
                                                                 'verify_no' => $verify_no,
                                                                 'user_id' => isset(App::$_token['user_id']) ? (int)App::$_token['user_id'] : 0,
                                                                 'create_time' => time(),
                                                                 'send_time' => time() + 1,
                                                                 'expire_time' => time() + Model_Verify_Sms::EXPIRE_PERIOD,
                                                                 'status' => Model_Verify_Sms::STATUS_VALID,
                                                                 'send_count' => 1,
                                                             ])
                ) {

                    if ($this->model['verify']->send($mobile, $verify_code, Model_Verify_Sms::TYPE_REPAY)) {
                        $this->response_json(
                            [
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => 1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ],
                            "1000",
                            "发送成功");
                    }

                }

                $this->response_json(
                    [
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ],
                    "4000",
                    "发送失败");

            };


        } else {
            $this->response_json([], "4002", "订单记录手机号码格式错误");
        }


    }


    /**
     * 还款
     */
    public function action_SubmitRepay()
    {
        $order_id = isset($this->_data['order_id']) && $this->_data['order_id'] > 0 ? (int)$this->_data['order_id'] : 0;
        $bill_id = isset($this->_data['bill_id']) ? $this->_data['bill_id'] : 0;
        $verify_code = isset($this->_data['verify_code']) && $this->_data['verify_code'] ? $this->_data['verify_code'] : '';
        if (!(Valid::digit($verify_code) && Valid::exact_length($verify_code, 4))) {
            $this->response_json([], "5006", "验证码错误");
        }
        if ($order_id < 1) {
            $this->response_json([], "4005", "参数错误");
        }
        if ($bill_id == 0) {
            $this->response_json([], "4005", "参数错误");
        }
        $bill_id = $bill_id == 'all' ? 'all' : (int)$bill_id;

        if($bill_id != 'all' && $bill_id > 0){
            $bill = $this->model['bill']->getByArray(['user_id' => App::$_token['user_id'], 'bill_id' => $bill_id], [], 1);
            if (!$bill) {
                $this->response_json([], "5058", "账单不存在,或不是该用户账单");
            }
        }
        $order = $this->model['order']->getByArray(['user_id' => App::$_token['user_id'], 'order_id' => $order_id], [], 1);
        if (!$order) {
            $this->response_json([], "5058", "订单不存在,或不是该用户订单");
        }
        if (!isset($order['status']) || !in_array($order['status'], [(string)Model_Order::STATUS_PAID, (string)Model_Order::STATUS_OVERDUE])) {
            $this->response_json([], "5068", "订单状态不允许该操作");
        }

        if ($order['status'] == Model_Order::STATUS_OVERDUE) {
            if (Lib::factory('Date')->countDayDay($order['expire_time'], time()) > Model_Order::OVERDUE_REPAY_DAY) {
                $this->response_json([], "5102", "逾期超过" . Model_Order::OVERDUE_REPAY_DAY . "天，不能自主还款");
            }
            if (date('Y-m-d', $order['dedcut_time']) == date('Y-m-d') && $order['active_repayment_count'] >= Model_Order::DEDCUT_FAILED_COUNT) {
                $this->response_json([], "5123", "今日还款失败次数过多，请明日再试");
            }
        } elseif ($order['status'] == Model_Order::STATUS_PAID) {
            if (date('Y-m-d', $order['dedcut_time']) == date('Y-m-d') && $order['active_repayment_count'] >= Model_Order::DEDCUT_FAILED_COUNT) {
                $this->response_json([], "5123", "今日还款失败次数过多，请明日再试");
            }
        }


        $mobile = $order['mobile'];

        if ($vid = $this->model['verify']->check($mobile, App::$_token['id'], $verify_code, Model_Verify_Sms::TYPE_REPAY)) {
            //验证成功
        } else {
            if ($v = $this->model['verify']->period_mobile_token($mobile, App::$_token['id'], Model_Verify_Sms::TYPE_REPAY)) {
                $this->model['verify']->failed($v['id']);
            }
            $this->response_json([], "5006", "验证码错误");
        }

        $repay = false;
        $db = Database::instance();
        $db->begin();
        if ($order['status'] == Model_Order::STATUS_OVERDUE) {
            $repay = $this->model['order']->overdueActiveRepay(App::$_token['user_id'], $order_id, $bill_id);
        } elseif ($order['status'] == Model_Order::STATUS_PAID) {
            $repay = $this->model['order']->activeRepay(App::$_token['user_id'], $order_id, $bill_id);
        }

        if ($repay) {
            $db->commit();
            $this->model['verify']->success($vid);
            $this->response_json([], "1000", "主动还款申请成功", null, false);
            if (function_exists('fastcgi_finish_request')) {
                fastcgi_finish_request();
            } else {
                ignore_user_abort(true);
            }
            Model::factory('JPush_Queue')->push_message_by_alias('JPUSH_wheel', ['user_id' => App::$_token['user_id'], 'mobile' => App::$_user['mobile']]);
            exit();
        }

        $db->rollback();

        $this->response_json([], "4000", "主动还款申请失败");


    }


    public function action_RateSummary()
    {
        $order_type = isset($this->_data['type']) ? (int)$this->_data['type'] : 0;
        if ($order_type < 1) {
            $this->response_json([], "4005", "参数错误");
        }
        $response_array = [];
        //费率说明html
        $order_rate_html = Lib::factory('Helper_OrderFeeRate')->html($order_type);
        $response_array['order_rate_html'] = $order_rate_html ? $order_rate_html : '';
        $this->response_json($response_array, "1000", "查询成功");

    }


}


