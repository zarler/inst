<?php
defined('SYSPATH') or die('No direct script access.');

/**
 * Created by PhpStorm.
 * User: chunyu
 * Date: 18/01/12
 *
 *  分期借款
 */
class Controller_Ver1_Inst_Loan extends AppCore
{
    protected $_check_token = true;
    protected $_check_user = true;

    protected static $order_type = Model_Order::TYPE_INST;
    protected static $auth_url = '/v2/FastLoan_Credit/List';
    protected static $bankcard_api_url = '/v2/BankCard/Add';
    protected static $unit = '元';
    protected static $describe = [
        'loan_amount' => '借款金额：',
        'life_of_loan' => '借款期限：',

        'total_repay' => '应还总额：',
        'total_interest' => '总利息：',
        'month_repay' => '每月应还：',
        'start_end_date' => '起止日期：',
        'first_repay_date' => '首次还款日：',
        'repay_date' => '还款日：',

        'card_loan' => '收款银行卡：',
        'card_repay' => '还款银行卡：',
    ];
    protected static $note = '注：最终还款日以实际放款日为准';



    protected $tester = [96, 105, 505471, 11160, 363961, 153];


    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub
        $this->model['user'] = Model::factory('User');
        $this->model['order'] = Model::factory('Order');
        $this->model['order_charge'] = Model::factory('Order_Charge');
        $this->model['Inst'] = Model::factory('Order_Inst');
        $this->model['step'] = Model::factory('CreditInfo_Step');
        $this->model['bankcard'] = Model::factory('BankCard');
        $this->model['use_for'] = Model::factory('LoanUseFor');
        $this->log = new MyLog(APPPATH . 'logs/app/');
        $this->time = time();
    }


    /**
     * 用户状态,禁止借款
     */
    protected function check_status_deny()
    {
        if (empty(App::$_user['identity_code']) || (int)App::$_user['validated_identity'] != (int)Model_User::IDENTITY_STATUS_VERIFIED) {
            $this->response_json([], "5116", "用户未通过实名认证");
        }
        if ((int)App::$_user['allow_login'] !== (int)Model_User::ALLOW_LOGIN__ALLOWED) {
            $this->response_json([], "5082", "用户状态错误,禁止借款");
        }
        if (in_array(App::$_user['status'], [Model_User::STATUS_DENY, Model_User::STATUS_LOANDENY, Model_User::STATUS_DENYFOREVER, Model_User::STATUS_DENYTEMP, Model_User::STATUS_DELETED])) {
            $this->response_json([], "5082", "用户被禁止借款");
        }

    }


    /**
     * 费率表
     */
    public function action_ChargeMap()
    {
        $is_first = $this->model['order']->first_by_user_id(App::$_token['user_id']);
        $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);

        $charge_rate = 1.0;
        $max_amount = 0;

        if ($fp) {
            if ($fp['inst_amount'] > 0) {
                $max_amount = bcmul(floor($fp['inst_amount'] / Model_Order_Inst::AMOUNT_STEP_LINE), Model_Order_Inst::AMOUNT_STEP_LINE);
            }

        }

        $charge_rule = [
            'max_amount' => $max_amount ? (string)$max_amount : '0',
            'min_amount' => Model_Order_Inst::MIN_AMOUNT ? (string)Model_Order_Inst::MIN_AMOUNT : '0',
            'step_line' => Model_Order_Inst::AMOUNT_STEP_LINE ? (string)Model_Order_Inst::AMOUNT_STEP_LINE : '0',
            'max_month' => Model_Order_Inst::MAX_MONTH ? (string)Model_Order_Inst::MAX_MONTH : '0',
            'min_month' => Model_Order_Inst::MIN_MONTH ? (string)Model_Order_Inst::MIN_MONTH : '0',
        ];

        //费率表
        $formula = Model::factory('Order_Formula_Inst');
        $charge_map = [];
        $month_map = [];
        $money_map = [];
        $amount_map = Model_Order_Inst::AMOUNT_MAP;

        foreach ($amount_map as $money) {
            if($money > $max_amount){
                break;
            }
            if (Model_Order_Inst::AMOUNT_MONTH_MAP[$money] != null) {

                $amount_month_map = Model_Order_Inst::AMOUNT_MONTH_MAP[$money];

                if (count($amount_month_map) > 0) {

                    foreach ($amount_month_map as $month) {
                        if ($is_first) {
                            $fee = $formula->first($money, $month, $charge_rate);
//                            $charge_map['_' . $money . '_' . $month]['item'] = $this->model['order_charge']->format_fee($this->model['order_charge']->make_fee_item($money, $month, $fee));
                        } else {
                            $fee = $formula->again($money, $month, $charge_rate);
//                            $charge_map['_' . $money . '_' . $month]['item'] = $this->model['order_charge']->format_fee($this->model['order_charge']->make_fee_item($money, $month, $fee));

                        }

                        $total_interest = $this->model['order_charge']->format_fee($this->model['order_charge']->make_fee_total($fee));

                        $key = '_' . $money . '_' . $month;
                        $repay_amount = bcadd($fee, $money, 2);
                        /*$charge_map[$key]['total_repay'] = self::$describe['total_repay'] . $repay_amount . self::$unit;
                        $charge_map[$key]['total_interest'] = self::$describe['total_interest'] . $total_interest[0]['amount'] . $total_interest[0]['unit'];
                        $charge_map[$key]['month_repay'] = self::$describe['month_repay'] . bcdiv($repay_amount, $month, 2);
                        $charge_map[$key]['start_end_date'] = self::$describe['start_end_date'] . date('Y/m/d') . '-' . $formula->date_formula($month + 1);
                        $charge_map[$key]['first_repay_date'] = self::$describe['first_repay_date'] . $formula->date_formula(1);
                        $charge_map[$key]['repay_date'] = self::$describe['repay_date'] . '每月' . date('d') . '日';
                        $charge_map[$key]['note'] = self::$note;*/

                        $charge_map[$key][] = ['left' => self::$describe['total_repay'], 'right' => ($fee + $money) . self::$unit, 'bold' => '1'];
                        $charge_map[$key][] = ['left' => self::$describe['total_interest'], 'right' => $total_interest[0]['amount'] . $total_interest[0]['unit'], 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['month_repay'], 'right' => bcdiv($repay_amount, $month, 2), 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['start_end_date'], 'right' => date('Y/m/d') . '-' . $formula->date_formula($month + 1), 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['first_repay_date'], 'right' => $formula->date_formula(1), 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$describe['repay_date'], 'right' => '每月' . date('d') . '日', 'bold' => '0'];
                        $charge_map[$key][] = ['left' => self::$note, 'right' => '', 'bold' => '0'];

                    }
                }

            }

        }

        foreach ($amount_map as $v) {
            if($v > $max_amount){
                break;
            }
            $money_map[] = ['_money' => (string)$v];
        }

        foreach (Model_Order_Inst::AMOUNT_MONTH_MAP as $money => $month) {
            foreach ($month as $v){
                if($money > $max_amount){
                    break;
                }
                $k = '_' . $money;
                $month_map[$k][] = ['_month' => (string)$v];
            }
        }

        //借款用途
        $loan_use_for = [];
        $use_for = $this->model['use_for']->get_list();
        foreach ($use_for as $val){
            $loan_use_for[] = [
                'use_for_id' => $val['id'],
                'use_for_name' => $val['name'],
            ];
        }


        $response_array = [];
        if ($charge_rule) {
            $response_array['rule'] = $charge_rule;
        }

        if ($money_map) {
            $response_array['money'] = $money_map;
        }

        if ($month_map) {
            $response_array['month'] = $month_map;
        }

        if ($charge_map) {
            $response_array['map'] = $charge_map;
        }

        if ($use_for) {
            $response_array['use_for'] = $loan_use_for;
        }


        $this->response_json($response_array, "1000", "查询成功");

    }


    /**
     * 分期 状态查询
     */
    public function action_Status()
    {
        $is_first = $this->model['order']->first_by_user_id(App::$_token['user_id']);

        $response_array = [];
        $response_array['on'] = ($is_first && Model_Order_Inst::PER_DAY_MAX_FIRST != -1 ) || (!$is_first && Model_Order_Inst::PER_DAY_MAX_AGAIN != -1)  ? (string)Model_Order_Inst::OFF : (string)Model_Order_Inst::ON;//开关
        $response_array['today_max'] = Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN > 0 ? (string)Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN : "0";
        $response_array['today_start_str'] = (string)Model_Order_Inst::PER_DAY_START;
        $response_array['today_end_str'] = (string)Model_Order_Inst::PER_DAY_END;
        $response_array['today_start'] = (string)strtotime(date('Y-m-d ') . Model_Order_Inst::PER_DAY_START);
        $response_array['today_end'] = (string)strtotime(date('Y-m-d ') . Model_Order_Inst::PER_DAY_END);
        $response_array['total_text'] = '';//APP上的文字说明


        //去除旧的缓存数据
        $redis = Redis_Hash::instance();
        $status = $redis->get(Model_Order_Inst::KEY_STATUS);
        $date = date('Y-m-d');

        if (isset($status['date']) && $status['date'] == $date) {
            if (time() < $response_array['today_start']) {
                $response_array['today_total'] = (string)0;//未开放之前应该是0
            } else {
                if ($is_first) {
                    $response_array['today_max'] = Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST;
                    $response_array['today_total'] = (string)(isset($status['first_today_total']) ? $status['first_today_total'] : 0);
                } else {
                    $response_array['today_max'] = Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN;
                    $response_array['today_total'] = (string)(isset($status['again_today_total']) ? $status['again_today_total'] : 0);
                }
            }
            $response_array['date'] = (string)$status['date'];
            $response_array['last_update'] = (string)$status['last_update'];
        } else {
            //新的一天第一次刷新redis
            if ($is_first) {
                $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST, Model_Order_Inst::PER_DAY_MAX_FIRST);
                $response_array['today_total'] = (string)(isset($status['first_today_total']) ? $status['first_today_total'] : 0);
            } else {
                $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN, Model_Order_Inst::PER_DAY_MAX_AGAIN);
                $response_array['today_total'] = (string)(isset($status['again_today_total']) ? $status['again_today_total'] : 0);
            }
            $response_array['date'] = (string)$status['date'];
            $response_array['last_update'] = (string)$status['last_update'];
        }

        if ($is_first) {
            $surplus = Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST - (int)$status['first_today_total'] >= 0 ? Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST - (int)$status['first_today_total'] : 0;
            $response_array['total_text'] = '每日10:00开放' . Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST . '单,当前剩余' . $surplus . '单';

        } else {
            $surplus = Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN - (int)$status['again_today_total'] >= 0 ? Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN - (int)$status['again_today_total'] : 0;
            $response_array['total_text'] = '每日10:00开放' . Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN . '单,当前剩余' . $surplus . '单';

        }


        //tester: 测试用户
        if (isset(App::$_token['user_id']) && in_array(App::$_token['user_id'], $this->tester)) {
            $response_array['total_text'] = '测试员专用! 首贷' . (isset($status['first_today_total']) ? $status['first_today_total'] : 0) . ' 复贷' . (isset($status['again_today_total']) ? $status['again_today_total'] : 0);
            $response_array['today_max'] = "10000";
            $response_array['today_total'] = "0";
            $response_array['today_start_str'] = '00:00:00';
            $response_array['today_end_str'] = '23:59:59';
            $response_array['today_start'] = (string)strtotime(date('Y-m-d') . ' 00:00:00');
            $response_array['today_end'] = (string)strtotime(date('Y-m-d') . ' 23:59:59');
        }


        $this->response_json($response_array, "1000", "查询成功");
    }


    /**
     * 借款前确认页面
     *
     */
    public function action_Confirm()
    {

        $type = self::$order_type;
        $month = isset($this->_data['month']) && $this->_data['month'] > 0 ? (int)$this->_data['month'] : 0;
        $loan_amount = isset($this->_data['loan_amount']) && $this->_data['loan_amount'] > 0 ? $this->_data['loan_amount'] : 0;
        $bankcard_id = isset($this->_data['bankcard_id']) ? (int)$this->_data['bankcard_id'] : 0;
        $use_for_id = isset($this->_data['use_for_id']) ? (int)$this->_data['use_for_id'] : 0;


        if (
            $month < Model_Order_Inst::MIN_MONTH ||
            $month > Model_Order_Inst::MAX_MONTH ||
            !in_array((int)$month, Model_Order_Inst::MONTH_MAP) ||
            $use_for_id < 1
        ) {
            $this->response_json([], "4005", "参数错误");
        }

        $use_for = $this->model['use_for']->get_one($use_for_id);
        if(empty($use_for)){
            $this->response_json([], "4005", "参数错误");
        }


        //借款申请:每日只记一次
        Lib::factory('Credit_Inst')->app_id(App::$id)->apply_record_date(App::$_token['user_id']);


        //借记卡
        if ($bankcard_id < 1) {
            $target = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https://' : 'http://';
            $target = $target . $_SERVER['HTTP_HOST'] . self::$bankcard_api_url;
            $this->response_json(['api' => $target], "5069", "储蓄卡错误");
        }
        if ($bankcard = $this->model['bankcard']->get_one_by_user_id(App::$_token['user_id'], $bankcard_id)) {
            if ($bankcard['status'] != Model_BankCard::STATUS_ON) {
                $target = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https://' : 'http://';
                $target = $target . $_SERVER['HTTP_HOST'] . self::$bankcard_api_url;
                $this->response_json(['api' => $target], "5059", "储蓄卡状态不正确");
            } else {
                //储蓄卡有效
            }
        } else {
            $target = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https://' : 'http://';
            $target = $target . $_SERVER['HTTP_HOST'] . self::$bankcard_api_url;
            $this->response_json(['api' => $target], "5069", "储蓄11卡错误");
        }

        //银行
        $bank = Model::factory('Bank')->get_one($bankcard['bank_id']);
        if(empty($bank)){
            $this->response_json(['api' => $target], "5069", "储蓄卡错误");

        }


        //授信状态判断,是否有授信额度
        $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);
        if ($fp || !isset($fp['inst_amount'])){
            if($fp['inst_amount'] > 0) {
                //正常
            }else{
                $this->response_json([], "5100", "没有可用额度");

            }

        }else{
            $this->response_json([], "5072", "用户数据异常");

        }

        $max_amount = bcmul(floor($fp['inst_amount'] / Model_Order_Inst::AMOUNT_STEP_LINE), Model_Order_Inst::AMOUNT_STEP_LINE);
        if(bcsub($loan_amount, $max_amount) == 1){
            $this->response_json([], "5113", "用户借款金额超限");
        }
        $unfinished_amount = $this->model['order']->unfinished_amount(App::$_token['user_id']);
        if($unfinished_amount > 0 && bccomp($loan_amount, bcsub($max_amount - $unfinished_amount, 2)) == 1){
            $this->response_json([], "5113", "用户借款金额超限");

        }


        //首次借款判断与费率
        $is_first = $this->model['order']->first_by_user_id(App::$_token['user_id']);
        if ($is_first) {
            $charge_amount = Model::factory('Order_Formula_Inst')->first($loan_amount, $month);
        } else {
            $charge_amount = Model::factory('Order_Formula_Inst')->again($loan_amount, $month);
        }


        $source_charge_amount = $charge_amount;
        //费率拆分细项生成
        $fees = Model::factory('Order_Charge')->make_fee_item($loan_amount, $month, $charge_amount);
        if (!$fees) {
            $this->response_json([], "5149", "费率异常");
        }



        /*$order_array = [
            'user_id' => App::$_token['user_id'],
            'id' => 0,
            'type' => $type,
            'bankcard_id' => $bankcard['id'],
            'bankcard_no' => $bankcard['card_no'],
            'name' => App::$_user['name'],
            'mobile' => App::$_user['mobile'],
            'loan_amount' => $loan_amount,
            'repay_amount' => bcadd($loan_amount, $charge_amount, 2),
            'month' => $month,
            'status' => Model_Order::STATUS_READY,
            'charge' => $charge_amount,
        ];*/

        $formula = Model::factory('Order_Formula_Inst');
        $user['name'] = App::$_user['name'];
        $user['identity_code'] = substr_replace(App::$_user['identity_code'], '*****', 6, 4);

        $map['loan_amount'] = self::$describe['loan_amount'] . $loan_amount;
        $map['life_of_loan'] = self::$describe['life_of_loan'] . $month . '个月';
        $map['total_repay'] = self::$describe['total_repay'] . ($charge_amount + $loan_amount) . self::$unit;
        $map['total_interest'] = self::$describe['total_interest'] . $charge_amount . self::$unit;
        $map['month_repay'] = self::$describe['month_repay'] . bcdiv($map['total_repay'], $month, 2);
        $map['start_end_date'] = self::$describe['start_end_date'] . date('Y/m/d') . '-' . $formula->date_formula($month + 1);
        $map['first_repay_date'] = self::$describe['first_repay_date'] . $formula->date_formula(1);
        $map['repay_date'] = self::$describe['repay_date'] . '每月' . date('d') . '日';


        //卡信息
        $sub_card_no = substr($bankcard['card_no'], -4);
        $card['card_loan'] = self::$describe['card_loan'] . $bank['name'] . '（' . $sub_card_no . '）';
        $card['card_repay'] = self::$describe['card_repay'] . $bank['name'] . '（' . $sub_card_no . '）';


        $response_array = [];
        $response_array['user'] = $user;
        $response_array['loan_info'] = $map;
        $response_array['use_for'] = $use_for;//借款用途
        $response_array['card'] = $card;


        /*$response_array['order_extension'] = [
            ['left'=>'左边标题','right'=>'右边内容'],
            ['left'=>'左边标题','right'=>'右边内容'],
            ['left'=>'只有左边标题右边为空','right'=>''],
            ['left'=>'','right'=>'只有右边标题左边为空'],
            ['left'=>'只有左边标题没有右边'],
            ['right'=>'只有右边标题没有左边'],
            ['left'=>'链接','right'=>'这里是个链接','right_is_link'=>'http://www.sohu.com'],
        ];*/

        //费率说明和活动内容HTML
        $order_rate_html = Lib::factory('Helper_OrderFeeRate')->html($type);
        $response_array['foot_html'] = $order_rate_html ? $order_rate_html : '';


        $this->response_json($response_array, "1000", "借款详情");

    }


    /**
     * 分期贷款 借款申请
     */
    public function action_Apply()
    {
        $this->check_status_deny();

        $type = self::$order_type;
        $month = isset($this->_data['month']) && $this->_data['month'] > 0 ? (int)$this->_data['month'] : 0;
        $loan_amount = isset($this->_data['loan_amount']) && $this->_data['loan_amount'] > 0 ? $this->_data['loan_amount'] : 0;
        $bankcard_id = isset($this->_data['bankcard_id']) ? (int)$this->_data['bankcard_id'] : 0;
        $use_for_id = isset($this->_data['use_for_id']) ? (int)$this->_data['use_for_id'] : 0;


        if (
            $month < Model_Order_Inst::MIN_MONTH ||
            $month > Model_Order_Inst::MAX_MONTH ||
            !in_array((int)$month, Model_Order_Inst::MONTH_MAP) ||
            $use_for_id < 1
        ) {
            $this->response_json([], "4005", "参数错误");
        }

        $use_for = $this->model['use_for']->get_one($use_for_id);
        if(empty($use_for)){
            $this->response_json([], "4005", "参数错误");
        }


        $is_first = $this->model['order']->first_by_user_id(App::$_token['user_id']);
        if (($is_first && Model_Order_Inst::PER_DAY_MAX_FIRST != -1 ) || (!$is_first && Model_Order_Inst::PER_DAY_MAX_AGAIN != -1)) {
            $this->response_json([], "5129", "分期贷未开放");
        }

        //借款申请:每日只记一次
        Lib::factory('Credit_Inst')->app_id(App::$id)->apply_record_date(App::$_token['user_id']);


        //借记卡
        if ($bankcard_id < 1) {
            $target = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https://' : 'http://';
            $target = $target . $_SERVER['HTTP_HOST'] . self::$bankcard_api_url;
            $this->response_json(['api' => $target], "5069", "储蓄卡错误");
        }
        if ($bankcard = $this->model['bankcard']->get_one_by_user_id(App::$_token['user_id'], $bankcard_id)) {
            if ($bankcard['status'] != Model_BankCard::STATUS_ON) {
                $target = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https://' : 'http://';
                $target = $target . $_SERVER['HTTP_HOST'] . self::$bankcard_api_url;
                $this->response_json(['api' => $target], "5059", "储蓄卡状态不正确");
            } else {
                //储蓄卡有效
            }
        } else {
            $target = isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] ? 'https://' : 'http://';
            $target = $target . $_SERVER['HTTP_HOST'] . self::$bankcard_api_url;
            $this->response_json(['api' => $target], "5069", "储蓄卡错误");
        }


        //[test special]-----------------[begin]
        if (isset(App::$_token['user_id']) && in_array(App::$_token['user_id'], $this->tester)) {
            //测试员专用通道,不受借款时间和单量限制
        } else {
            $day_start_time = strtotime(date('Y-m-d') . ' ' . Model_Order_Inst::PER_DAY_START);
            $day_end_time = strtotime(date('Y-m-d') . ' ' . Model_Order_Inst::PER_DAY_END);
            if (time() < $day_start_time) {
                $this->response_json([], "5127", "开放抢单时间为每日" . Model_Order_Inst::PER_DAY_START . "，等下再来吧~");
            }
            if (time() > $day_end_time) {
                $this->response_json([], "5128", "抢单时间已过,请明天再来吧~");
            }
        }
        //[test special]-----------------[end]



        $age = (int)Tool::factory('IDCard')->age(App::$_user['identity_code']);
        if ($age < 22 || $age > 40) {
            $this->response_json([], "5103", "您的年龄暂不符合分期借款要求");//不符合年龄
        }


        //授信状态判断,是否有授信额度
        $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);
        if ($fp || !isset($fp['inst_amount'])){
            if($fp['inst_amount'] > 0) {
                //正常
            }else{
                $this->response_json([], "5100", "没有可用额度");

            }

        }else{
            $this->response_json([], "5072", "用户数据异常");

        }

        $max_amount = bcmul(floor($fp['inst_amount'] / Model_Order_Inst::AMOUNT_STEP_LINE), Model_Order_Inst::AMOUNT_STEP_LINE);
        if(bcsub($loan_amount, $max_amount) == 1){
            $this->response_json([], "5113", "用户借款金额超限");
        }
        $unfinished_amount = $this->model['order']->unfinished_amount(App::$_token['user_id']);
        if($unfinished_amount > 0 && bccomp($loan_amount, bcsub($max_amount - $unfinished_amount, 2)) == 1){
            $this->response_json([], "5113", "用户借款金额超限");

        }


        //$today_total = $this->model['fastloan']->total_by_date(date('Y-m-d'));
        //if (Model_Order_Inst::PER_DAY_MAX > 0 && $today_total >= Model_Order_Inst::PER_DAY_MAX) {
        //   $this->response_json(array(), "5122", "抱歉，今日分期贷款已抢完，明日10:00开放抢单");
        //}



        if (isset(App::$_token['user_id']) && in_array(App::$_token['user_id'], $this->tester)) {
            //测试员专用通道,不受借款时间和单量限制
        } else {
            $redis = Redis_Hash::instance();
            $status = $redis->get(Model_Order_Inst::KEY_STATUS);
            if (isset($status['date']) && $status['date'] != date('Y-m-d')) {
                if ($is_first) {
                    $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST, Model_Order_Inst::PER_DAY_MAX_FIRST);
                } else {
                    $status = Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN, Model_Order_Inst::PER_DAY_MAX_AGAIN);
                }
            }
            $first_today_total = isset($status['first_today_total']) ? $status['first_today_total'] : 0;
            $again_today_total = isset($status['again_today_total']) ? $status['again_today_total'] : 0;
            if ($is_first && $first_today_total >= Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST) {
                $this->response_json([], "5122", "抱歉，今日分期贷款已抢完，明日10:00开放抢单");
            } elseif (!$is_first && $again_today_total >= Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN) {
                $this->response_json([], "5122", "抱歉，今日分期贷款已抢完，明日10:00开放抢单");
            }

        }


        //首次借款判断与费率
        if ($is_first) {
            $charge_amount = Model::factory('Order_Formula_FastLoan')->first($loan_amount, $month);
        } else {
            $charge_amount = Model::factory('Order_Formula_FastLoan')->again($loan_amount, $month);
        }

        //记录order_charge表里
        //$order_charge[] = array('amount'=>$loan_charge, 'model_type'=>Model_Order_Charge::TYPE_LOAN);
        //记录一个原手续费
        $source_charge_amount = $charge_amount;
        //费率拆分细项生成
        $fees = Model::factory('Order_Charge')->make_fee_item($loan_amount, $month, $charge_amount);
        if (!$fees) {
            $this->response_json([], "5149", "费率异常");
        }


        //设备事件采集
        if (in_array(strtolower(App::$id), ['android', 'ios'])) {
            try {
                Model::factory('EquipmentEvent')->create([
                                                             'equipment_id' => App::$unique_id,
                                                             'user_id' => App::$_token['user_id'] > 0 ? App::$_token['user_id'] : 0,
                                                             'token' => App::$token,
                                                             'type' => Model_EquipmentEvent::TYPE_LOAN,
                                                             'type2' => Model_EquipmentEvent::TYPE2_INSTLOAN,
                                                             'extend' => [
                                                                 'app' => [
                                                                     'id' => App::$id,
                                                                     'os' => App::$os,
                                                                     'ver' => App::$ver,
                                                                     'ip' => App::$ip,
                                                                 ],
                                                             ],
                                                         ]);
            } catch (Exception $e) {
                //...
            }
        }


        //借款反欺诈: 实时返回 每次都运行 (内含30天有效还款判断)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////需要不？///////////////////////////////
        if (!Lib::factory('Credit_Inst')->app_id(App::$id)->event_loan_af(App::$_token['user_id'])) {//借款反欺诈
            $this->response_json([], "5125", "借款反欺诈未通过");
        }


        $order_no = $this->model['order']->make_no();

        $create_array = [
            'order_no' => $order_no,
            'bankcard_id' => $bankcard['id'],
            'loan_amount' => $loan_amount,
            'repay_amount' => bcadd($loan_amount, $charge_amount, 2),
            'status' => Model_Order::STATUS_INIT,
            'type' => $type,
            'charge' => $charge_amount,
            'month' => $month,
            'name' => App::$_user['name'],
            'mobile' => App::$_user['mobile'],
            'identity_code' => App::$_user['identity_code'],
            'bankcard_no' => $bankcard['card_no'],
            'create_time' => time(),
        ];


        /* 创建订单   --------------------- */
        $order_id = 0;
        $has_unfinished = false;
        $db = Database::instance();
        $db->begin();
        try {

            $i = 0;
            while ($rs1 = $this->model['order']->get_one_by_order_no($order_no)) {//订单编号碰撞,重试3次
                $order_no = $this->model['order']->make_no();
                if ($i >= 3) {
                    $this->response_json([], "4012", "出现异常,数据已回滚:" . $e->getMessage() . " " . $e->getTraceAsString());
                } else {
                    $i++;
                }
            }

            $create_array['order_no'] = $order_no;
            $order_id = $this->model['order']->create(App::$_token['user_id'], $create_array);
            if ($order_id < 1) {
                $this->response_json([], "4012", "出现异常,数据已回滚:" . $e->getMessage() . " " . $e->getTraceAsString());
            }



            $db->commit();
        } catch (Exception $e) {
            $db->rollback();
            $this->response_json([], "4012", "出现异常,数据已回滚:" . $e->getMessage() . " " . $e->getTraceAsString());
        }

        if ($order_id > 0) {


            foreach ($fees as $v) { //记录费用表
                $this->model['order_charge']->create(App::$_token['user_id'], $order_id, $v['model_type'], $v['amount']);
            }


            //数据渲染
            if ($is_first) {
                Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_FIRST, Model_Order_Inst::PER_DAY_MAX_FIRST, 'first');//订单计次
            } else {
                Lib::factory('Helper_Inst')->loan_draw(Model_Order_Inst::DRAW_PER_DAY_MAX_AGAIN, Model_Order_Inst::PER_DAY_MAX_AGAIN, 'again');//订单计次
            }



            /*
            //需要数据渲染,暂时屏蔽缓存删除功能
            $redis = Redis_Hash::instance();
            $redis->del(Model_Order_Inst::KEY_STATUS);
            */

            $response_array = [
                'order_id' => $order_id,
                'order_no' => $order_no,
                'loan_amount' => $loan_amount,
                'charge' => $charge_amount,
                'bankcard_no' => Lib::factory('String')->strShieldMiddle($bankcard['card_no'], 4, 4),
            ];

            //appv2.2.0 增加极光推送(JPUSH)给用户打上alias、tag
            $response_ext['app_jpush']['tag'] = 'inst';

            $order_rate_html = Lib::factory('Helper_OrderFeeRate')->html($type);
            $response_array['foot_html'] = $order_rate_html ? $order_rate_html : '';


            $this->response_json($response_array, "1000", "借款申请成功", $response_ext);
        }
        $this->response_json([], "4000", "借款申请失败");


    }


    /**
     * 检查用户是否需要跳出绑卡
     */
    protected function check_jump_bankcard_bind($user_id, $bankcard_id)
    {
        //3.0.0 不强验。
        return true;
        if (App::$ver > '2.3.9' && App::$ver < '2.5') {
            if (isset(App::$_user['credit_auth']) && in_array(App::$_user['credit_auth'], [Model_User::CREDIT_AUTH_BASE_VERIFIED, Model_User::CREDIT_AUTH_STATUS_READY, Model_User::CREDIT_AUTH_STATUS_ONSUBMIT, Model_User::CREDIT_AUTH_STATUS_SUBMITED, Model_User::CREDIT_AUTH_STATUS_CHECKING, Model_User::CREDIT_AUTH_STATUS_VERIFIED, Model_User::CREDIT_AUTH_STATUS_FAILED, Model_User::CREDIT_AUTH_STATUS_BACK])) {
                return true;
            }
            if ($rs = Model::factory('BankCard_Bind')->get_one_by_array(['bankcard_id' => $bankcard_id, 'user_id' => $user_id, 'status' => Model_BankCard_Bind::STATUS_ON])) {
                return true;
            }
            $this->response_json([], "5194", "用户需要进行绑卡!");
        }
    }


    /**
     * 检查用户是否需要抓取运营商记录
     * @param $user_id
     * @return bool
     */
    protected function check_jump_mno_query_record()
    {


        if (!in_array(App::$_user['credit_auth'], [
            Model_User::CREDIT_AUTH_BASE_VERIFIED,
            Model_User::CREDIT_AUTH_STATUS_READY,
            Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
            Model_User::CREDIT_AUTH_STATUS_SUBMITED,
            Model_User::CREDIT_AUTH_STATUS_CHECKING,
            Model_User::CREDIT_AUTH_STATUS_VERIFIED,
            Model_User::CREDIT_AUTH_STATUS_FAILED,
            Model_User::CREDIT_AUTH_STATUS_BACK,
        ])
        ) {
            if (App::$ver > '2.3.9') {
                $step = $this->model['user']->get_ci_step(App::$_token['user_id']);
                if (isset($step[Model_CreditInfo_Step::MNO]) && (int)$step[Model_CreditInfo_Step::MNO] == (int)Model_CreditInfo_Step::COMPLETE) {
                    return true;
                } else {
                    $this->response_json([], "5195", "用户未获取移动运营商记录!");
                }
            } else {
                $this->response_json([], "5195", "请升级最新版APP!");
            }
        }
        //天创用户可以被设置为ci_step.mno=1 user.credit_auth=11 此时会自动跳融360运营商记录

    }


}


