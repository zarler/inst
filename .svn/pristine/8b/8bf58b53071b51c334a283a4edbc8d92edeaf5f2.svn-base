<?php
defined('SYSPATH') or die('No direct script access.');

/**
 * Created by PhpStorm.
 * User: chunyu
 * Date: 18/1/22
 * Time: 上午11:02
 *
 * 提交授信申请
 *
 */
class Task_CreditApply extends Minion_Task
{

    const JUDGE_SUCCESS = 1;//成功
    const JUDGE_FAILED = 2;//失败
    const JUDGE_EXCEPTION = 3;//异常需重试
    const JUDGE_WAIT = 4;//等待

    //模块对应函数名
    const MODULE_FUNCTION = [
        //芝麻信用  目前未接入

        //准入
        Model_CreditInfo::ADMISSION => 'admission',

        //百融 BaiRong
        Model_CreditInfo::BAIRONG => 'BaiRong',

        //宜信致诚 ZhiCheng
        Model_CreditInfo::ZHICHENG => 'ZhiCheng',

        //前海征信 QianHai +91征信 Jinrong91
        Model_CreditInfo::QIANHAI => 'QianHai',
        Model_CreditInfo::JINRONG91 => 'JinRong91',

        //非必须 （邮箱信用卡账单 京东 淘宝 社保 公积金）Model_CreditInfo_Step::CREDITCARDBILL, Model_CreditInfo_Step::JINGDONG, Model_CreditInfo_Step::TAOBAO, Model_CreditInfo_Step::FUND, Model_CreditInfo_Step::SOCIAL_SECURITY
        Model_CreditInfo::CARDBILL => 'creditBill',
        Model_CreditInfo::JINGDONG => 'JD',
        Model_CreditInfo::TAOBAO => 'TaoBao',
        Model_CreditInfo::SOCIAL_SECURITY => 'socialSecurity',
        Model_CreditInfo::FUND => 'fund',

        //运营商 MNO
        Model_CreditInfo::MNO => 'MNO',

        //伊美软通 Emay
        Model_CreditInfo::EMAY => 'Emay',

        //同盾 TongDun
        Model_CreditInfo::TONGDUN => 'tongDun',

        //人工额度 后台

    ];


    protected $model;
    protected $credit_model;//当前模块
    protected $user_id;
    protected $result;//lib返回结果
    protected $info;
    protected $skip = [];//一个人被拒或需要重试后，跳过以后的模块
    protected $wait = 0;//请求接口前是否需要等待


    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->model['credit_info'] = Model::factory('CreditInfo');
        $this->model['admission'] = Lib::factory('Risk_Admission');
        $this->model['user'] = Model::factory('User');

    }


    public function _execute(array $params)
    {
        echo date('Y-m-d H:i:s') . " " . __CLASS__ . ":" . __FUNCTION__ . " start\r\n";

        $credit_info = $this->model['credit_info']->getByArray([
                                                                   'result' => Model_CreditInfo::RESULT_INIT,
                                                               ]);
        $num = count($credit_info);
        echo '目前有 ' . $num . ' 条记录需要审核' . "\r\n";
        foreach ($credit_info as $key => $info) {
            $this->user_id = &$info['user_id'];
            $this->info = &$info;

            !isset($this->skip[$this->user_id]) && $this->skip[$this->user_id] = 0;

            if ($this->skip[$this->user_id] == 1) {
                echo 'skip', PHP_EOL;
                continue;
            }


            if (empty($info['module'])) {
                echo '信息错误' . "\r\n";
                continue;

            } else {
                $this->credit_model = &$info['module'];
                echo "\t", $this->user_id, ' credit_model:', $this->credit_model;

                try {
                    //准入规则
                    if ($info['module'] == Model_CreditInfo::ADMISSION) {
                        $res_admission = $this->admission();
                        if ($res_admission == Model_AdmissionShort::STATUS_VALID) {
                            echo "\t准入通过", PHP_EOL;
                            $this->pass();

                        } elseif ($res_admission == Model_AdmissionShort::STATUS_INVALID) {
                            echo "\t准入失败", PHP_EOL;
                            $this->reject();
                            $this->skip[$this->user_id] = 1;//此人不在继续
                            continue;

                        } elseif ($res_admission == Model_AdmissionShort::STATUS_RETRY) {
                            echo "\t准入重试", PHP_EOL;
                            $this->retry();
                            $this->skip[$this->user_id] = 1;//此人不在继续
                            continue;

                        }
                    } else {

                        //其他规则
                        if ($info['retry'] < Model_CreditInfo::MAX_TIMES) {

                            for ($i = $this->info['step']; $i < 3; $i++) {
                                echo ' for step:', $this->info['step'], PHP_EOL;
                                $this->wait = 0;
                                $this->result = null;
                                $function = self::MODULE_FUNCTION[$this->credit_model];
                                echo "\tfunction:" . $function;
                                echo PHP_EOL, time(), PHP_EOL;
                                $this->$function();
                                echo PHP_EOL, time(), PHP_EOL;
                                $judge = $this->judge();
                                echo "\tjudge:", $judge;
                                if ($judge == self::JUDGE_SUCCESS) {
                                    echo "\tpass";
                                    $this->pass();
                                    //step>2表示3步走完
                                    if ($this->info['step'] > 2) {
                                        echo $this->credit_model, ' ok', PHP_EOL;
                                        break;
                                    }
                                } elseif ($judge == self::JUDGE_FAILED) {
                                    echo "\treject";
                                    $this->reject();
                                    break;
                                } elseif ($judge == self::JUDGE_EXCEPTION) {
                                    echo "\tretry";
                                    $this->retry();
                                    break;
                                } elseif ($judge == self::JUDGE_WAIT) {
                                    echo "\twait";
                                    break;
                                } else {
                                    //应该走不到这里
                                    break;
                                }
                            }

                        } else {
                            $this->hang();
                            break;

                        }
                    }


                } catch (Exception $e) {
                    echo $e->getMessage(), ' ', $e->getTrace(), "\r\n";
                }


            }


            if ($this->skip[$this->user_id] == 0) {
                //每个人需要检测的所有模块一定是在同一时间段提交的，添加1小时内判断
                $all_count = $this->model['credit_info']->getCount(['user_id' => $this->user_id, 'create_time__start' => ($this->info['create_time'] - 3600)]);
                $ok_count = $this->model['credit_info']->getCount(['user_id' => $this->user_id, 'result' => 1, 'create_time__start' => ($this->info['create_time'] - 3600)]);
                if ($all_count == $ok_count) {
                    $this->passAll();
                }

            }


        }


        unset($this->model, $credit_info);

        echo date('Y-m-d H:i:s') . " " . __CLASS__ . ":" . __FUNCTION__ . " end\r\n";
        ob_flush();

    }

    //芝麻信用  目前未接入


    //tc_equipment_event_log
    //准入判断
    protected function admission()
    {
        return $this->model['admission']->base($this->user_id);

    }

    //百融 BaiRong
    protected function BaiRong()
    {
        echo ' BaiRong step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory('CreditReview_BaiRong')->user_id($this->user_id)->getData('SpecialList')->body();
                break;
            case 1:
                $this->result = Lib::factory('CreditReview_BaiRong')->user_id($this->user_id)->sendData('SpecialList')->body();
                break;
            case 2:
                $this->result = Lib::factory('CreditReview_BaiRong')->user_id($this->user_id)->getDecision('SpecialList')->body();
                break;
        }
    }

    //宜信致诚 ZhiCheng
    protected function ZhiCheng()
    {
        echo ' ZhiCheng step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory('CreditReview_ZhiCheng')->user_id($this->user_id)->getData('RiskService')->body();
                break;
            case 1:
                $this->result = Lib::factory('CreditReview_ZhiCheng')->user_id($this->user_id)->sendData('RiskService')->body();
                break;
            case 2:
                $this->result = Lib::factory('CreditReview_ZhiCheng')->user_id($this->user_id)->getDecision('RiskService')->body();
                break;
        }
    }


    //前海征信 QianHai +91征信 Jinrong91
    protected function QianHai()
    {
        echo ' QianHai step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory("CreditReview_QianHai")->user_id($this->user_id)->getData();
                break;
            case 1:
                $this->result = Lib::factory("CreditReview_QianHai")->user_id($this->user_id)->sendData()->body();
                break;
            case 2:
                $this->result = Lib::factory("CreditReview_QianHai")->user_id($this->user_id)->getDecision()->body();
                break;
        }
    }

    protected function JinRong91()
    {
        echo 'JinRong91 step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory('CreditReview_Jinrong91')->user_id($this->user_id)->getData('RiskService')->body();;
                break;
            case 1:
                if (time() > (strtotime($this->info['update_time']) + 5)) {
                    $this->result = Lib::factory('CreditReview_Jinrong91')->user_id($this->user_id)->sendData('RiskService')->body();
                } else {
                    $this->wait = 1;
                }
                break;
            case 2:
                $this->result = Lib::factory('CreditReview_Jinrong91')->user_id($this->user_id)->getDecision('RiskService')->body();
                break;
        }
    }

    //非必须 （邮箱信用卡账单 京东 淘宝 公积金 社保）
    protected function creditBill()
    {
        echo 'creditBill step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory('CreditReview_Moxie')->user_id($this->user_id)->getData('Email')->body();
                break;
            case 1:
                $this->result = Lib::factory('CreditReview_Moxie')->user_id($this->user_id)->sendData('Email')->body();
                break;
            case 2:
                $this->result = Lib::factory('CreditReview_Moxie')->user_id($this->user_id)->getDecision('Email')->body();
                break;
        }
    }

    protected function JD()
    {
        echo 'JD step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory('CreditReview_Moxie')->user_id($this->user_id)->getData('JD')->body();
                break;
            case 1:
                $this->result = Lib::factory('CreditReview_Moxie')->user_id($this->user_id)->sendData('JD')->body();
                break;
            case 2:
                $this->result = Lib::factory('CreditReview_Moxie')->user_id($this->user_id)->getDecision('JD')->body();
                break;
        }
    }

    protected function TaoBao()
    {
        echo 'TaoBao step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getData('Taobao')->body();
                break;
            case 1:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->sendData('Taobao')->body();
                break;
            case 2:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getDecision('Taobao')->body();
                break;
        }
    }

    protected function fund()
    {
        echo 'fund step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getData('Fund')->body();
                break;
            case 1:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->sendData('Fund')->body();
                break;
            case 2:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getDecision('Fund')->body();
                break;
        }
    }

    protected function socialSecurity()
    {
        echo 'SocialSecurity step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getData('SocialSecurity')->body();
                break;
            case 1:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->sendData('SocialSecurity')->body();
                break;
            case 2:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getDecision('SocialSecurity')->body();
                break;
        }

    }


    //运营商 MNO
    protected function MNO()
    {
        echo 'MNO step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getData('Mno')->body();
                break;
            case 1:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->sendData('Mno')->body();
                break;
            case 2:
                $this->result = Lib::factory("CreditReview_Moxie")->user_id($this->user_id)->getDecision('Mno')->body();
                break;
        }

    }

    //伊美软通 Emay
    protected function Emay()
    {
        echo 'Emay step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory("CreditReview_Emay")->user_id($this->user_id)->getData()->body();
                break;
            case 1:
                $this->result = Lib::factory("CreditReview_Emay")->user_id($this->user_id)->sendData()->body();
                break;
            case 2:
                $this->result = Lib::factory("CreditReview_Emay")->user_id($this->user_id)->getDecision()->body();
                break;
        }
    }

    //同盾 TongDun
    protected function tongDun()
    {
        echo 'tongDun step:', $this->info['step'];

        switch ($this->info['step']) {
            case 0:
                $this->result = Lib::factory('CreditReview_TongDun')->user_id($this->user_id)->getData('RiskService')->body();
                break;
            case 1:
                $this->result = Lib::factory('CreditReview_TongDun')->user_id($this->user_id)->sendData('RiskService')->body();
                break;
            case 2:
                $this->result = Lib::factory('CreditReview_TongDun')->user_id($this->user_id)->getDecision('RiskService')->body();
                break;
        }
    }

    //人工额度 后台


    //判断结果
    protected function judge()
    {
        var_dump($this->result);
        echo PHP_EOL;
        if ($this->wait == 1) {
            $this->skip[$this->user_id] = 1;//此人不在继续

            return self::JUDGE_WAIT;
        }

        if (is_array($this->result) && isset($this->result['status'])) {
            if ($this->result['status'] === true && isset($this->result['api_result']['result']) && $this->result['api_result']['result'] == Lib_Common::LIB_COMMON_API_RESULT_SUCCESS) {
                $last_step = Model_CreditInfo::MAX_TIMES - 1;
                if ($this->info['step'] < $last_step) {
                    return self::JUDGE_SUCCESS;

                } elseif ($this->info['step'] == $last_step) {//最后一步
                    if ($this->result['api_result']['review'] == Model_AntiFraud::PASS) {
                        return self::JUDGE_SUCCESS;

                    } elseif ($this->result['api_result']['review'] == Model_AntiFraud::UNPASS) {
                        $this->skip[$this->user_id] = 1;//此人不在继续

                        return self::JUDGE_FAILED;

                    }

                }

            }
        }

        $this->skip[$this->user_id] = 1;//此人不在继续

        return self::JUDGE_EXCEPTION;//异常


    }


    //重试+1
    protected function retry()
    {
        if (!$this->model['credit_info']->update(['user_id' => $this->user_id, 'module' => $this->credit_model], [
            'retry' => DB::expr('retry + 1'),
        ])
        ) {
            throw new Exception('retry+1失败 ');
        }


    }

    //通过
    protected function pass()
    {
        echo ' pass start:', $this->info['step'], PHP_EOL;

        if ($this->credit_model == Model_CreditInfo::ADMISSION || (isset($this->result['api_result']['review']) && $this->result['api_result']['review'] == Model_AntiFraud::PASS)) {
            //3步完成, admission只有一步
            $data = [
                'step' => DB::expr('step + 1'),
                'result' => Model_CreditInfo::RESULT_PASS,
            ];
        } else {
            $data = [
                'step' => DB::expr('step + 1'),
            ];
        }

        $where = ['user_id' => $this->user_id, 'result' => Model_CreditInfo::RESULT_INIT, 'module' => $this->credit_model];
        if (!$this->model['credit_info']->update($where, $data)
        ) {
            throw new Exception('pass > 1失败 ');

        }
        $this->info['update_time'] = time();
        $this->info['step']++;
        if ($this->credit_model == Model_CreditInfo::ADMISSION) {
            $this->info['step'] += 2;
        }
        echo ' pass end:', $this->info['step'], PHP_EOL;
        unset($where, $data);

    }

    //审核通过
    protected function passAll()
    {
        if (!$this->model['user']->update($this->user_id, [
            'credit_auth' => Model_User::CREDIT_AUTH_BASE_CHECKING,
        ])
        ) {
            throw new Exception('passAll失败  ');

        }
    }


    //未通过
    protected function reject()
    {
        $db = Database::instance();
        $db->begin();
        if (!$this->model['user']->update($this->user_id, [
            'credit_auth' => Model_User::CREDIT_AUTH_BASE_FAILED,
        ])
        ) {
            $db->rollback();
            throw new Exception('reject user失败  ');
        }

        if (!$this->model['credit_info']->update(['user_id' => $this->user_id, 'result' => 0, 'module' => $this->credit_model], [
            'result' => Model_CreditInfo::RESULT_REJECT,
        ])
        ) {
            $db->rollback();
            throw new Exception('reject credit_info:result->2失败 ');
        }

        if (null === DB::update('credit_info')
                ->set(['result' => Model_CreditInfo::RESULT_UNDO_REJECT])
                ->where('user_id', '=', $this->user_id)
                ->where('result', '=', Model_CreditInfo::RESULT_INIT)
                ->where('module', '!=', $this->credit_model)
                ->execute()
        ) {
            $db->rollback();
            throw new Exception('reject credit_info:result->4失败 ');
        }

        if (!Model::factory('Finance_Profile')->update($this->user_id, [
            'inst_amount' => 0,
        ])
        ) {
            $db->rollback();
            throw new Exception('reject Finance_Profile失败 ');
        }
        $db->commit();
        echo "\t" . $this->credit_model . '被拒绝 ' . "\r\n";


    }

    //挂起
    protected function hang()
    {
        $db = Database::instance();
        $db->begin();
        if (!$this->model['credit_info']->update(['user_id' => $this->user_id, 'result' => 0, 'module' => $this->credit_model], [
            'result' => Model_CreditInfo::RESULT_HUNG,
        ])
        ) {
            $db->rollback();
            throw new Exception('reject credit_info result => 3失败 ');
        }

        if (null === DB::update('credit_info')
                ->set(['result' => Model_CreditInfo::RESULT_UNDO_HUNG])
                ->where('user_id', '=', $this->user_id)
                ->where('result', '=', Model_CreditInfo::RESULT_INIT)
                ->where('module', '!=', $this->credit_model)
                ->execute()) {
            $db->rollback();
            throw new Exception('reject credit_info result => 5失败 ');
        }

        $db->commit();
        echo "\t" . $this->credit_model . ' 挂起 ' . "\r\n";


    }


}
