<?php
defined('SYSPATH') or die('No direct script access.');
/**
 * Created by PhpStorm.
 * User:wangxuesong
 * Date: 18/1/16
 * Time: 下午9:13
 * 订单列表
 */
class Controller_Order extends AdminController
{
    /*

    */

    protected $permission_array = array(

        'map' => array(
            'List' => array('Detail'),

        ),

    );

    public $_status = array();
    public $_page = 1;
    public $_perpage = 20;

    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub
        $this->_status = Model_Order::$status_array;
        $this->_bill_status = Model_Bill::$status_array;
        $this->_type = Model::factory('Order')->type_array;
        $this->_page = isset($this->get['page']) ? intval($this->get['page']) : 1;
        $this->_perpage = isset($this->get['pagesize']) ? intval($this->get['pagesize']) : 20;
        $this->_provider = Model::factory('Finance_Payment')->provider_array;
        $this->payment_status = Model::factory('Finance_Payment')->status_array;
    }


    public function action_List()
    {
        $array = array();
        if (isset($this->get['mobile']) && $this->get['mobile']) {
            $array['mobile'] = trim($this->get['mobile']);
        }
        if (isset($this->get['order_no']) && $this->get['order_no']) {
            $array['order_no'] = trim($this->get['order_no']);
        }
        if (isset($this->get['status']) && $this->get['status']) {
            $array['status_in'] = trim($this->get['status']);
        }
        if (isset($this->get['name']) && $this->get['name']) {
            $array['name'] = trim($this->get['name']);
        }
        if (isset($this->get['identity_code']) && $this->get['identity_code']) {
            $array['identity_code'] = trim($this->get['identity_code']);
            $array['join'] = 'user';
        }
        if (isset($this->get['type']) && $this->get['type']) {
            $array['type'] = trim($this->get['type']);
        }
        $total = Model::factory('Order')->getTotal($array);
        $pagination = Pagination::factory(
            array(
                'total_items' => $total,
                'items_per_page' => $this->_perpage,
            ));
        $list = Model::factory('Order')->getList($array, [],$this->_perpage, $this->_page);

        Template::factory('Order/List', array(
                'total' => $total,
                'list' => $list,
                '_status' => $this->_status,
                '_type' => $this->_type,
                'pagination' => $pagination,
            )
        )->response();
    }


    //订单详情
    public function action_Detail()
    {
        $message = NULL;
        $id = isset($this->get['id']) ? intval($this->get['id']) : 0;
        $order = Model::factory('Order')->getOne($id);
        if (empty($order)) {
            Template::factory()->message(
                array(
                    'type' => 'error',
                    'title' => '信息不存在',
                    'message' => '信息不存在或已经被删除.',
                    'back' => TRUE,)
            );
        }

        //获取当前订单绑定的银行卡号
        $bank = Model::factory('Bank')->getArray();
        $bankcard = Model::factory('BankCard')->getOne($order['bankcard_id']);

        //获取用户信息以及用户授信信息
        $user = Model::factory('User')->getOne($order['user_id']);
        $finance_profile = Model::factory('Finance_Profile')->getOne($order['user_id']);

        //获取此订单放款通道 放款记录
        $payment_list   = Model::factory('Finance_Payment')->getList(['order_id'=>$id]);

        $bill= Model::factory('Bill')->getByOrderId($id);

       
        $order['seal'] = empty($seal)?false:true; 

        Template::factory('Order/Detail', array(
                'order' => $order,
                'user' => $user,
                'bill' =>  $bill,
                'finance_profile'=> $finance_profile,
                'payment_list' => $payment_list,
                'bank' => $bank,
                'bankcard' => $bankcard,
                '_type' => $this->_type,
                '_status' => $this->_status,
                '_bill_status' => $this->_bill_status,
                '_provider' => $this->_provider,
                'payment_status' => $this->payment_status
            )
        )->response();

    }


    //导出
    function export($array){
        $list = Model::factory('Order')->get_all($array);
        if(count($list)==0){
            Template::factory()->message(
                array(
                    'type' => 'error',
                    'title' => '导出数据为空！',
                    'message' => '导出数据为空！',
                    'back' => TRUE)
            );
        }
        $_bank = Model::factory('Bank')->get_array('short_name');
        foreach ($list as $k => $v) {
            $list[$k]['bank_name'] = isset($_bank[$v['bank_id']]) ? $_bank[$v['bank_id']]:'未知';
            $list[$k]['overdue_day'] = time() > $v['expire_time'] ? Tool_Date::count_day_day($v['expire_time'], strtotime(date('Y-m-d'))) : '未到期';
        }
        $filename = 'overdue_' . date('YmdHis') . '_export.csv';
        Tool::factory('CSV')->export_array($filename, array(
                'head' => array('订单ID','订单号', '姓名', '开户行', '银行卡号', '应还金额', '已还金额', '逾期天数'),
                'type' => 'database',
                'body' => $list,
                'field' => array('id','order_no', 'name', 'bank_name', 'bankcard_no', 'repayment_amount', 'refunded_amount', 'overdue_day'),
            )
        );
    }


}
