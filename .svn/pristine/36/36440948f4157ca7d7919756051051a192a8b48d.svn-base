<?php

/**
 * Created by PhpStorm.
 * User: wangchao
 * Date: 2018/1/11
 * Time: 下午1:25
 *
 * 授信部分
 */
class Controller_Ver1_RiskInfo extends AppCore
{

    protected $face_pass;
    protected $identity_face_pass;
    protected $step;

    private $tester = [         //我们的测试人员 避免被地区年龄和反欺诈过滤掉
        '130427199209265520',
        '370306199310095615',
    ];


    public function before()
    {


        parent::before(); // TODO: Change the autogenerated stub
        $this->model['step'] = Model::factory('CreditInfo_Step');
        $this->model['user'] = Model::factory('User');
        $this->model['moxie_data'] = Model::factory('Moxie_Data');
        $this->model['moxie_queue'] = Model::factory('Moxie_Queue');
        $this->model['moxie_data_item'] = Model::factory('Moxie_DataItem');
        $this->model['Risk_QueryRecord'] = Model::factory('Risk_QueryRecord');


        $this->lib['Risk'] = Lib::factory('Risk_API');
//        $this->model['finance'] = Model::factory('Finance_Profile');
//        $this->model['faceidauth'] = Model::factory('User_FaceIDAuth');
//        $this->face_pass = Model_User_FaceIDAuth::AUTO_PASS_RATE;
//        $this->identity_face_pass = Model_User_FaceIDAuth::IDENTITY_PASS_RATE;

//        $this->model['phonebook'] = Model::factory('App_PhoneBook');
//        $this->model['smsrecord'] = Model::factory('App_SMSRecord');
//        $this->model['callhistory'] = Model::factory('App_CallHistory');
//        $this->model['order'] = Model::factory('Order_FastLoan');
//        $this->model['newapp2coupon'] = Model::factory('Activity_NewApp2Coupon');
    }


    /**
     * 用户状态被禁将不允许进行授信
     */
    private function user_reject()
    {
        if (in_array(App::$_user['status'],
            array(Model_User::STATUS_LOANDENY, Model_User::STATUS_DENYFOREVER, Model_User::STATUS_DENYTEMP))) {
            $this->response_json(array(), "4000", "您的个人资料暂时不能支持此操作.");
        }
    }


    /**
     * 授信记录
     */
    public function action_Step()
    {
        //USER_CACHE ----[BEGIN]
        $ca = Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->get();//CACHE GET
        if ($ca) {
            $response_array = $ca;
            if (!isset($response_array['has_fastloan_order']) || $response_array['has_fastloan_order'] != "1") {
                //APPv2.2.0 新增对未借过极速贷用户要求填写紧急联系人和工作信息
                if ($this->model['order']->first_by_user_id(App::$_token['user_id'])) {
                    $response_array['has_fastloan_order'] = "0";
                } else {
                    $response_array['has_fastloan_order'] = "1";
                }
            }
            //老用户已经通过基础授信的不需要采集运营商数据 v2.4.1
            if (in_array(App::$_user['credit_auth'], [
                Model_User::CREDIT_AUTH_BASE_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_READY,
                Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                Model_User::CREDIT_AUTH_STATUS_SUBMITED,
                Model_User::CREDIT_AUTH_STATUS_CHECKING,
                Model_User::CREDIT_AUTH_STATUS_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_FAILED,
                Model_User::CREDIT_AUTH_STATUS_BACK,
            ])) {
                //$response_array['credit_info']['step']['mno'] =  (string)Model_CreditInfo_Step::COMPLETE;
            }
            $this->response_json($response_array, "1000", "查询成功");
        }
        //USER_CACHE ----[END]


        $credit_info_step = array();
        $credit_info_count = array();
        $ci_step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        if (isset($ci_step)) {
            //unset($credit_info_step['create_time']);
            //unset($credit_info_step['update_time']);
            //unset($credit_info_step['user_id']);

            $credit_info_step['identity'] = App::$_user['validated_identity'] == Model_User::IDENTITY_STATUS_VERIFIED ? (string)Model_CreditInfo_Step::COMPLETE : (string)Model_CreditInfo_Step::INCOMPLETE;
            $credit_info_step['work_info'] = $ci_step['work_info'];
            $credit_info_step['home_info'] = $ci_step['home_info'];
            $credit_info_step['phone_book'] = $ci_step['phone_book'];
            $credit_info_step['sms_record'] = $ci_step['sms_record'];
            $credit_info_step['call_history'] = $ci_step['call_history'];
            $credit_info_step['contact'] = $ci_step['contact'];
            $credit_info_step['faceid'] = $ci_step['faceid'];
            $credit_info_step['location'] = $ci_step['location'];

            $credit_info_count['faceid'] = $ci_step['faceid_count'];
            $credit_info_count['location'] = $ci_step['location_count'];

            //老用户已经通过基础授信的不需要采集运营商数据 v2.4.1
            if (in_array(App::$_user['credit_auth'], [
                Model_User::CREDIT_AUTH_BASE_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_READY,
                Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                Model_User::CREDIT_AUTH_STATUS_SUBMITED,
                Model_User::CREDIT_AUTH_STATUS_CHECKING,
                Model_User::CREDIT_AUTH_STATUS_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_FAILED,
                Model_User::CREDIT_AUTH_STATUS_BACK,
            ])) {
                $credit_info_step['mno'] = (string)Model_CreditInfo_Step::COMPLETE;

            } else {
                $credit_info_step['mno'] = $ci_step['mno'];
                $credit_info_step['creditcardbill'] = $ci_step['creditcardbill'];
            }
        }

        //担保比例(信用借款比例)
        $ensure_rate = "1.0";
        if ($fp = $this->model['user']->get_finance_profile(App::$_token['user_id'])) {
            $ensure_rate = $fp['ensure_rate'];
        }

        //用户授信状态

        $user_credit_auth = isset(App::$_user['credit_auth']) ? App::$_user['credit_auth'] : (string)Model_User::CREDIT_AUTH_BASE_READY;
        $user_status = isset(App::$_user['status']) ? App::$_user['status'] : (string)Model_User::STATUS_DELETED;
        //暂时只支持100%担保借款，强制转型用户授信状态
        if ((string)$user_credit_auth == (string)Model_User::CREDIT_AUTH_STATUS_VERIFIED) {
            $user_credit_auth = (string)Model_User::CREDIT_AUTH_BASE_VERIFIED;
        }

        //是否可提交降担保授信
        $reduce_apply = array('show' => '0', 'enable' => '0', 'apply_date' => '');
        if (in_array(App::$_user['status'], array(Model_User::STATUS_NORMAL))) {
            $reduce_apply['show'] = '1';

            if (App::$_user['credit_reject_expire'] && App::$_user['credit_reject_expire'] > time()) {
                $reduce_apply['apply_date'] = date('Y-m-d', App::$_user['credit_reject_expire']);
            } else {
                $reduce_apply['apply_date'] = date('Y-m-d');
            }

            if ($ci_step['work_info'] == 2 && $ci_step['contact'] == 2) {

                if (in_array(App::$_user['credit_auth'], array(
                        Model_User::CREDIT_AUTH_STATUS_FAILED, Model_User::CREDIT_AUTH_STATUS_BACK,
                    )) && time() > App::$_user['credit_reject_expire']
                ) {//被退回,已超过拒绝期
                    $reduce_apply['enable'] = '1';
                    $reduce_apply['apply_date'] = App::$_user['credit_reject_expire'] ? date('Y-m-d',
                        App::$_user['credit_reject_expire']) : date('Y-m-d');
                } elseif (in_array(App::$_user['credit_auth'], array(
                    Model_User::CREDIT_AUTH_BASE_VERIFIED, Model_User::CREDIT_AUTH_STATUS_READY,
                    Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                ))) {//在有效期内还未提交
                    $reduce_apply['enable'] = '1';
                    $reduce_apply['apply_date'] = App::$_user['credit_reject_expire'] ? date('Y-m-d',
                        App::$_user['credit_reject_expire']) : date('Y-m-d');
                }
            }

        }


        $response_array = array();
        $response_array['user']['credit_auth'] = $user_credit_auth;
        $response_array['user']['status'] = $user_status;
        if ($ci_step) {
            $response_array['credit_info']['step'] = $credit_info_step;
            $response_array['credit_info']['count'] = $credit_info_count;
        }
        $response_array['finance']['ensure_rate'] = $ensure_rate;
        $response_array['reduce_apply'] = $reduce_apply;

        //APPv2.2.0 新增对未借过极速贷用户要求填写紧急联系人和工作信息
        if ($this->model['order']->first_by_user_id(App::$_token['user_id'])) {
            $response_array['has_fastloan_order'] = "0";
        } else {
            $response_array['has_fastloan_order'] = "1";
        }


        Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->set($response_array);//CACHE ----- [WRITE]

        $response_array['_db_read'] = "1";
        $this->response_json($response_array, "1000", "查询成功");

    }

    /**
     * 魔蝎数据 -- 淘宝抓取（跳出式）
     */
    public function action_MoxieTaobao()
    {

        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::TAOBAO);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);
        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'MoxieTaobao', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'Taobao',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieTaobao',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = $this->lib['Risk']->credit()->html('Taobao', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();
        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieTaobao', 'status' => 1,
        ]);
        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     *
     * 魔蝎-京东（跳出式）
     */
    public function action_MoxieJD()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::JINGDONG);
        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'JD',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieJD',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('JD', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();

        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieJD', 'status' => 1,
        ]);


        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 魔蝎-网银（跳出式）
     */
    public function action_MoxieBank()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::Bank);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'Bank',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieBank',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('Bank', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();

        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieBank', 'status' => 1,
        ]);

        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 魔蝎-学信网（跳出式）
     */
    public function action_MoxieChsi()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::Chsi);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'Chsi',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieChsi',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('Chsi', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();
        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieChsi', 'status' => 1,
        ]);

        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 魔蝎-公积金（跳出式）
     */
    public function action_MoxieFund()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::FUND);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'Fund',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieFund',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('Fund', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();

        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieFund', 'status' => 1,
        ]);

        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 魔蝎-社保（跳出式）
     */
    public function action_MoxieSocialSecurity()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::SOCIAL_SECURITY);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'SocialSecurity',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieSocialSecurity',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('SocialSecurity', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();

        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieSocialSecurity', 'status' => 1,
        ]);

        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 魔蝎-法院被执行人（跳出式）
     */
    public function action_MoxieZhixing()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::SOCIAL_ZHIXING);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'Zhixing',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieZhixing',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('Zhixing', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();

        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieZhixing', 'status' => 1,
        ]);

        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 魔蝎-邮箱 （跳出式）
     */
    public function action_MoxieEmail()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id'], Model_CreditInfo_Step::Email);

        if (isset($this->step) && (int)$this->step['status'] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);

        $id = $this->model['moxie_data']->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'tc_no' => '', 'action' => 'Email',
        ]);
        $this->model['moxie_data_item']->add_data_item([
            'extends' => App::$_token['user_id'], 'phone' => '', 'check_no' => '', 'tc_no' => '', 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = $this->model['Risk_QueryRecord']->get_by_array([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieEmail',
        ], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('Risk_API')->credit()->html('Email', [
            'extends' => App::$_token['user_id'],
            'userId' => $userId,
        ])->execute()->body();

        $this->model['Risk_QueryRecord']->create([
            'user_id' => App::$_token['user_id'], 'provider' => 'MoxieEmail', 'status' => 1,
        ]);

        if (is_array($res)) {
            $this->model['moxie_data']->moxie_data_update(intval($id), ['resp_data' => json_encode($res)]);

            if (isset($res['api_result']['info']['html']) && $res['api_result']['info']['html']) {
                $this->response_json([
                    'jump' => (string)1,
                    'html' => $res['api_result']['info']['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['api_result']['info']['url']) && $res['api_result']['info']['url']) {
                $this->response_json([
                    'jump' => (string)1,
                    'url' => $res['api_result']['info']['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => 1], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }
    }

    /**
     * 反欺诈-前海
     */

    public function action_CreditQianhai()
    {
        $data = json_decode($this->_post['json'], true);
        if (!isset($data['idCard'])) {
            $this->response_json([], "4005", "缺少参数 idCard");
//            $this->response(false, [], Lib_Common::LIB_COMMON_API_MISS_PARAM, '缺少参数 mobile');
        } elseif (!isset($data['name'])) {
            $this->response_json([], "4005", "缺少参数 name");
//            $this->response(false, [], Lib_Common::LIB_COMMON_API_MISS_PARAM, '缺少参数 mobile');
        }

        $result = Lib::factory("Risk_API")->anti('QianHai')->query('execute', [
            'idCard' => $data['idCard'],
            'name' => $data['name'],
        ])->execute()->body();
        if (is_array($result)) {
            $this->response_json([
                $result,
            ], '1000', '提交成功');
        } else {
            $this->response_json([], '1000', '提交失败');
        }
    }

    /**
     * 移动运营商抓取(跳出式)
     */
    public function action_MNORecord()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        if (isset($this->step[Model_CreditInfo_Step::MNO]) && (int)$this->step[Model_CreditInfo_Step::MNO] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }

        $mno_provider = '';//运营商通道
        if ($df = Model::factory('Defier_Relation')->get_one_by_user_id(App::$_token['user_id'])) {
            $mno_provider = Lib::factory('Defier_MNO')->sort($df['provider']);
        } else {
            //分配
            $provider = Lib::factory('Defier_Result')->sort(App::$_token['user_id']);//挑战渠道分配
            $mno_provider = Lib::factory('Defier_MNO')->sort($provider);
            Model::factory('Defier_Relation')->create(App::$_token['user_id'], $provider);//挑战渠道绑定
        }

        $rs = Model::factory('MNO_QueryRecord')->get_by_array(['user_id' => App::$_token['user_id']], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('MNO_QueryRecord')->apply_by_user_id(App::$_token['user_id'], $mno_provider);
        if (is_array($res)) {
            if (isset($res['html']) && $res['html']) {
                $this->response_json([
                    'jump' => (string)Model_MNO_QueryRecord::JUMP_HTML,
                    'html' => $res['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['url']) && $res['url']) {
                $this->response_json([
                    'jump' => (string)Model_MNO_QueryRecord::JUMP_URL,
                    'url' => $res['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => (string)Model_MNO_QueryRecord::NO_JUMP], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }

    }


    /**
     * 查询运营商授权情况 v3.0.0
     *  倒计时读秒过程中不断地请求检测
     *  返回状态 query_result
     *      pass 通过
     *      unknown 未知
     *
     */
    public function action_MNOQuery()
    {
        $ci_step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        if (isset($ci_step['mno']) && $ci_step['mno'] == Model_CreditInfo_Step::COMPLETE) {
            $array['query_result'] = 'pass';
        } else {
            $array['query_result'] = 'unknown';
        }

        $response_array = [];
        $response_array['name'] = isset(App::$_user['name']) ? App::$_user['name'] : '';
        $response_array['mobile'] = isset(App::$_user['mobile']) ? App::$_user['mobile'] : '';
        $response_array['query_result'] = $array['query_result'];
        $this->response_json($response_array, "1000", "查询成功");
    }


    /**
     * 信用卡账单抓取(跳出式)
     */
    public function action_CreditCardBillRecord()
    {
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        if (isset($this->step[Model_CreditInfo_Step::CREDITCARDBILL]) && (int)$this->step[Model_CreditInfo_Step::CREDITCARDBILL] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response_json([], "4002", "记录已存在");
        }

        $mno_provider = Model_Defier_Relation::PROVIDER_RONG360;//运营商通道
        //信用卡账单抓取暂时不分配渠道
//        if($df = Model::factory('Defier_Relation')->get_one_by_user_id(App::$_token['user_id'])){
//            $mno_provider = Lib::factory('Defier_MNO')->sort($df['provider']);
//        }else{
//            //分配
//            $provider = Lib::factory('Defier_Result')->sort(App::$_token['user_id']);//挑战渠道分配
//            $mno_provider = Lib::factory('Defier_MNO')->sort($provider);
//            Model::factory('Defier_Relation')->create(App::$_token['user_id'],$provider);//挑战渠道绑定
//        }

        $rs = Model::factory('CreditCardBill_QueryRecord')->get_by_array(['user_id' => App::$_token['user_id']], 11);
        if (count($rs) >= 10) {
            $this->response_json([], "4006", "重试次数已超上限");
        }

        $res = Lib::factory('CreditCardBill_QueryRecord')->apply_by_user_id(App::$_token['user_id'], $mno_provider);
        if (is_array($res)) {
            if (isset($res['html']) && $res['html']) {
                $this->response_json([
                    'jump' => (string)Model_CreditCardBill_QueryRecord::JUMP_HTML,
                    'html' => $res['html'],
                ], '1000', '申请已生成');
            } elseif (isset($res['url']) && $res['url']) {
                $this->response_json([
                    'jump' => (string)Model_CreditCardBill_QueryRecord::JUMP_URL,
                    'url' => $res['url'],
                ], '1000', '申请已生成');

            } else {
                $this->response_json(['jump' => (string)Model_CreditCardBill_QueryRecord::NO_JUMP], '1000', '申请关闭');
            }
        } else {
            $this->response_json([], '4000', '申请失败,请联系客服! 001');
        }

    }

    /**
     * 查询授信情况 v2.4.0
     *  用于基础授信最后一步的倒计时读秒过程中不断地请求检测
     *  返回的集中状态 query_result
     *      pass 通过
     *      processing 处理中
     *      back 退回
     *      failed 失败
     *      reject 拒绝
     */
    public function action_CreditQuery()
    {

        $array = [];
        $ca = Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->get();//CACHE GET
        if ($ca) {
            $array = $ca;
            //USER_CACHE ----[END]
        } else {
            $user = $this->model['user']->get_one(App::$_token['user_id']);
            $array['user_id'] = $user['id'];
            $array['name'] = $user['name'];
            $array['mobile'] = $user['mobile'];
            $array['status'] = $user['status'];
            $array['credit_auth'] = $user['credit_auth'];
            Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->set($array);//CACHE ----- [WRITE]
            $array['_db_read'] = "1";
        }
        if ($array['status'] == Model_User::STATUS_NORMAL) {
            if (in_array($array['credit_auth'], [
                Model_User::CREDIT_AUTH_BASE_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_READY,
                Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                Model_User::CREDIT_AUTH_STATUS_CHECKING,
                Model_User::CREDIT_AUTH_STATUS_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_FAILED,
                Model_User::CREDIT_AUTH_STATUS_BACK,
            ])) {
                $array['query_result'] = 'pass';
            } elseif (in_array($array['credit_auth'], [
                Model_User::CREDIT_AUTH_BASE_READY, Model_User::CREDIT_AUTH_BASE_ONSUBMIT,
                Model_User::CREDIT_AUTH_BASE_SUBMITED, Model_User::CREDIT_AUTH_BASE_CHECKING,
            ])) {
                $array['query_result'] = 'processing';
            } elseif (in_array($array['credit_auth'],
                [Model_User::CREDIT_AUTH_BASE_BACK, Model_User::CREDIT_AUTH_BASE_FAILED])) {
                $array['query_result'] = 'failed';
            }
        } else {
            $array['query_result'] = 'reject';
        }
        $response_array = [];
        $response_array['name'] = $array['name'];
        $response_array['mobile'] = $array['mobile'];
        $response_array['query_result'] = $array['query_result'];
        $this->response_json($response_array, "1000", "查询成功");
    }


    /**
     * 新授信列表 v3.0.0
     *
     */
    public function action_List()
    {


        $title = '授信列表';
        $summary = '';
        $top_button = [
            'hidden' => '1',
            'enable' => '0',
            'title' => '下一步立即借款',
            'click' => 'app://app.timecash/AppHome/Index',
        ];
        $foot_button = [
            'hidden' => '1',
            'enable' => '0',
            'title' => '下一步立即借款',
            'click' => 'app://app.timecash/AppHome/Index',
        ];
        $button_enable = true;

        $credit_list = Lib::factory('Credit_List')->app_id(App::$id)->credit_list(App::$_token['user_id']);
        if (!is_array($credit_list)) {
            $this->response_json(['user_id' => App::$_token['user_id']], "4000", "用户授数据异常");
        }
        //遍历每一项授信,如发现未完成或者未通过项目,将按钮置亮,按钮
        foreach ($credit_list as $k => $ci) {
            if (isset($ci['status']) && ((int)$ci['status'] == Model_Credit_List::STATUS_INIT || (int)$ci['status'] == Model_Credit_List::STATUS_RETRY)) {
                /*              $foot_button['enable'] = '1';
                                $foot_button['title'] = '继续完成授信';
                                $foot_button['click'] = $ci['url'];
                                break;*/
                $credit_list[$k]['url'] = '';
                $button_enable = false;
            }
        }

        if (
            //empty(App::$_user['identity_code']) ||
            //(int)App::$_user['validated_identity']!=(int)Model_User::IDENTITY_STATUS_VERIFIED ||
            (int)App::$_user['allow_login'] !== (int)Model_User::ALLOW_LOGIN__ALLOWED ||
            in_array(App::$_user['status'], [
                Model_User::STATUS_DENY, Model_User::STATUS_LOANDENY, Model_User::STATUS_DENYFOREVER,
                Model_User::STATUS_DENYTEMP, Model_User::STATUS_DELETED,
            ])
        ) {

            $button_enable = false;
            //用户被拒绝借款, 取消其他未完成的授信链接,不允许提交
            foreach ($credit_list as $k => $v) {
                if (isset($v['status']) && ((int)$v['status'] == Model_Credit_List::STATUS_INIT || (int)$v['status'] == Model_Credit_List::STATUS_RETRY)) {
                    $credit_list[$k]['url'] = '';
                }
            }
            $foot_button['enable'] = '0';
            $foot_button['title'] = '资料不符，无法继续提交';
            $foot_button['click'] = 'app://app.timecash/AppHome/Index';
        }


        $order_rate_html = Lib::factory('Helper_OrderFeeRate')->html(Model_Order::TYPE_FAST);
        $foot_html = $order_rate_html ? $order_rate_html : '';

        $response_array = [
            'title' => $title,
            'summary' => $summary,
            'credit_list' => $credit_list,
            'foot_html' => $foot_html,
            'top_button' => $top_button,
            'foot_button' => $foot_button,
        ];

        $this->response_json($response_array, "1000", "授信列表");

    }
}
