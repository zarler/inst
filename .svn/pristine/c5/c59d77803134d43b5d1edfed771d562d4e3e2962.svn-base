<?php
defined('SYSPATH') or die('No direct script access.');

/**
 * Created by PhpStorm.
 * Permission: majin
 * Date: 16/1/4
 * Time: 下午1:53
 */
class Model_Order extends Model_Database
{

    //订单类型
    const TYPE_INST = 6;                        //分期借款

    //订单状态
    const STATUS_INIT = 0;                      //订单初始
    const STATUS_READY = 1;                     //待审
    const STATUS_ACCEPT = 2;                    //已审批
    const STATUS_REJECT = 3;                    //拒绝
    const STATUS_UNPAID = 4;                    //待付款
    const STATUS_PAID = 5;                      //已付款,待还
    const STATUS_ACT_REPAY = 6;                 //主动还款
    const STATUS_DEDUCT_SUCCESS = 8;            //扣款成功
    const STATUS_DEDUCT_FAILED = 9;             //扣款失败
    const STATUS_CLOSED = 10;                   //扣款失败

    const STATUS_DEDUCT_RUNNING = 11;           //扣款处理中
    const STATUS_PAYMENT_RUNNING = 12;          //付款处理中
    const STATUS_PAYMENT_FAILED = 13;           //付款失败
    const STATUS_PAYMENT_SUCCESS = 14;          //付款成功

    const STATUS_OVERDUE = 50;                  //逾期
    const STATUS_OVERDUE_REPAY_SUCCESS = 51;    //逾期催缴成功
    const STATUS_OVERDUE_REPAY_FAILED = 52;     //逾期催缴失败
    const STATUS_OVERDUE_ACT_REPAY = 56;        //逾期主动还款
    const STATUS_OVERDUE_DEDUCT_FAILED = 59;    //逾期主动还款失败
    const STATUS_OVERDUE_DEDUCT_SUCCESS = 58;   //逾期扣款成功
    const STATUS_OVERDUE_DEDUCT_RUNNING = 511;  //逾期扣款处理中

    const STATUS_REPAY_SUCCESS = 61;            //订单还款成功
    const STATUS_ADVANCE_REPAY_SUCCESS = 71;    //提前还款成功
    const STATUS_PENDING_VERIFICATION = 15;     //需进一步审核

    const STATUS_BULL_DEDUCT = 30;                      //扫扣
    const STATUS_BULL_DEDUCT_RUNNING = 31;              //扫扣处理中
    const STATUS_OVERDUE_BULL_DEDUCT = 530;             //逾期扫扣
    const STATUS_OVERDUE_BULL_DEDUCT_RUNNING = 531;     //逾期扫扣处理中


    //状态组,用于简化DB WHERE 增强一致性
    const STATUSGROUP_PAID = [  //待还款中的正常订单
        self::STATUS_PAID,
        self::STATUS_ACT_REPAY,
        self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_FAILED,
        self::STATUS_DEDUCT_RUNNING,
        self::STATUS_PAYMENT_SUCCESS,
    ];
    const STATUSGROUP_OVERDUE = [   //逾期中的订单
        self::STATUS_OVERDUE,
        self::STATUS_OVERDUE_REPAY_FAILED,
        self::STATUS_OVERDUE_ACT_REPAY,
        self::STATUS_OVERDUE_DEDUCT_FAILED,
        self::STATUS_OVERDUE_DEDUCT_SUCCESS,
        self::STATUS_OVERDUE_DEDUCT_RUNNING,
        self::STATUS_OVERDUE_BULL_DEDUCT,
        self::STATUS_OVERDUE_BULL_DEDUCT_RUNNING,
    ];

    const STATUSGROUP_SUCCESSED = [ //成功完成的订单
        self::STATUS_ADVANCE_REPAY_SUCCESS,
        self::STATUS_REPAY_SUCCESS,
        self::STATUS_OVERDUE_REPAY_SUCCESS,
    ];

    const STATUSGROUP_UNFINISHED = [ //未完成
        self::STATUS_INIT,
        self::STATUS_READY,
        self::STATUS_ACCEPT,
        self::STATUS_UNPAID,
        self::STATUS_PAID,
        self::STATUS_ACT_REPAY,
        self::STATUS_DEDUCT_FAILED,
        self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_RUNNING,
        self::STATUS_PAYMENT_RUNNING,
        self::STATUS_PAYMENT_FAILED,
        self::STATUS_PAYMENT_SUCCESS,
        self::STATUS_OVERDUE,
        self::STATUS_OVERDUE_REPAY_FAILED,
        self::STATUS_OVERDUE_ACT_REPAY,
        self::STATUS_OVERDUE_DEDUCT_FAILED,
        self::STATUS_OVERDUE_DEDUCT_SUCCESS,
        self::STATUS_OVERDUE_DEDUCT_RUNNING,
        self::STATUS_OVERDUE_BULL_DEDUCT,
        self::STATUS_OVERDUE_BULL_DEDUCT_RUNNING,
    ];

    const STATUSGROUP_NEEDREPAY = [ //需要还款
        self::STATUS_PAID,
        self::STATUS_ACT_REPAY,
        self::STATUS_DEDUCT_FAILED,
        self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_RUNNING,
        self::STATUS_PAYMENT_RUNNING,
        self::STATUS_PAYMENT_FAILED,
        self::STATUS_PAYMENT_SUCCESS,
        self::STATUS_OVERDUE,
        self::STATUS_OVERDUE_REPAY_FAILED,
        self::STATUS_OVERDUE_ACT_REPAY,
        self::STATUS_OVERDUE_DEDUCT_FAILED,
        self::STATUS_OVERDUE_DEDUCT_SUCCESS,
        self::STATUS_OVERDUE_DEDUCT_RUNNING,
        self::STATUS_OVERDUE_BULL_DEDUCT,
        self::STATUS_OVERDUE_BULL_DEDUCT_RUNNING,
    ];

    const STATUSGROUP_DEDUCTING = [  //扣款处理
        self::STATUS_ACT_REPAY,
        self::STATUS_DEDUCT_FAILED,
        self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_RUNNING,
        self::STATUS_OVERDUE_ACT_REPAY,
        self::STATUS_OVERDUE_DEDUCT_FAILED,
        self::STATUS_OVERDUE_DEDUCT_SUCCESS,
        self::STATUS_OVERDUE_DEDUCT_RUNNING,
        self::STATUS_OVERDUE_REPAY_FAILED,

    ];

    const STATUSGROUP_PAY = [   //付款中
        self::STATUS_PAYMENT_RUNNING,
        self::STATUS_PAYMENT_FAILED,
        self::STATUS_PAYMENT_SUCCESS,
    ];

    const STATUSGROUP_PAY_SUCCESS__NOT_IN = [  //成功打款之外的状态，用于NOT IN(0,1,2,3,4,10,12,13,15)过滤出成功打款的订单
        self::STATUS_INIT,                  //0
        self::STATUS_READY,                 //1
        self::STATUS_ACCEPT,                //2
        self::STATUS_REJECT,                //3
        self::STATUS_UNPAID,                //4
        self::STATUS_CLOSED,                //10
        self::STATUS_PAYMENT_RUNNING,       //12
        self::STATUS_PAYMENT_FAILED,        //13
        self::STATUS_PENDING_VERIFICATION,  //15
    ];

    const ACTIVE_REPAY_DAY_MAX = 1;
    const OVERDUE_REPAY_DAY = 500;

    //记录锁,防止重复关键性操作
    //表中 pre_auth_lock; repay_lock pay_lock
    const UNLOCK = 1;
    const LOCK = 2;

    public static $status_array = [
        self::STATUS_INIT => '订单初始',
        self::STATUS_READY => '待审',
        self::STATUS_ACCEPT => '已审',
        self::STATUS_REJECT => '拒绝',
        self::STATUS_UNPAID => '待付',
        self::STATUS_PAID => '已付(待还)',
        self::STATUS_CLOSED => '强制关闭',
        self::STATUS_PENDING_VERIFICATION => '需进一步审核',

        self::STATUS_ACT_REPAY => '主动还款',
        self::STATUS_DEDUCT_SUCCESS => '扣款成功',
        self::STATUS_DEDUCT_FAILED => '扣款失败',
        self::STATUS_DEDUCT_RUNNING => '扣款处理中',

        self::STATUS_PAYMENT_FAILED => '付款失败',
        self::STATUS_PAYMENT_SUCCESS => '付款成功',
        self::STATUS_PAYMENT_RUNNING => '付款处理中',

        self::STATUS_OVERDUE => '逾期',
        self::STATUS_OVERDUE_REPAY_SUCCESS => '逾期催缴成功',
        self::STATUS_OVERDUE_REPAY_FAILED => '逾期催缴失败',
        self::STATUS_OVERDUE_ACT_REPAY => '逾期主动还款',
        self::STATUS_OVERDUE_DEDUCT_FAILED => '逾期扣款失败',
        self::STATUS_OVERDUE_DEDUCT_SUCCESS => '逾期扣款成功',
        self::STATUS_OVERDUE_DEDUCT_RUNNING => '逾期扣款处理中',

        self::STATUS_REPAY_SUCCESS => '订单还款成功',
        self::STATUS_ADVANCE_REPAY_SUCCESS => '提前还款成功',

    ];

    public $type_array = [
        self::TYPE_INST => '分期贷款',
    ];


    //单条数据
    public function get_one($id)
    {
        return DB::select()->from('order')->where('id', '=', $id)->execute()->current();
    }

    //单条数据
    public function get_one_by_order_no($order_no)
    {
        return DB::select()->from('order')->where('order_no', '=', $order_no)->execute()->current();
    }

    //取最后一个订单
    public function get_one_by_user($user_id, $type)
    {
        if ($user_id < 1) {
            return false;
        }
        if ((int)$type > 0) {
            return DB::select()->from('order')->where('user_id', '=', $user_id)->and_where('type', '=', $type)->order_by('id', 'DESC')->limit(1)->execute()->current();
        }

        return DB::select()->from('order')->where('user_id', '=', $user_id)->order_by('id', 'DESC')->limit(1)->execute()->current();
    }

    //单条数据
    public function get_one_by_user_id($user_id, $id)
    {
        if ($user_id < 1 || $id < 1) {
            return false;
        }

        return DB::select()->from('order')->where('id', '=', $id)->and_where('user_id', '=', $user_id)->execute()->current();
    }


    /** 用户当前订单(优选选择未还款成功的订单)
     * @param $user_id
     * @return bool | array
     */
    public function current_by_user_id($user_id)
    {
        if ($user_id < 1) {
            return false;
        }
        //发现逾期或者是未完订单
        $rs1 = DB::select_array(self::ALLOW_SHOW_COLUMNS)->from('order')->where('user_id', '=', (int)$user_id)->and_where('status', 'IN', array_merge(self::STATUSGROUP_UNFINISHED)
        /*array(
        self::STATUS_PAYMENT_SUCCESS,
        self::STATUS_PAID,
        self::STATUS_ACT_REPAY,self::STATUS_ACT_REPAY_FAILED,
        self::STATUS_DEDUCT_RUNNING, self::STATUS_DEDUCT_FAILED, self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_PAYMENT_RUNNING,self::STATUS_PAYMENT_SUCCESS,self::STATUS_PAYMENT_FAILED,
        self::STATUS_PRE_AUTHORIZATION_DEDUCT,self::STATUS_PRE_AUTHORIZATION_RUNNING,self::STATUS_PRE_AUTHORIZATION_DEDUCT_FAILED,self::STATUS_PRE_AUTHORIZATION_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_RUNNING2,self::STATUS_DEDUCT_SUCCESS2,self::STATUS_DEDUCT_FAILED2,
        self::STATUS_OVERDUE,self::STATUS_OVERDUE_REPAYMENT_FAILED,
    )*/
        )->order_by('expire_time', 'ASC')->execute()->as_array();

        if ($rs1) {
            if (count($rs1) > 1) {
                foreach ($rs1 as $r) {
                    if ((string)$r['status'] != (string)self::STATUS_OVERDUE_REPAYMENT_SUCCESS) {
                        return $r;
                    }
                }

                return $r;

            } else {
                return $rs1[0];
            }
        }
        //没有未完成,取最新订单
        $rs2 = DB::select_array(self::ALLOW_SHOW_COLUMNS)->from('order')->where('user_id', '=', (int)$user_id)->order_by('id', 'DESC')->limit(1)->execute()->current();

        return $rs2;

    }

    /** 历史借款
     * @param $user_id
     * @param int $last_id
     * @param int $pagesize
     * @return bool | array
     */
    public function history_by_user_id($user_id, $last_id = 0, $pagesize = self::PAGESIZE)
    {
        if ($user_id < 1) {
            return false;
        }
        $query = DB::select_array(self::ALLOW_SHOW_COLUMNS)->from('order')
            ->where('user_id', '=', (int)$user_id);
        if ($last_id > 0) {
            $query->and_where('id', '<', $last_id);
        }
        $rs1 = $query->and_where('status', 'IN', array_merge(self::STATUSGROUP_PAID, self::STATUSGROUP_OVERDUE, self::STATUSGROUP_SUCCESSED)
        /*array(
       //self::STATUS_REJECT,//2016-6-29 临时补录,产品要求: 被拒绝借款的订单出现后不可以再借.
        self::STATUS_PAYMENT_SUCCESS,
        self::STATUS_PAID,
        self::STATUS_ACT_REPAY,
        self::STATUS_ACT_REPAY_FAILED,
        self::STATUS_DEDUCT_RUNNING,
        self::STATUS_DEDUCT_FAILED,
        self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_RUNNING2,
        self::STATUS_DEDUCT_SUCCESS2,
        self::STATUS_DEDUCT_FAILED2,
        self::STATUS_PRE_AUTHORIZATION_DEDUCT,
        self::STATUS_PRE_AUTHORIZATION_RUNNING,
        self::STATUS_PRE_AUTHORIZATION_DEDUCT_FAILED,
        self::STATUS_PRE_AUTHORIZATION_DEDUCT_SUCCESS,
        self::STATUS_ORDER_REPAYMENT_SUCCESS,
        self::STATUS_OVERDUE,
        self::STATUS_OVERDUE_REPAYMENT_SUCCESS,
        self::STATUS_OVERDUE_REPAYMENT_FAILED,
    )*/
        )->order_by('id', 'DESC')->limit($pagesize)->execute()->as_array();

        return $rs1;
    }

    /** 是否存在未完成
     * @param $user_id
     * @return bool
     */
    public function has_unfinished($user_id)
    {
        $rs1 = DB::select('id')->from('order')->where('user_id', '=', (int)$user_id)->and_where('status', 'IN', self::STATUSGROUP_UNFINISHED
        /*array(
        self::STATUS_INIT,
        self::STATUS_READY,
        self::STATUS_ACCEPT,
        self::STATUS_PENDING_VERIFICATION,
        self::STATUS_REJECT,//2016-6-29 临时补录,产品要求: 被拒绝借款的订单出现后不可以再借.
        self::STATUS_UNPAID,
        self::STATUS_PAID,
        self::STATUS_ACT_REPAY, self::STATUS_ACT_REPAY_FAILED,
        self::STATUS_DEDUCT_RUNNING, self::STATUS_DEDUCT_FAILED, self::STATUS_DEDUCT_SUCCESS,
        self::STATUS_DEDUCT_RUNNING2, self::STATUS_DEDUCT_SUCCESS2, self::STATUS_DEDUCT_FAILED2,
        self::STATUS_PAYMENT_RUNNING,self::STATUS_PAYMENT_SUCCESS,self::STATUS_PAYMENT_FAILED,
        self::STATUS_PRE_AUTHORIZATION_DEDUCT,self::STATUS_PRE_AUTHORIZATION_DEDUCT,self::STATUS_PRE_AUTHORIZATION_RUNNING,self::STATUS_PRE_AUTHORIZATION_DEDUCT_FAILED,
        self::STATUS_OVERDUE,self::STATUS_OVERDUE_REPAYMENT_FAILED,
    )*/
        )->limit(1)->execute()->current();
        if ($rs1) {
            return true;
        }

        return false;
    }

    /** 是否存在逾期订单
     * @param $user_id
     * @return bool
     */
    public function has_overdue($user_id)
    {
        $rs1 = DB::select('id')
            ->from('order')
            ->where('user_id', '=', (int)$user_id)
            ->and_where('status', 'IN', self::STATUSGROUP_OVERDUE)
            ->limit(1)
            ->execute()->current();
        if ($rs1) {
            return true;
        }

        return false;
    }

    /** 获取需要还款记录
     * @param $user_id
     * @return mixed
     */
    public function get_need_repay($user_id)
    {
        $rs1 = DB::select_array()->from('order')->where('user_id', '=', (int)$user_id)->and_where('status', 'IN', self::STATUSGROUP_NEEDREPAY
        )->order_by('expire_time', 'DESC')->execute()->as_array();

        return $rs1;
    }

    /** 获取未完成记录
     * @param $user_id
     * @return mixed
     */
    public function get_unfinished($user_id)
    {
        $rs1 = DB::select_array(self::ALLOW_SHOW_COLUMNS)->from('order')->where('user_id', '=', (int)$user_id)->and_where('status', 'IN', self::STATUSGROUP_UNFINISHED
        /*array(
           self::STATUS_INIT,
            self::STATUS_READY,
            self::STATUS_ACCEPT,
            self::STATUS_PENDING_VERIFICATION,
            self::STATUS_REJECT,//2016-6-29 临时补录,产品要求: 被拒绝借款的订单出现后不可以再借.
            self::STATUS_UNPAID,
            self::STATUS_PAID,
            self::STATUS_ACT_REPAY, self::STATUS_ACT_REPAY_FAILED,
            self::STATUS_DEDUCT_RUNNING, self::STATUS_DEDUCT_FAILED, self::STATUS_DEDUCT_SUCCESS,
            self::STATUS_DEDUCT_RUNNING2, self::STATUS_DEDUCT_SUCCESS2, self::STATUS_DEDUCT_FAILED2,
            self::STATUS_PAYMENT_RUNNING,self::STATUS_PAYMENT_SUCCESS,self::STATUS_PAYMENT_FAILED,
            self::STATUS_PRE_AUTHORIZATION_DEDUCT,self::STATUS_PRE_AUTHORIZATION_DEDUCT,self::STATUS_PRE_AUTHORIZATION_RUNNING,self::STATUS_PRE_AUTHORIZATION_DEDUCT_FAILED,
            self::STATUS_OVERDUE,self::STATUS_OVERDUE_REPAYMENT_FAILED,
        )*/
        )->order_by('expire_time', 'DESC')->execute()->as_array();

        return $rs1;
    }

    public function get_one_unfinished($user_id)
    {
        $rs1 = DB::select_array(self::ALLOW_SHOW_COLUMNS)
            ->from('order')
            ->where('user_id', '=', (int)$user_id)
            ->and_where('status', 'IN', self::STATUSGROUP_UNFINISHED)
            ->order_by('expire_time', 'DESC')
            ->limit(1)
            ->execute()
            ->current();

        return $rs1;
    }

    /** 主动还款登记 v1
     * @param $user_id
     * @param $id
     * @return bool
     */
    public function repay($user_id, $id)
    {
        return $this->active_repay($user_id, $id);
    }


    /** 未逾期订单主动还款
     * @param $user_id
     * @param $id
     * @return bool|object
     */
    public function active_repay($user_id, $id, $bill_ids)
    {
        if ($user_id < 1 || $id < 1 || !is_array($bill_ids)) {
            return false;
        }

        if (DB::update('order')
            ->set(['status' => self::STATUS_ACT_REPAY, 'dedcut_time' => time(), 'dedcut_failed_count' => DB::expr('active_repayment_count + 1')])
            ->where('id', '=', $id)
            ->and_where('user_id', '=', $user_id)
            ->and_where('status', 'IN', [self::STATUS_PAID])
            ->execute()
        ) {
            $bill = Model::factory('Bill');
            return $bill->active_repay($user_id, $bill_ids);
        }

        return false;
    }

    /** 逾期订单主动还款 v2
     * @param $user_id
     * @param $id
     * @return bool|object
     */
    public function overdue_active_repay($user_id, $id, $bill_ids)
    {
        if ($user_id < 1 || $id < 1 || !is_array($bill_ids)) {
            return false;
        }
        $rs = DB::select()->from('order')
            ->where('id', '=', $id)
            ->and_where('user_id', '=', $user_id)
            ->and_where('status', 'IN', [self::STATUS_OVERDUE])
            ->execute()
            ->current();
        $time = time();

        $bill = Model::factory('Bill');
        if (isset($rs['id']) && $time <= ($rs['expire_time'] + Model_Order::OVERDUE_REPAY_DAY * 86400)) {
            if (date('Y-m-d', $rs['active_repayment_time']) == date('Y-m-d') && $rs['active_repayment_count'] < Model_Order::ACTIVE_REPAY_DAY_MAX) {
                if(DB::update('order')
                        ->set(['status' => self::STATUS_OVERDUE_ACT_REPAY, 'dedcut_time' => $time, 'dedcut_failed_count' => DB::expr('dedcut_failed_count + 1')])
                        ->where('id', '=', $id)
                        ->and_where('user_id', '=', $user_id)
                        ->and_where('status', 'IN', [self::STATUS_OVERDUE])
                        ->execute()){
                    return $bill->active_repay($user_id, $bill_ids);

                }
            } elseif (date('Y-m-d', $rs['active_repayment_time']) != date('Y-m-d')) {
                if(DB::update('order')
                        ->set(['status' => self::STATUS_OVERDUE_ACT_REPAY, 'dedcut_time' => $time, 'dedcut_failed_count' => 1])
                        ->where('id', '=', $id)
                        ->and_where('user_id', '=', $user_id)
                        ->and_where('status', 'IN', [self::STATUS_OVERDUE])
                        ->execute()){
                    return $bill->active_repay($user_id, $bill_ids);

                }
            }
        }

        return false;
    }


    /** 生成订单号 (时间戳+8位随机大小写数字)
     * @return string
     */
    public function make_no()
    {
        return 'TC' . time() . Text::random('alpha', 3) . Text::random('alnum', 5);
    }

    /** 创建订单
     * @param $user_id
     * @param array $array
     * @return bool
     */
    public function create($user_id, $array = [])
    {
        if ($user_id < 1 || !isset($array['order_no']) ||
            !isset($array['loan_amount']) ||
            !isset($array['month']) ||
            !isset($array['type']) ||
            !isset($array['bankcard_id']) ||
            !isset($array['repay_amount']) ||
            !isset($array['charge'])
        ) {
            return false;
        }

        $data = [
            'order_no' => $array['order_no'] ? $array['order_no'] : $this->make_no(),
            'user_id' => (int)$user_id,
            'bankcard_id' => $array['bankcard_id'] ? (int)$array['bankcard_id'] : 0,
            'loan_amount' => round($array['loan_amount'], 2),
            'repay_amount' => round($array['repay_amount'], 2),
            'status' => isset($array['status']) ? (int)$array['status'] : Model_Order::STATUS_INIT,
            'type' => (int)$array['type'],
            'charge' => round($array['charge'], 2),
            'month' => (int)$array['month'],
            'name' => $array['name'],
            'mobile' => $array['mobile'],
            'identity_code' => $array['identity_code'],
            'bankcard_no' => $array['bankcard_no'] ? $array['bankcard_no'] : '',
            'create_time' => time(),
        ];

        list($new_id, $row) = DB::insert('order', array_keys($data))
            ->values(array_values($data))
            ->execute();

        return $new_id;

    }

    /** 是否首次借款
     * @param $user_id
     * @param array $status
     * @return bool
     */
    public function first_by_user_id($user_id)
    {
        $rs = DB::select('id')
            ->from('order')
            ->where('user_id', '=', (int)$user_id)->and_where('status', 'NOT IN', self::STATUSGROUP_PAY_SUCCESS__NOT_IN)
            ->limit(1)->execute()->current();
        if ($rs) {
            return false;
        }

        return true;
    }



    /**
     * @param int $order_id
     * @param array $array
     * @return bool
     */
    public function update($order_id = 0, $array = [])
    {
        if ($order_id < 1 || !$array) {
            return false;
        }
        unset($array['id']);

        $dbc = DB::update('order')->set($array)->where('id', '=', intval($order_id));
        Model::factory('Order_ModifyLog')->log($order_id, ['method' => 'update', 'data' => $dbc->compile()]);
        $affected_rows = $dbc->execute();
        return $affected_rows !== null;
    }


    /**
     *
     * 根据传入的 order_id与array 修改订单
     * @param $order_id
     * @param $array
     * @return bool
     */
    public function update_by_id($order_id, $array)
    {

        if ($order_id < 1 || empty($array)) {
            return false;
        }

        $update = [];

        //储蓄卡ID
        if (isset($array['bankcard_id']) && $array['bankcard_id'] > 0) {
            $update['bankcard_id'] = $array['bankcard_id'];
        }
        //信用卡ID
        if (isset($array['creditcard_id']) && $array['creditcard_id'] > 0) {
            $update['creditcard_id'] = $array['creditcard_id'];
        }

        if (empty($update)) {
            return false;
        }

        DB::update('order')->set($update)->where('id', '=', $order_id)->execute();

        return true;
    }


    //查询最近一条还款记录
    public function last_repayment_success($user_id)
    {
        return DB::select()
            ->from('order')
            ->where('user_id', '=', (int)$user_id)->and_where('status', 'IN', self::STATUSGROUP_SUCCESSED)
            ->order_by('id', 'DESC')
            ->limit(1)
            ->execute()
            ->current();
    }


    //未完成订单总金额
    public function unfinished_amount($user_id)
    {
        $rs = DB::select([DB::expr('SUM(loan_amount)'), 'amount'])
            ->from('order')
            ->where('user_id', '=', intval($user_id))
            ->and_where('status', 'IN', self::STATUSGROUP_UNFINISHED)
            ->execute()
            ->current();

        return isset($rs['amount']) ? $rs['amount'] : 0;
    }


    /** 格式化内容
     * @param $array
     * @return array|bool
     */
    public function format($array)
    {
        return $array ? [
            'id' => isset($array['id']) && $array['id'] > 0 ? $array['id'] : 0,
            'type_name' => isset($array['type']) && isset($this->type_array[$array['type']]) ? $this->type_array[$array['type']] : '',
            'user_id' => isset($array['user_id']) && $array['user_id'] > 0 ? $array['user_id'] : 0,
            'loan_amount' => isset($array['loan_amount']) && $array['loan_amount'] > 0 ? $array['loan_amount'] : 0,
            'repay_amount' => isset($array['repay_amount']) && $array['repay_amount'] > 0 ? $array['repay_amount'] : 0,
            'repaid_amount' => isset($array['repaid_amount']) && $array['repaid_amount'] > 0 ? $array['repaid_amount'] : 0,
            'status' => isset($array['status']) && isset(self::$status_array[$array['status']]) ? self::$status_array[$array['status']] : '',
            'status_message' => isset($array['status_message']) ? $array['status_message'] : '',
            'charge' => isset($array['charge']) && $array['charge'] > 0 ? $array['charge'] : 0,
            'month' => isset($array['month']) && $array['month'] > 0 ? $array['month'] : 0,
            'start_time' => isset($array['start_time']) && $array['start_time'] > 0 ? date('Y-m-d', $array['start_time']) : '',
            'expire_time' => isset($array['expire_time']) && $array['expire_time'] > 0 ? date('Y-m-d', $array['expire_time'] - 1) : '', //字段记录的是过期时间,过期时间为次日凌晨0点0分,所以需要-1秒才能算出还款日的最后时间
            'start_date' => isset($array['start_time']) && $array['start_time'] > 0 ? date('Y-m-d', $array['start_time']) : '',
            'end_date' => isset($array['expire_time']) && $array['expire_time'] > 0 ? date('Y-m-d', $array['expire_time'] - 1) : '', //到期日期
            'mobile' => isset($array['mobile']) ? $array['mobile'] : '',
            'name' => isset($array['name']) ? $array['name'] : '',
            'bankcard_id' => isset($array['bankcard_id']) ? $array['bankcard_id'] : 0,
            'bankcard_no' => isset($array['bankcard_no']) ? Lib::factory('String')->strShieldMiddle($array['bankcard_no'], 4, 4) : '',
            //'active_repayment_time'=>isset($array['active_repayment_time']) ? (int)$array['active_repayment_time'] : 0 ,
            //'active_repayment_count'=>isset($array['active_repayment_count']) ? (int)$array['active_repayment_count'] : 0 ,
        ] : false;

    }


}