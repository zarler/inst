<?php
defined('SYSPATH') or die('No direct script access.');
/**
 * Created by PhpStorm.
 * User: majin
 * Date: 16/4/26
 * Time: 下午9:32
 *
 * 3端API核心类
 */

define('API_LOG',TRUE);

class ApiCore extends Controller{

    protected $_env = [];
    protected $_post = NULL;
    protected $_get = NULL;
    protected $_request = NULL;
    protected $_json_string = NULL;
    protected $_data = NULL;

    protected $service_ver = '1.0';      //服务端版本
    protected $service_trid = NULL;      //服务端流水号

    protected $token = NULL;
    protected $user = NULL;              //用户数组
    protected $user_id = 0;


    protected $_check_token = TRUE;      //是否检查TOKEN : controller有不需要验证token需求的在继承后设置为FALSE,在需要验证的action里面调用$this->check_token();
    protected $_check_user = TRUE;       //_check_token = TRUE 才会激活该项

    protected $log = NULL;              //日志
    protected $log_token = NULL;
    protected $model = NULL;

    public function before() {
        $this->_env = Kohana::$config->load('env');//环境配置

        if(defined('API_LOG')) {
            $this->log = new MyLog(APPPATH . 'logs/api3/');
            $this->log_token = uniqid() . Text::random('alnum', 8);
        }
        $this->_data = array();
        $this->service_trid = $this->trid();
        parent::before(); // TODO: Change the autogenerated stub
        $this->_get = $this->request->query();
        $this->_post = $this->request->post();
        $this->_request = $_REQUEST;

        if(isset($_REQUEST['json'])){
            $this->_json_string = $_REQUEST['json'];
        }else{
            $input = file_get_contents('php://input');
            if($input){
                $this->_json_string = $input;
            }
        }

        if($this->_json_string){
            if(!Tool::factory('Array')->is_json($this->_json_string)){
                $this->response_json(array(),"2000",'基本验证失败');
            }
            $this->_data = json_decode($this->_json_string ,TRUE);
            if(!is_array($this->_data)){
                $this->response_json(array(),"2000",'基本验证失败');
            }
        }else{
            $this->response_json(array(),"2000",'基本验证失败');
        }

        if(
            !(isset($this->_data['app']['app_id']) &&
            isset($this->_data['app']['ver']) &&
            isset($this->_data['app']['trid']) &&
            isset($this->_data['app']['unique_id']) &&
            isset($this->_data['app']['time']) &&
            isset($this->_data['app']['sign']))
        ){
            $this->response_json(array(),"2001",'缺少参数');
        }

        if(defined('API_LOG')){
            //echo 'log-write';
            $remote_ip =  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
            $http_x_forwarded_for = isset($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR'] ? $_SERVER['HTTP_X_FORWARDED_FOR'] : '';
            $this->log->write(array(array('body'=>json_encode($this->_data),'time'=>time())),"time [".$this->_data['app']['app_id']."] ".($remote_ip? "[remote_ip:".$remote_ip."]" : "" )."".($http_x_forwarded_for? "[http_x_forwarded_for:".$http_x_forwarded_for."]" : "" )." [hash:".$this->log_token."] [uri:".Request::current()->uri()."] -- RESQUEST:\r\nbody\r\n");
            //file_put_contents('apicore.txt',date("Y-m-d H:i:s")."\tapp_id:".App::$id."\r\n".json_encode($this->_data)."\r\n",FILE_APPEND);
        }


        App::init($this->_data['app']);//初始化APP端的信息


        if(!Valid::alpha_dash(App::$id) || !App::$key){
            $this->response_json(array(),"2010",'app_id错误');
        }

        if(  Valid::not_empty(App::$unique_id) && !Valid::alpha_dash(App::$unique_id)){
            $this->response_json(array(),"2011",'unique_id错误');
        }

        if(!Valid::alpha_dash(App::$trid)){
            $this->response_json(array(),"2012",'trid错误');
        }




        $app_str = (App::$token ? App::$token :'' ). App::$id . App::$trid . md5(App::$key) . App::$time ;
        $app_sign = $this->sign($app_str,App::$key);

        if(App::$sign != $app_sign){
            //var_dump($app_str,App::$key,$app_sign,App::$sign);
            $this->response_json(array(),"2002",'签名验证失败');
        }


        if($this->_check_token===TRUE){
            $this->check_token();
        }

        if($this->_check_user === TRUE){
            $this->check_user();
        }

    }


    //检查token是否有效 token绑定的用户是否有效
    protected function check_token(){
        if(App::$_token){
            if(isset(App::$_token['expire_time']) && App::$_token['expire_time']<time() ){
                $this->response_json(array(),"2005",'token已过期');
            }
            return TRUE;

        }else{
            $this->response_json(array(),"2003",'缺少token');
        }
    }


    //检查user是否有效 token绑定的用户是否有效
    protected function check_user(){
        if(App::$_user && isset(App::$_token['user_id']) && App::$_token['user_id']>0 ){
            if(isset(App::$_user['allow_login']) && (int)App::$_user['allow_login']!==(int)Model_User::ALLOW_LOGIN__ALLOWED){
                    $this->response_json(array(),"2021",'禁止登录');
            }
            if(isset(App::$_user['status']) && (App::$_user['status']==Model_User::STATUS_DELETED)){
                    $this->response_json(array(),"2022",'无效用户');
            }
            return TRUE;
        }else{
            $this->response_json(array(),"2020",'用户未登录');
        }
    }





    //格式化JSON返回
    public function response_json($result,$code=TRUE,$message=NULL,$ext=NULL,$exit=TRUE){
        $time_string = date('Y-m-d H:i:s');
        $data = array(
            'code' => $code,
            'message' => $message ? $message : '',

            'result' => $result,
            'service' => array(
                'ver'=> $this->service_ver,
                'time'=> $time_string,
                'trid'=> $this->service_trid ? $this->service_trid :'',
            )
        );
        if($ext!==NULL && is_array($ext)){
            foreach ($ext as $k => $v){
                if(!isset($data[$k])) {
                    $data[$k] = $v;
                }
            }
        }

        $service_str = '';
        if(App::$token){
            $service_str = App::$token;
        }
        $service_str .= App::$id . $data['service']['trid']. md5(App::$key) .$data['service']['time'];
        $service_sign = $this->sign($service_str,App::$key);
        $data['service']['sign'] = $service_sign;
        $json = json_encode($data);

        header('Content-type: application/json');
        echo $json;
        ob_flush();
        if(defined('API_LOG')){
            $server_ip =  isset($_SERVER['SERVER_ADDR']) ? $_SERVER['SERVER_ADDR'] : '';
            $this->log->write(array(array('body'=>$json,'time'=>time())),"time [service] ".($server_ip ? "[server_ip:{$server_ip}]" : "")." [hash:{$this->log_token}] [uri:".Request::current()->uri()."] -- RESPONSE:\r\nbody\r\n");
        }
        if($exit===TRUE){
            exit;
        }
    }

    //制作流水号trid
    public function trid(){
        return 'TR'.time().Text::random('alnum',16);
    }


    //制作验证签名
    protected function sign($str,$key){
        return md5(md5($str).$key);
    }

    //加密
    protected function encrypt($string,$key){
        if(empty($string)){
            return FALSE;
        }
        $size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB);
        $string = $this->pkcs5_pad($string, $size);

        return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $string, MCRYPT_MODE_ECB));
    }

    /* 解密
        php  AES加密后不会在字符串后面补位x00和记位符
        ios 和 java(android)
    */
    protected function decrypt($string,$key){
        if(empty($string)){
            return FALSE;
        }
        $decrypted =  mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, base64_decode($string), MCRYPT_MODE_ECB);
        return $this->pkcs5_unpad($decrypted);
    }



    function pkcs5_pad($text, $blocksize) {
        $pad = $blocksize - (strlen($text) % $blocksize);
        return $text . str_repeat(chr($pad), $pad);
    }

    function pkcs5_unpad($text) {
        $pad = ord($text{strlen($text)-1});
        if ($pad > strlen($text)) return false;
        if (strspn($text, chr($pad), strlen($text) - $pad) != $pad) return false;
        return substr($text, 0, -1 * $pad);
    }


}