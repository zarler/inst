<?php

/**
 * Created by PhpStorm.
 * User: wangchao
 * Date: 2018/1/10
 * Time: 下午4:27
 */
class Lib_Risk_API extends Lib_Common
{
    private $user_id;
    private $param;
    private $action;
    private $provider;
    private $model;
    private $lib;
    private $step;
    private $providerConfig = [
        'credit' => 'Moxie',
        'anti' => 'QianHai',
    ];

    public function before()
    {


        parent::before(); // TODO: Change the autogenerated stub
        $this->model['step'] = Model::factory('CreditInfo_Step');
        $this->model['user'] = Model::factory('User');
        $this->model['moxie_data'] = Model::factory('Moxie_Data');
        $this->model['moxie_queue'] = Model::factory('Moxie_Queue');
        $this->model['moxie_data_item'] = Model::factory('Moxie_DataItem');
        $this->model['Risk_QueryRecord'] = Model::factory('Risk_QueryRecord');


        $this->lib['Risk'] = Lib::factory('Risk_API');
    }

    /**
     * 授信部分
     * @param $provider
     * @return $this
     */
    public function credit($provider = null)
    {
        if (!empty($provider)) {
            $this->provider = $provider;
        } else {
            $this->provider = $this->providerConfig['credit'];
        }

        return $this;
    }

    /**
     * 反欺诈部分
     * @param $provider
     * @return $this
     */
    public function anti($provider)
    {
        if (!empty($provider)) {
            $this->provider = $provider;
        } else {
            $this->provider = $this->providerConfig['anti'];
        }

        return $this;
    }

    public function user_id($user_id)
    {
        $this->user_id = $user_id;

        return $this;
    }

    /**
     * 发送请求
     * @return $this
     */
    public function execute()
    {
        if (!$this->response) {
            call_user_func_array('self::'.$this->method, ['data' => []]);
        }

        return $this;
    }

    /**
     * @param $action
     * @param $param
     * @return $this
     *
     */
    public function html($action, $param)
    {
        $this->method = $this->provider.'Html';
        $this->action = $action;
        $this->param = $param;

        return $this;
    }

    /**
     * 调用魔蝎接口
     * @return $this
     */
    private function MoxieHtml()
    {
        $this->step = Model::factory('User')->get_ci_step($this->param['user_id']);

        if (!isset($this->step[$this->action])) {
            $this->model['step']->create($this->param['user_id'], $this->action);
        }

        if (isset($this->step[$this->action]) && (int)$this->step[$this->action] == (int)Model_CreditInfo_Step::COMPLETE) {
            $this->response([], "4002", "记录已存在");
        }
        $userId = date('YmdHis').Text::random(null, 4);
        $id = Model::factory('Moxie_Data')->add_data([
            'req_data' => json_encode(array('userId' => $userId)), 'provider' => 'Moxie', 'type' => 'html',
            'state' => 1, 'userid' => $userId, 'action' => $this->action,
        ]);
        Model::factory('Moxie_DataItem')->add_data_item([
            'extends' => $this->param['user_id'], 'userid' => $userId,
            'state' => 1,
        ]);

        $rs = Model::factory('Risk_QueryRecord')->get_by_array([
            'user_id' => $this->param['user_id'], 'provider' => 'Moxie', 'action' => $this->action,
        ], 11);
        if (count($rs) >= 10) {
            $this->response([], "4006", "重试次数已超上限");
        }

        $Moxie = new Lib_Risk_API_Moxie_API();
        $this->param['action'] = $this->action;
        $this->param['userId'] = $userId;
        $result_data = $Moxie->html($this->param);

        //处理返回数据
        if ($result_data) {
            $this->response(true,
                [
                    'html' => '<html> <head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> </head> <body onload="javascript:document.login_form.submit();"> <form id="login_form" name="login_form" action='.$result_data.' method="get"></form> </body> </html>',
                    'jump' => 1,    //jump =1 跳出， jump = 2 html
                ]
            );
        } else {
            $this->response(false, [], Lib_Common::LIB_COMMON_API_RESULT_EXCEPTION, '接口异常');
        }

        return $this;
    }

    /**
     *
     * 反欺诈百融接口
     *  704    SpecialList_c
     *  673    ApplyLoan
     *  539    Execution
     *  395    TelCheck
     *  275    SpecialList_c_contact
     *  252    scorepettycashv1
     *  144    TelPeriod
     */
    public function BaiRong()
    {
        $result = new Lib_Risk_API_BaiRong_API();
        $result = $result->query($this->param);

        if (isset($result)) {
            $this->response(true,
                $result
            );
        } else {
            $this->response(false, [], Lib_Common::LIB_COMMON_API_MISS_PARAM, '');
        }

        return $this;
    }


    /**
     * 同盾
     * @return $this
     * 需要获取详细
     */

    public function TongDun()
    {

        $result = new Lib_Risk_API_TONGDUN2_API();
        $result = $result->query($this->param);

        if ($result) {
            echo 22;
            die;
            $this->response(true,
                [
                    'result' => Lib_Common::LIB_COMMON_API_RESULT_SUCCESS,
                    'message' => '提交成功',
                    'info' =>
                        [
                            'data' => $result,
//                            'msg' => $result['api_result']['msg'],
                        ],
                ]
            );
        } else {
            echo 11;
            die;
            $this->response(false, [], Lib_Common::LIB_COMMON_API_MISS_PARAM, '');
        }

        Model::factory('AntiFraud_TongDun')->add_tongdun_data([
            'user_id' => $this->param['user_id'], 'module' => 'ApplyModel', 'request_data' => json_encode($this->param),
            'response_data' => json_encode($result), 'type' => 1, 'create_time' => time(),
        ]);
        Model::factory('Fraud_TongDun')->get_hit_rules($this->param['user_id']);

        return $this;

    }

    /**
     * @param $action
     * @param $param
     * @return $this
     * 致诚
     */
    public function ZhiCheng(){
//        $APIOutLog = new Model_APIOutLog();
        $RiskService = new Lib_Risk_API_ZhiCheng_RiskService();//快金请求宜信查询用户借款和风险信息
        if(empty($this->param['name'])||empty($this->param['idNo'])||empty($this->param['queryReason'])){
            $json_result=array('result'=>'9999','msg'=>'缺少参数');
        }
//        //数据库日志记录
//        $log_id = $APIOutLog->create(array(
//            'provider' => 'ZhiCheng',
//            'action' => 'RiskService',
//            'type' => 'ZhiCheng',
//            'req_data' => json_encode($RiskService->getallRequestData($this->request->post())),
//            'reference_id' => 0,
//        ));
        $response = $RiskService->postData($this->param);
        var_dump($response);die;
        //var_dump($response);
        $result = json_decode($response, true);
        if(isset($result['errorCode'])){
            if($result['errorCode']==='0000'){
                $msg = '调用致诚API接口成功';
            }else{
                $msg = '调用致诚API接口返回失败:'.$result['message'];
            }
        }else{
            $msg = '返回异常';
        }
//        //更新日志表写入接口返回
//        $APIOutLog->update_by_id($log_id, array(
//            'msg' => $msg,
//            'resp_data' => $response,
//        ));
        if(isset($result['errorCode'])){
            if($result['errorCode']==='0000'){
                $rc4_str=$result['params'];
                $rc4_str=base64_decode(urldecode($rc4_str));
                $rc4_str=$this->rc4($RiskService->get_rc4key(),$rc4_str);
                $result['params']=json_decode($rc4_str,true);
                $json_result=array('result'=>'0000','msg'=>$msg,'info'=>$result);
            }else{
                $json_result=array('result'=>$result['errorCode'],'msg'=>$msg);
            }
        }else{
            $json_result=array('result'=>'R0001','msg'=>'返回异常');
        }
        return json_encode($json_result);
        $this->_render($json_result);
    }
    /*
     * 反欺诈路由
     * $action 请求方法
     * $param 参数
     *
     **/

    public function query($action, $param)
    {
        $this->method = $this->provider;
        $this->action = $action;
        $this->param = $param;

        return $this;
    }


    private function QianHai()
    {
        $qianhai = new Lib_Risk_API_QianHai_Api();
        $action = $this->action;
        $result = $qianhai->$action($this->param);
        $this->response(true, $result, Lib_Common::LIB_COMMON_API_RESULT_SUCCESS, '接口请求成功');

        return $this;
        //处理返回数据
    }
    
    private function Emay()
    {
        $emya = new Lib_Risk_API_Emay_Api();
        $action = $this->action;
        $result = $emya->user_id($this->user_id)->$action($this->param);
        $this->response(true, $result, Lib_Common::LIB_COMMON_API_RESULT_SUCCESS, '接口请求成功');
        return $this;
        //处理返回数据
    }

    /**
     * 集奥
     * @return $this
     */
    private function Geo()
    {
        $geo = Lib::factory("Risk_API_Geo_API");
        $action = $this->action;
        $result = $geo->$action($this->param);
        if ($result) {
            $this->response(true, $result, Lib_Common::LIB_COMMON_API_RESULT_SUCCESS, '接口请求成功');
        } else {
            $this->response(false, [], Lib_Common::LIB_COMMON_API_RESULT_EXCEPTION, '接口异常');
        }

        return $this;
    }

    /**
     * 91金融
     * @return $this
     */
    private function Jinrong91()
    {
        $jinrong = Lib::factory("Risk_API_Jinrong91_API");
        $action = $this->action;
        $result = $jinrong->$action($this->param);
        if ($result) {
            if($result['status']=='yes'){
                $this->response(true, $result, Lib_Common::LIB_COMMON_API_RESULT_SUCCESS, '接口请求成功');
            }else{
                $this->response(false, $result, Lib_Common::LIB_COMMON_API_RESULT_EXCEPTION, $result['message']);
            }
        } else {
            $this->response(false, [], Lib_Common::LIB_COMMON_API_RESULT_EXCEPTION, '接口异常');
        }

        return $this;
    }
}