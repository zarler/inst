<?php
defined('SYSPATH') or die('No direct script access.');
/**
 * Created by PhpStorm.
 * User: majin
 * Date: 16/4/18
 * Time: 下午10:51
 *
 * User
 * 2016-9-12 注册方式从简,有手机号和密码就可以注册成功.
 *
 * 2017-4-14 appv2.2.0 TCOA003：新人享好礼   chunyu
 * 2017-5-27 appv2.4.0 邀请好友 chunyu
 * 2017-9-5  邀请好友修改 chunyu
 * 2017-10-20 活动有福同享 TCOA015 chunyu
 *
 */
class Controller_Ver1_User extends AppCore{

    protected $_check_token = TRUE;
    protected $_check_user = FALSE;

    protected $model = NULL;

    public function before()
    {
        parent::before(); // TODO: Change the autogenerated stub

        $this->model['user'] = Model::factory('User');
        $this->model['verify'] = Model::factory('Verify_Sms');
        $this->model['gps'] = Model::factory('Location_Gps');
        $this->model['baidumap'] = Model::factory('Location_BaiduMap');
        $this->model['order'] = Model::factory('Order');
        $this->model['step'] = Model::factory('CreditInfo_Step');
        //$this->model['order_charge'] = Model::factory('Order_Charge');
    }
    /** [快金2.2] ------------------------------------------------------------------------------------------------ */

    /**
     * 映射 /v2/User/RegisterMobile
     */
    public function action_Register(){
        $this->action_RegisterMobile();
    }


    /**
     * 手机号注册
     */
    public function action_RegisterMobile(){
        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        $password = isset($this->_data['password']) ? $this->_data['password'] : '';
        $verify_code = isset($this->_data['verify_code']) ? $this->_data['verify_code'] : '';
        $token = isset($this->_data['app']['token']) ? $this->_data['app']['token'] : '';
        if( !(Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')) ){
            $this->response_json(array(),"5002","手机号码格式错误");
        }

        if($user = $this->model['user']->get_one_by_mobile($mobile)){
            $this->response_json(array(),"5007","手机号码已被注册");
        }


        $source_password = $this->decrypt($password,App::$key);
        if( !(Valid::not_empty($source_password) && Valid::min_length($source_password,6)) ){
            $this->response_json(array(),"5011","密码最少6位字符");
        }

        if( !(Valid::digit($verify_code) && Valid::exact_length($verify_code,4)) ){
            $this->response_json(array(),"5006","验证码错误");
        }

        if($vid = $this->model['verify']->check($mobile,App::$_token['id'],$verify_code,Model_Verify_Sms::TYPE_REG)){
            //验证成功
        }else{
            if($v = $this->model['verify']->period_mobile_token($mobile,App::$_token['id'],Model_Verify_Sms::TYPE_REG)){
                $this->model['verify']->failed($v['id']);
            }
            $this->response_json(array(),"5006","验证码错误");
        }

        $this->model['verify']->success($vid);//标记验证码成功


        $array = array();

        switch(App::$type){
            case 'wechat':
                $array['reg_ip'] = App::$ip;
                $array['reg_unique_id'] = App::$unique_id;
                $array['reg_app'] = App::$type;
                break;
            case 'android':
            case 'ios':
                $array['reg_ip'] = App::$ip;
                $array['reg_unique_id'] = App::$unique_id;
                $array['reg_app'] = App::$type;
                break;
        }

        $salt = Text::random('alpha',16);

        $array['mobile']=$this->_data['mobile'];
        $array['validated_mobile'] = Model_User::MOBILE_STATUS_VERIFIED;
        $array['password'] = $this->model['user']->password($source_password,$salt);
        $array['salt'] = $salt;
        $array['status'] = Model_User::STATUS_NORMAL;
        $array['credit_auth'] = Model_User::CREDIT_AUTH_BASE_READY;
        $array['allow_login'] = Model_User::ALLOW_LOGIN__ALLOWED;

        $response_array = array();
        $user_id=0;


        $db = Database::instance();//一致性检测,防止慢连接与并发
        $db->begin();
        try{
            $has = DB::query(Database::SELECT,'SELECT id,mobile,name,identity_code FROM '.$db->table_prefix().'user WHERE mobile=\''.$mobile.'\' for update ')->execute()->current();//排它锁
            if($has){
                $user_id=0;
                throw new Exception('账号已注册');
            }else{
                $user_id =$this->model['user']->create($array);//创建主表
            }
            $db->commit();
        }catch(Exception $e){
            $db->rollback();
            $this->response_json(array(),"4000",$e->getMessage());
        }


        if ($user_id > 0) {

            $this->model['user']->create_after($user_id);//附属表

            $response_array['user_id'] = $user_id;
            $response_array['mobile'] = $mobile;

            //注册成功后自动登录
            $this->model['user']->log_on($user_id, App::$_token['id']);
            $response_array['token_expire_in'] = Model_Token::LOGIN_PERIOD;

            /*if (App::$type == 'wechat') {//微信通过手机号+密码登录需要返回 wechat_passport
                $wechat_pssport = $this->model['wechat']->make_code();
                $this->model['wechat']->create(App::$unique_id, array('passport' => $wechat_pssport, 'user_id' =>$user_id ));
                $response_array['wechat_passport'] = $wechat_pssport;
            }*/

            //appv2.2.0 增加极光推送(JPUSH)给用户打上alias、tag
            $response_ext['app_jpush']['alias'] = Model_JPush::JPUSP_PRE.$user_id;

            $this->response_json($response_array, "1000", "账号注册成功", $response_ext, false);
            //先结束并返回信息,之后再进行处理下面的代码
            if (function_exists('fastcgi_finish_request')) {
                fastcgi_finish_request();
            } else {
                ignore_user_abort(true);
            }
        }else{
            $this->response_json(array(),"4000","账号注册失败");
        }

            //设备数据采集
            if(in_array(strtolower(App::$id),['android','ios'])){
                Model::factory('EquipmentEvent')->create([
                    'equipment_id' => App::$unique_id,
                    'user_id' => $user_id,
                    'token' => App::$token,
                    'type' => Model_EquipmentEvent::TYPE_REG,
                    'extend' => [
                        'app'=>[
                            'id' => App::$id,
                            'os' => App::$os,
                            'ver' => App::$ver,
                            'ip' => App::$ip,
                        ]
                    ]
                ]);
            }

            if($token != ''){
                $EventLog = Model::factory('EventLog');
                $event_name = 'TCOA003_REGISTER';
                $type = 1;
                $num = $EventLog->get_total(array('event_name'=>'TCOA003_CLICK', 'token_id'=>$token));
                if($num > 0){
                    try{
                        $EventLog->create(array(
                            'token_id'=> $token,
                            'user_id'=> $user_id,
                            'type' => $type,
                            'event_name' => $event_name,
                            'app' => App::$id,
                            'app_os' => App::$os,
                            'app_ver' => App::$ver,
                            'ip' => $array['reg_ip']));
                    }catch (Database_Exception $e){
                        //忽略错误
                        $error = $e->getTrace();
                        $this->log->write(array(array('error'=>json_encode($error),'time'=>time())),"time [service]  -- ERROR:\r\nerror\r\n");
                    }
                }
            }
            exit;
    }






    /**
     * 注册短信验证码
     */
    public function action_RegisterVerifySMS(){

        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        if(isset($mobile) &&
            Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/') )
        {
            $verify_code = Text::random('nozero',1).Text::random('numeric',3);
            $verify_no = Text::random('numeric',6);

            if($rs = $this->model['verify']->today_mobile_token($mobile,App::$_token['id'],Model_Verify_Sms::TYPE_REG) ){
                if($rs['send_count'] >= Model_Verify_Sms::RETRY_MAX){
                    $this->response_json(array('max_count'=>Model_Verify_Sms::RETRY_MAX),"4006","短信发送数超上限");
                };
                if($rs['send_time']>(time()-Model_Verify_Sms::RESEND_PERIOD)){
                    $this->response_json(array('next_send'=> Model_Verify_Sms::RESEND_PERIOD - (time() - $rs['send_time'])),"5001","短信发送间隔太短");
                };

                if( NULL !== $this->model['verify']->update($rs['id'], array(
                        'verify_code' => $verify_code,
                        'verify_no' => $verify_no,
                        'send_count' => $rs['send_count']+1,
                        'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                        'send_time' => time()+1)) )
                {
                    if( $this->model['verify']->send($mobile,$verify_code,Model_Verify_Sms::TYPE_REG) ){
                        $this->response_json(
                            array(
                                'user_id' => isset($u['id']) ? $u['id'] : 0,
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => $rs['send_count']+1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    };
                };

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'send_count' => $rs['send_count'],
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");


            }else{

                if( $new_id = $this->model['verify']->create(array(
                    'mobile' => $mobile,
                    'token_id' => (int) App::$_token['id'] ,
                    'type' => Model_Verify_Sms::TYPE_REG,
                    'verify_code' => $verify_code,
                    'verify_no' => $verify_no,
                    'user_id' => isset(App::$_token['user_id']) ? (int) App::$_token['user_id'] : 0,
                    'create_time' => time(),
                    'send_time' => time()+1,
                    'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                    'status' => Model_Verify_Sms::STATUS_VALID,
                    'send_count' => 1)) )
                {

                    if( $this->model['verify']->send($mobile,$verify_code,Model_Verify_Sms::TYPE_REG) ){
                        $this->response_json(
                            array(
                                'user_id' => isset($u['id']) ? $u['id'] : 0,
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => 1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    }

                }

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");

            };


        }else{
            $this->response_json([],"4002","手机号码格式错误");
        }


    }



    /**
     * 登录
     */
    public function action_Login(){
        App::$_token['user_id'] = 0;
        if( isset(App::$_token['user_id']) && App::$_token['user_id']>0 && App::$_user){
            $this->response_json(array(),"5016","当前token已经登录，不能再次登录");
        }

        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        $password = isset($this->_data['password']) ? $this->_data['password'] : '';

        if( !(Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')) ){
            $this->response_json(array(),"5002","手机号码格式错误");
        }


        $source_password = $this->decrypt($password,App::$key);
        //var_dump(Valid::not_empty($source_password) ,Valid::min_length($source_password,6),$source_password);
        if( !(Valid::not_empty($source_password) && Valid::min_length($source_password,6)) ){
            $this->response_json(array(),"5011","密码最少6位字符");
        }


        $lcc =(int)App::$session->get('login_check_per_day_count');
        $lcd =(int)App::$session->get('login_check_per_day_date');
        $lcc++;
        if(strtotime(date('Y-m-d'))> $lcd){//每天0点后登录统计重新计算
            App::$session->set('login_check_per_day_count',1)->set('login_check_per_day_date',strtotime(date('Y-m-d')))->save();
        }else{
            if($lcc>Model_User::LOGIN_CHECK_PER_DAY_MAX){
                $this->response_json(array('login_count'=>$lcc,'max_count'=>Model_User::LOGIN_CHECK_PER_DAY_MAX),"5017","今日登录次数已超限");
            }
            App::$session->set('login_check_per_day_count',$lcc)->save();
        }



        $user_id = $this->model['user']->log_mobile_password($mobile,$source_password);
        if($user_id===FALSE){
            $this->response_json(array('login_count'=>$lcc+1,'max_count'=>Model_User::LOGIN_CHECK_PER_DAY_MAX),"4011","账号或密码错误");
        }

        $user = $this->model['user']->get_one($user_id);
        if(!$user){
            $this->response_json(array(),"5018","用户查询数据异常");
        }

        if(isset($user['allow_login']) && $user['allow_login']==Model_User::ALLOW_LOGIN__DISALLOW){
            $this->response_json(array(),"5130","账号已注销");
        }


        $this->model['user']->log_on($user['id'],App::$_token['id']);//登录
        switch(App::$type){
            case 'wechat':

            case 'android':
            case 'ios':
                $ip = App::$ip;
                break;
            default:
                $ip ='';
        }
        $array = array(
            'last_login_time'=>time(),
            'login_ip'=>$ip,
        );
        $this->model['user']->update($user['id'],$array);

        $response_array = array();
        $response_array['user_id'] = $user['id'];
        $response_array['mobile'] = $mobile;
        $response_array['name'] = $user['name'];
        $response_array['token_expire_in'] = Model_Token::LOGIN_PERIOD;


        $user_ci_step = $this->model['user']->get_ci_step($user['id']);//老用户没有授信,Model_User::get_ci_step();里有自动创建操作.

        //appv2.2.0 增加极光推送(JPUSH)给用户打上alias、tag
        $response_ext['app_jpush']['alias'] = 'user@' . $user['id'];

        $this->response_json($response_array,"1000","登录成功",$response_ext,FALSE);

        //先结束并返回信息,之后再进行处理下面的代码
        if(function_exists('fastcgi_finish_request')){
            fastcgi_finish_request();
        }else{
            ignore_user_abort(TRUE);
        }

        //设备数据采集
        if(in_array(strtolower(App::$id),['android','ios'])){
            Model::factory('EquipmentEvent')->create([
                'equipment_id' => App::$unique_id,
                'user_id' => $user_id,
                'token' => App::$token,
                'type' => Model_EquipmentEvent::TYPE_LOGIN,
                'extend' => [
                    'app'=>[
                        'id' => App::$id,
                        'os' => App::$os,
                        'ver' => App::$ver,
                        'ip' => App::$ip,
                    ]
                ]
            ]);
        }
/*
        //先结束并返回信息,之后再进行处理下面的代码
        if(function_exists('fastcgi_finish_request')){
            fastcgi_finish_request();
        }else{
            ignore_user_abort(TRUE);
        }
        $shield = new Lib_Shield_User();
        $shield->tongdun($user_id,$user['name'],$user['identity_code'],$mobile);//同盾跑分+自动拒绝
        $shield->region($user_id,$user['identity_code']);//高危地区自动拒绝
        $shield->age($user_id,$user['identity_code']);//年龄不符自动拒绝我
*/

    }


    /**
     * 登出
     */
    public function action_Logout(){
        $this->_check_token = TRUE;
        $this->check_token();
        //$this->_check_user = TRUE;
        //$this->check_user();

        if($this->model['user']->log_out(App::$_user['id'],App::$_token['id'])){
            Lib::factory('TCCache_Token')->token(App::$token)->remove();
            if(isset(App::$_token['id']) && App::$_token['id']){
                Lib::factory('TCCache_TokenSession')->token_id(App::$_token['id'])->remove();
            }
            //appv2.2.0 增加极光推送(JPUSH)给用户打上alias、tag
            $response_ext['app_jpush']['remove_tag'] = 'remove_tag';
            $response_ext['app_jpush']['remove_alias'] = 'remove_alias';
            $this->response_json([],"1000","已成功登出",$response_ext);
        };
        $this->response_json(array(),"4000","登出失败");

    }


    /**
     * 重置密码短信验证码
     */
    public function action_ResetPasswordVerifySMS(){
        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        if(isset($mobile) &&
            Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/') )
        {
            if($u = $this->model['user']->get_one_by_mobile($mobile) ){
                //已注册
                if(isset($u['allow_login']) && $u['allow_login']==Model_User::ALLOW_LOGIN__DISALLOW){
                    $this->response_json(array(),"5130","账号已注销");
                }
            }else{
                $this->response_json(array(),"5019","手机号码未注册");
            }

            $verify_code = Text::random('nozero',1).Text::random('numeric',3);
            $verify_no = Text::random('numeric',6);

            if($rs = $this->model['verify']->today_mobile_token($mobile,App::$_token['id'],Model_Verify_Sms::TYPE_RESETPWD) ){
                if($rs['send_count'] >= Model_Verify_Sms::RETRY_MAX){
                    $this->response_json(array('max_count'=>Model_Verify_Sms::RETRY_MAX),"4006","短信发送数超上限");
                };
                if($rs['send_time']>(time()-Model_Verify_Sms::RESEND_PERIOD)){
                    $this->response_json(array('next_send'=> Model_Verify_Sms::RESEND_PERIOD - (time() - $rs['send_time'])),"5001","短信发送间隔太短");
                };

                if( NULL !== $this->model['verify']->update($rs['id'], array(
                        'verify_code' => $verify_code,
                        'verify_no' => $verify_no,
                        'send_count' => $rs['send_count']+1,
                        'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                        'send_time' => time()+1)) )
                {
                    if( $this->model['verify']->send($mobile,$verify_code,Model_Verify_Sms::TYPE_RESETPWD) ){
                        $this->response_json(
                            array(
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => $rs['send_count']+1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    };
                };

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'send_count' => $rs['send_count'],
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");


            }else{

                if( $new_id = $this->model['verify']->create(array(
                    'mobile' => $mobile,
                    'token_id' => (int) App::$_token['id'] ,
                    'type' => Model_Verify_Sms::TYPE_RESETPWD,
                    'verify_code' => $verify_code,
                    'verify_no' => $verify_no,
                    'user_id' => isset(App::$_token['user_id']) ? (int) App::$_token['user_id'] : 0,
                    'create_time' => time(),
                    'send_time' => time()+1,
                    'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                    'status' => Model_Verify_Sms::STATUS_VALID,
                    'send_count' => 1)) )
                {

                    if( $this->model['verify']->send($mobile,$verify_code,Model_Verify_Sms::TYPE_RESETPWD) ){
                        $this->response_json(
                            array(
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => 1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    }

                }

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");

            };


        }else{
            $this->response_json(array(),"4002","手机号码格式错误");
        }


    }

    /**
     * 重置密码
     */
    public function action_ResetPassword(){
        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        $new_password = isset($this->_data['new_password']) ? $this->_data['new_password'] : '';
        $verify_code = isset($this->_data['verify_code']) ? $this->_data['verify_code'] : '';
        $source_password = $this->decrypt($new_password,App::$key);
        if( !(Valid::not_empty($source_password) && Valid::min_length($source_password,6)) ){
            $this->response_json(array(),"5011","密码最少6位字符");
        }
        if( !(Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')) ){
            $this->response_json(array(),"5002","手机号码格式错误");
        }


        if( !(Valid::digit($verify_code) && Valid::exact_length($verify_code,4)) ){
            $this->response_json(array(),"5006","验证码错误");
        }
        $rcc =(int)App::$session->get('resetpwd_check_per_day_count');
        $rcd =(int)App::$session->get('resetpwd_check_per_day_date');
        $rcc++;
        if(strtotime(date('Y-m-d')) > $rcd){//每天0点后 重置密码统计 重新计算
            App::$session->set('resetpwd_check_per_day_count',1)->set('resetpwd_check_per_day_date',strtotime(date('Y-m-d')))->save();
        }else{
            if($rcc > Model_User::RESETPWD_CHECK_PER_DAY_MAX){
                $this->response_json(array('resetpwd_count'=>$rcc,'max_count'=>Model_User::RESETPWD_CHECK_PER_DAY_MAX),"5017","今日重置次数已超限");
            }
            App::$session->set('resetpwd_check_per_day_count',$rcc)->save();
        }

        if($vid = $this->model['verify']->check($mobile,App::$_token['id'],$verify_code,Model_Verify_Sms::TYPE_RESETPWD)){
            //验证成功
        }else{
            if($v = $this->model['verify']->period_mobile_token($mobile,App::$_token['id'],Model_Verify_Sms::TYPE_RESETPWD)){
                $this->model['verify']->failed($v['id']);
            }
            $this->response_json(array(),"5006","验证码错误");
        }

        if( $user = $this->model['user']->get_one_by_mobile($mobile) ){
            //已注册
        }else{
            $this->response_json(array(),"5019","手机号码未注册");
        }
        //做允许修改密码的标记
        $resetpwd_token = Text::random('alpha',32);
        App::$session->set('resetpwd_token',$resetpwd_token)
            ->set('resetpwd_mobile',$mobile)
            ->set('resetpwd_expire',time()+Model_User::RESETPWD_EXPIRE_PERIOD)
            ->save();
        $this->model['verify']->success($vid);//标记验证码已经验证成功

        $up = $this->model['user']->change_password($mobile,$source_password);

        if($up){
            App::$session->remove('resetpwd_token','resetpwd_mobile','resetpwd_expire')->save();//完成后清除验证凭据
            $this->response_json(array('mobile'=>$mobile),"1000","密码更新成功");
        }else{
            $this->response_json(array('mobile'=>$mobile),"4000","密码更新失败");
        }


    }


    /*
     * 用户中心
     *
     * */

    public function action_Personal()
    {
        if(App::$_token['user_id'] > 0){
            $mobile = App::$_user['mobile'];
            $userinfo['mobile'] = substr($mobile,0,3).'****'.substr($mobile,-4);
            $bankcard = Model::factory("BankCard")->get_one_by_user_id(App::$_token['user_id']);
            $bankname = Model::factory("BankCard")->get_bank_by_id($bankcard['id']);
            $order = Model::factory("Order")->dealing_order(App::$_token['user_id']);
            $bill = Model::factory("Bill")->dealing_bill(App::$_token['user_id']);
            $bank = $bankname['name'].substr($bankcard['card_no'],-4);
            $list = array(
                [
                    'url' => 'app://app.inst/CreditInfo/List',
                    'title' => '授信管理',
                    'status' => '1',
                    'info' => '',
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_sxgl.png'
                ],//授信管理

                [
                    'url' => 'app://app.inst/BankCard/Change',
                    'title' => '更换银行卡',
                    'status' => empty($order) && empty($bill) ? "1":"0",
                    'info' => $bank,
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_ghyhk.png'
                ],//更换银行卡

                [
                    'url' => 'app://app.inst/User/ResetPassword',
                    'title' => '修改密码',
                    'status' => '1',
                    'info' => '',
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_xgmm.png'
                ],//修改密码
                [
                    'url' => 'app://app.inst/User/Call',
                    'title' => '客服电话',
                    'status' => '1',
                    'info' => '82345678',
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_kfdh.png'
                ],//客服电话
            );
        }else{
            $userinfo = [];
            $list = array(
                [
                    'url' => 'app://app.inst/User/Login',
                    'title' => '授信管理',
                    'status' => '1',
                    'info' => '',
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_sxgl.png'
                ],//授信管理

                [
                    'url' => 'app://app.inst/User/Login',
                    'info' => '',
                    'title' => '更换银行卡',
                    'status' => '1',
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_ghyhk.png'
                ],//更换银行卡

                [
                    'url' => 'app://app.inst/User/Call',
                    'title' => '客服电话',
                    'status' => '1',
                    'info' => '010-56592060',
                    'icon' => 'http://a-cdn.timecash.cn/banner/inst/grzx/icon_kfdh.png'
                ],//客服电话
            );
        }
        $config = Kohana::$config->load('app')->get('android');
        $ver = isset($config['ver']) ? $config['ver']:'1.0' ;
        $configs = array(
            'ver'=>$ver,
            'confirm_Android' => "app://app.inst/Settings/Android",
            'confirm_IOS' => "app://app.inst/Settings/IOS"
        );
        $result = ['userinfo'=>$userinfo,'list'=>$list,'ver'=>$configs];
        $this->response_json($result,"1000","请求成功");
    }



    /**
     * 用户基本信息
     */
    public function action_Info(){
        $this->check_user();

        //USER_CACHE ----[BEGIN]
        $ca = Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->get();//CACHE GET
        if($ca){
            $response_array =$ca;

            //BEGIN---适配低版本APP问题------------------
            if( (App::$id=='ios' && App::$ver<='1.3.5') ) {

                //坑货专供!
                $current_order = array();
                $current_order_charge = array();
                $co = $this->model['order']->current_by_user_id(App::$_token['user_id']);
                if ($co) {
                    $current_order = $this->model['order']->format($co);//订单详情
                    $current_order_charge = $this->model['order_charge']->get_by_order_id($co['id']);//订单费用
                    //主动还款标识
                    $current_order['flag_active_repayment'] = "0";
                    if ($co['status'] == Model_Order::STATUS_OVERDUE) {
                        if (Tool::factory('Date')->count_day_day($co['expire_time'], time()) <= Model_Order::OVERDUE_REPAYMENT_DAY) {
                            if (date('Y-m-d', $co['active_repayment_time']) == date('Y-m-d') && $co['active_repayment_count'] < Model_Order::ACTIVE_REPAYMENT_DAY_MAX) {
                                $current_order['flag_active_repayment'] = "1";
                            } elseif (date('Y-m-d', $co['active_repayment_time']) != date('Y-m-d')) {
                                $current_order['flag_active_repayment'] = "1";
                            }
                        }
                    }
                    if ($co['status'] == Model_Order::STATUS_PAID) {
                        if (date('Y-m-d', $co['active_repayment_time']) == date('Y-m-d') && $co['active_repayment_count'] < Model_Order::ACTIVE_REPAYMENT_DAY_MAX) {
                            $current_order['flag_active_repayment'] = "1";
                        } elseif (date('Y-m-d', $co['active_repayment_time']) != date('Y-m-d')) {
                            $current_order['flag_active_repayment'] = "1";
                        }
                    }
                }
                if ($current_order) {
                    $response_array['current_order'] = $current_order;
                }
                if ($current_order_charge) {
                    $response_array['current_order_charge'] = $current_order_charge;
                }
                $response_array['current_order']['repayment_amount'] = isset($response_array['current_order']['repayment_amount']) && isset($response_array['current_order']['refunded_amount']) && bccomp($response_array['current_order']['repayment_amount'], $response_array['current_order']['refunded_amount'], 2) >= 0 ? (string)bcsub($response_array['current_order']['repayment_amount'], $response_array['current_order']['refunded_amount'], 2) : (string)0;

            }
            //END

            $this->response_json($response_array,"1000","查询成功");
        }
        //USER_CACHE ----[END]

        $user = $this->model['user']->get_one(App::$_token['user_id']);
        if($user){

            $user_array = array();
            $user_array['user_id'] = $user['id'];
            $user_array['name'] = $user['name'];
            $user_array['mobile'] = $user['mobile'];
            $user_array['identity_code'] = Tool::factory('String')->str_shield_middle($user['identity_code'],4,4);
            $user_array['sex'] = $user['sex'];
            $user_array['reg_date'] = date('Y-m-d',$user['create_time']);
            $user_array['last_loan_date'] = $user['last_loan_time'] ? date('Y-m-d',$user['last_loan_time']) : '' ;
            $user_array['login_ip'] = $user['login_ip'] ? $user['login_ip'] : '' ;
            $user_array['last_login_time'] = $user['last_login_time'] ? date('Y-m-d H:i:s',$user['last_login_time']) : '' ;
            $user_array['status'] = $user['status'];
            //只开发100%担保，修改此处授信状态
            if($user['credit_auth'] == Model_User::CREDIT_AUTH_STATUS_VERIFIED){
                $user_array['credit_auth'] = (string)Model_User::CREDIT_AUTH_BASE_VERIFIED;
            }else{
                $user_array['credit_auth'] = $user['credit_auth'];
            }

            $fp_array = array();
            $fp = $this->model['user']->get_finance_profile(App::$_token['user_id']);
            //担保比例修改注释原有代码
//            if($fp){
//                $fp_array =array('max_amount'=>$fp['max_amount'],'ensure_rate'=>$fp['ensure_rate']);
//            }else{
//                $fp_array=array('max_amount'=>0,'ensure_rate'=>1);
//            }
            if($fp){
                $fp_array =array('max_amount'=>$fp['max_amount']);
            }else{
                $fp_array=array('max_amount'=>0);
            }
            $fp_array['ensure_rate'] = 1;
            $credit_info_step = array();
            $credit_info_count = array();
//            $ci_step = $this->model['user']->get_ci_step(App::$_token['user_id']);
            if(isset($ci_step)){
                //unset($credit_info_step['create_time']);
                //unset($credit_info_step['update_time']);
                //unset($credit_info_step['user_id']);

//                $credit_info_step['identity'] = App::$_user['validated_identity'] == Model_User::IDENTITY_STATUS_VERIFIED ? (string)Model_CreditInfo_Step::COMPLETE : (string)Model_CreditInfo_Step::INCOMPLETE ;
                $credit_info_step['work_info'] = $ci_step['work_info'];
                $credit_info_step['home_info'] = $ci_step['home_info'];
                //$credit_info_step['account_taobao'] = $ci_step['account_taobao'];//聚信立已取消
                //$credit_info_step['account_jingdong'] = $ci_step['account_jingdong'];//聚信立已取消
                //$credit_info_step['account_mno'] = $ci_step['account_mno'];//聚信立已取消
                $credit_info_step['phone_book'] = $ci_step['phone_book'];
                $credit_info_step['sms_record'] = $ci_step['sms_record'];
                $credit_info_step['call_history'] = $ci_step['call_history'];
                $credit_info_step['contact'] = $ci_step['contact'];
                //$credit_info_step['zhimacredit'] = $ci_step['zhimacredit'];//芝麻分已取消
                //$credit_info_step['picauth'] = $ci_step['picauth'];//照片审核(快金1期)已取消
                $credit_info_step['faceid'] = $ci_step['faceid'];
                $credit_info_step['location'] = $ci_step['location'];

                $credit_info_count['faceid'] = $ci_step['faceid_count'];
                //$credit_info_count['picauth'] = $ci_step['picauth_count'];//照片审核(快金1期)已取消
                $credit_info_count['location'] = $ci_step['location_count'];


            }

            $bank = Model::factory('Bank')->get_array();


            $credit_card = array();
            $cc = $this->model['user']->get_creditcard(App::$_token['user_id']);
            if($cc){
                foreach($cc as $card){
                    $len = strlen($card['card_no']);
                    $credit_card[] = array(
                        'id'=>$card['id'],
                        'card_no'=> Tool::factory('String')->str_shield_middle($card['card_no'],4,4),
                        'bank_code'=>isset($card['bank_code']) ? $card['bank_code'] : '',
                        'bank_name'=>isset($card['bank_name']) ? $card['bank_name'] : '',
                    );
                }
            }
            $bank_card = array();
            $bc= $this->model['user']->get_bankcard(App::$_token['user_id']);
            if($bc){
                foreach($bc as $card){
                    $len = strlen($card['card_no']);
                    $bank_card[] = array(
                        'id'=>$card['id'],
                        'card_no'=> Tool::factory('String')->str_shield_middle($card['card_no'],4,4),
                        'bank_id'=>isset($card['bank_id']) ? $card['bank_id'] : 0,
                        'bank_name'=>isset($bank[$card['bank_id']]['name']) ? $bank[$card['bank_id']]['name'] : '',
                        'short_bank_name'=>isset($bank[$card['bank_id']]['short_name']) ? $bank[$card['bank_id']]['short_name'] : '',
                    );
                }
            }
            $current_order = array();
            $current_order_charge = array();
            $co = $this->model['order']->current_by_user_id(App::$_token['user_id']);
            if($co){
                $current_order = $this->model['order']->format($co);//订单详情
                $current_order_charge = $this->model['order_charge']->get_by_order_id($co['id']);//订单费用
                //主动还款标识
                $current_order['flag_active_repayment'] = "0";
                if($co['status']==Model_Order::STATUS_OVERDUE ){
                    if(Tool::factory('Date')->count_day_day($co['expire_time'],time()) <= Model_Order::OVERDUE_REPAYMENT_DAY){
                        if(date('Y-m-d',$co['active_repayment_time']) == date('Y-m-d') && $co['active_repayment_count'] < Model_Order::ACTIVE_REPAYMENT_DAY_MAX ){
                            $current_order['flag_active_repayment'] = "1";
                        }elseif(date('Y-m-d',$co['active_repayment_time']) != date('Y-m-d')){
                            $current_order['flag_active_repayment'] = "1";
                        }
                    }
                }
                if($co['status']==Model_Order::STATUS_PAID ){
                    if(date('Y-m-d',$co['active_repayment_time']) == date('Y-m-d') && $co['active_repayment_count'] < Model_Order::ACTIVE_REPAYMENT_DAY_MAX ){
                        $current_order['flag_active_repayment'] = "1";
                    }elseif(date('Y-m-d',$co['active_repayment_time']) != date('Y-m-d')){
                        $current_order['flag_active_repayment'] = "1";
                    }
                }
            }


            $response_array = array();
            if($user_array){
                $response_array['user'] = $user_array;
            }
            if($fp_array){
                $response_array['finance'] = $fp_array;
            }
            if($ci_step){
                $response_array['credit_info']['step'] = $credit_info_step;
                $response_array['credit_info']['count'] = $credit_info_count;
            }
            if($bank_card){
                $response_array['bank_card'] = $bank_card;
            }
            if($credit_card){
                $response_array['credit_card'] = $credit_card;
            }
            if($current_order){
                $response_array['current_order'] = $current_order;
            }
            if($current_order_charge){
                $response_array['current_order_charge'] = $current_order_charge;
            }

            Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->set($response_array);//CACHE ----- [WRITE]

            $response_array['_db_read'] = "1";
            $this->response_json($response_array,"1000","查询成功");
        }
        $this->response_json(array(),"4000","查询失败");

    }















}
