<?php
defined('SYSPATH') or die('No direct script access.');
/**
 * Created by PhpStorm.
 * User: isNum
 * Date: 16/5/24
 * Time: 下午4:48
 *
 * 银行卡
 *
 * 2016-9-13 注册流程变化,实名认证通过4要素验卡完成.
 * 绑定银行卡(借记卡) 之前先进行 年龄 高危地区筛选.
 *
 *
 */

class Controller_Ver1_BankCard extends AppCore {
    protected $_check_token = TRUE;
    protected $_check_user = TRUE;

    public $tester = ['722030','1'];//722030:聂淑昆线上  3459477:聂淑昆测试



    public function before() {
        parent::before(); // TODO: Change the autogenerated stub
        $this->model['user'] = Model::factory('User');
        $this->model['verify'] = Model::factory('Verify_Sms');
        $this->model['bankcard'] = Model::factory('BankCard');
        $this->model['order'] = Model::factory('Order');
        $this->model['step'] = Model::factory('CreditInfo_Step');
        $this->model['outputmessage'] = Model::factory('OutputMessage');
    }

    /**
     * 添加储蓄卡
     *  验卡前进行高危地区和年龄过滤,验卡成功同时标记实名认证成功
     */
    public function action_Add(){
        $name = isset($this->_data['name']) ? $this->_data['name'] : '';
        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        $identity_code = isset($this->_data['identity']) ? $this->_data['identity'] : '';

        $card_no = isset($this->_data['card_no']) ? $this->_data['card_no'] : '';
        $bank_id = isset($this->_data['bank_id']) ? $this->_data['bank_id'] : '';

        $sex='男';
        $identity_face='';

        if( !(Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')) ){
            $this->response_json(array(),"5002","手机号码格式错误");
        }

        if( !(Valid::not_empty($name) && Valid::regex($name,'/^[\x{4e00}-\x{9fa5}]{1,}[·]?[\x{4e00}-\x{9fa5}]{1,}$/u')) ){
            $this->response_json(array(),"5004","姓名格式错误");
        }
        $source_identity_code = strtoupper($this->decrypt($identity_code,App::$key));
        if( !Valid::not_empty($source_identity_code) || !Valid::regex($source_identity_code,'/^(\d{17}X|\d{18})$/i') || !Tool::factory('IDCard')->is_idcard($source_identity_code) ){
            $this->response_json(array(),"5003","身份证号码格式错误");
        }

        $age = (int) Lib::factory('IDCard')->age($source_identity_code);
        if($age<22 || $age>55){
            $this->response_json(array(),"5103","您的年龄暂不符合借款要求");//不符合年龄
        }

        $f4 = mb_substr($source_identity_code,0,4);
        //  if( in_array((string)$f4,$this->model['user']->deny_idcard) ){
        if(in_array((string)$f4,$this->model['user']->deny_idcard) && !in_array(App::$_token['user_id'],$this->tester) ){
            $this->response_json(array(),"5100","您所在地区暂时不开放借款");//高危地区
        }


        $sex = Lib::factory('IDCard')->sex($source_identity_code);
        if( App::$_user['validated_identity']==Model_User::IDENTITY_STATUS_VERIFIED  && strtoupper(App::$_user['identity_code']) != strtoupper($source_identity_code)  ){
            $this->response_json(array(),"5014","身份证不匹配");
        }

        $rs = $this->model['user']->get_one_by_array(array('identity_code'=>$source_identity_code));
        if( isset($rs['id']) && App::$_token['user_id']!=$rs['id'] ){
            $this->response_json(array(),"5008","身份证已被他人注册并认证,不能绑卡.");
        }

        if(!Valid::not_empty($card_no) || !Valid::not_empty($bank_id)) {
            $this->response_json(array(),"4005",Model_OutputMessage::AUTH_CARD_OTHER);
        }
        $ra = Lib::factory('CardInfo_API')->query([
            'card_no' => $card_no,
        ])->execute()->asJson();
        $ras = json_decode($ra,true);
        if (!is_array($ras)) {
            $this->response_json(array(), "4008", Model_OutputMessage::AUTH_CARD_OTHER);
        }
        $bank_name = '';
        $bank_code = '';
        if (isset($ras['status']) && $ras['status'] === TRUE && isset($ras['api_result']['result'])) {
            if ((string)$ras['api_result']['result'] == Lib_Common::LIB_COMMON_API_RESULT_SUCCESS) {
                $bank_name = $ras['api_result']['info']['bank_name'];
                $bank_code = $ras['api_result']['info']['bank_code'];
            }else {
                $this->response_json(array(), "4010", $this->model['outputmessage']->get_card_info_message($ras['api_result']['result']));
            }
        }else{
            $this->response_json(array(), "4009", Model_OutputMessage::AUTH_CARD_OTHER);
        }

        if($re = $this->model['bankcard']->supported($bank_id,$bank_code)){
            //检测支持的银行
        }else{
            $this->response_json(array(),"5043",Model_OutputMessage::AUTH_CARD_NO_MATCH);
        }

        //超过N次 禁止验卡
        $step = $this->model['step']->get_one(App::$_token['user_id']);
        if(isset($step[Model_CreditInfo_Step::BANKCARD_AUTH_COUNT]) && $step[Model_CreditInfo_Step::BANKCARD_AUTH_COUNT] >= Model_BankCard::AUTH_ERROR_COUNT_MAX){
            $this->response_json(array(),"5119","验卡次数超限");
        }
        $this->model['step']->value_add(App::$_token['user_id'],Model_CreditInfo_Step::BANKCARD_AUTH_COUNT,1);//计次

        //融宝付费验卡
        $rb = Lib::factory('AuthCard_API')->auth('geo',[
            'phone' => $mobile,
            'card_no'=>$card_no,
            'card_holder' => $name,
            'identity_code' => $source_identity_code,
        ])->execute()->asJson();
        $rbs = json_decode($rb,true);
        if (!is_array($rbs)) {
            $this->response_json(array(), "4008", Model_OutputMessage::AUTH_CARD_OTHER);
        }

        if (isset($rbs['status']) && $rbs['status'] === TRUE && isset($rbs['api_result']['result'])) {
            if ((string)$rbs['api_result']['result'] == Lib_Common::LIB_COMMON_API_RESULT_SUCCESS) {
                //验证成功
                Model::factory('CreditInfo_Step')->change(App::$_token['user_id'],['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::BANK);

            } elseif((string)$rbs['api_result']['result'] == Lib_Common::LIB_COMMON_API_DATA_EXCEPTION) {
                $this->response_json(array(), "5062", Model_OutputMessage::AUTH_CARD_TYPE_ERROR);
            } else {
                $this->response_json(array(), "5048", $this->model['outputmessage']->get_auth_card_message($rbs['api_result']['result']));
            }
        } else {
            $this->response_json(array(), "4009", Model_OutputMessage::AUTH_CARD_OTHER);
        }

        $db = Database::instance();
        $bankcard_id = 0;
        try{
            $db->begin();

            if($res = $this->model['bankcard']->get_one_by_user_id(App::$_token['user_id'])) {
                $db->rollback();
                $this->response_json(array(),"5046","储蓄卡已经添加");
            }else{
                $bankcard_id = $this->model['bankcard']
                    ->create(
                        App::$_token['user_id'],
                        array(
                            'mobile' => $mobile,
                            'card_no' => $card_no,
                            'bank_id' => $bank_id,
                            'holder' => $name,
                            'identity_code' => $source_identity_code,
                        )
                    );
                if($bankcard_id>0){
                    //还未实名认证过的用户更新user表
                    if(empty(App::$_user['identity_code']) || App::$_user['validated_identity']!=Model_User::IDENTITY_STATUS_VERIFIED){
                        $this->model['user']->update(App::$_token['user_id'],array(
                            'identity_code'=>$source_identity_code,
                            'validated_identity'=>Model_User::IDENTITY_STATUS_VERIFIED,
                            'name'=>$name,
                            'sex'=>$sex,
                        ));
                    }

                    $db->commit();
                }else{
                    throw new Exception("添加失败");

                }
            }
        }catch (Database_Exception $e){
            $db->rollback();
            $this->response_json(array(),"4000",Model_OutputMessage::AUTH_CARD_OTHER);
        }



        if($bankcard_id>0){
            $response_array= [];

            if(App::$_user['validated_identity']!=Model_User::IDENTITY_STATUS_VERIFIED){
                //实名认证
                $user_array = array();
                $user_array['name'] = $name;
                $user_array['identity_code'] = $source_identity_code;
                $user_array['validated_identity'] = Model_User::IDENTITY_STATUS_VERIFIED;
                $this->model['user']->update(App::$_token['user_id'],$user_array);
            }

            Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->remove();//CACHE ----- [DELETE]

            $bank = Model::factory('Bank')->get_array();

            //--[跳出绑卡]----------------------------------------------------------------------------
            $response_array=[
                'jump' => '0',
            ];
            //暂时不采用跳出式绑卡，暂时留存
//            if(App::$ver>='2.3.9'){
//                $res = Lib::factory('BankCard_Bind')->apply_by_bankcard_id($bankcard_id);
//                if(is_array($res)){
//                    if(isset($res['html']) && $res['html'] ){
//                        $response_array=[
//                            'jump' => Model_BankCard_Bind::JUMP_HTML,
//                            'html' => $res['html'],
//                        ];
//                    }elseif(isset($res['url']) && $res['url'] ){
//                        $response_array=[
//                            'jump' => Model_BankCard_Bind::JUMP_URL,
//                            'url' => $res['url'],
//                        ];
//                    }
//                }
//            }
            //--------------------------------------------------------------------------------------

            $response_array['bankcard_id'] = $bankcard_id;
            $response_array['card_no'] = Tool::factory('String')->str_shield_middle($card_no,4,4);
            $response_array['bank_id'] = $bank_id;
            $response_array['holder'] = $name;
            $response_array['bank_name'] = isset($bank[$bank_id]['name'])? $bank[$bank_id]['name']  : '';
            $response_array['bank_code'] = isset($bank[$bank_id]['code'])? $bank[$bank_id]['code']  : '';
            $response_array['short_bank_name'] = isset($bank[$bank_id]['short_name'])? $bank[$bank_id]['short_name']  : '';
            $this->response_json($response_array,"1000","添加成功",NULL,FALSE);

            //先结束并返回信息,之后再进行处理下面的代码
            if(function_exists('fastcgi_finish_request')){
                fastcgi_finish_request();
            }else{
                ignore_user_abort(TRUE);
            }


            //设备事件采集
            if(in_array(strtolower(App::$id),['android','ios'])){
                Model::factory('EquipmentEvent')->create([
                    'equipment_id' => App::$unique_id,
                    'user_id' => App::$_token['user_id'] > 0 ? App::$_token['user_id'] : 0,
                    'token' => App::$token,
                    'type' => Model_EquipmentEvent::TYPE_CARD_AUTH,
                    'extend' => [
                        'app'=>[
                            'id' => App::$id,
                            'os' => App::$os,
                            'ver' => App::$ver,
                            'ip' => App::$ip,
                        ]
                    ]
                ]);
            }


        }else{
            $this->response_json(array(),"4000",Model_OutputMessage::AUTH_CARD_OTHER);
        }

        /**
         * 调用反欺诈模块
         * /v2/BankCard/Add?af=FastLoan/event_credit_af
         */

            $af_modules = Model_Credit_AF::MODULES;
            $af_module = 'BankCard/event_add_af';//$this->_get['af']
            if( isset($af_modules[$af_module]) ){
                $afm = $af_modules[$af_module];
                $lib_class = $afm['lib'];
                $has_func = $afm['has_func'];
                $chk_func = $afm['chk_func'];
                $pass_func = $afm['pass_func'];

                //if(class_exists('Lib_'.$lib_class)){
                    if(!Lib::factory($lib_class)->app_id(App::$id)->$has_func(App::$_token['user_id'])){//已通过授信反欺诈的用户不用再检查
                        $af = Lib::factory($lib_class)->app_id(App::$id)->$chk_func(App::$_token['user_id']);//授信反欺诈
                        if($af){
                            Lib::factory($lib_class)->app_id(App::$id)->$pass_func(App::$_token['user_id']);//授信反欺诈通过
                        }
                    }
                //}
            }



    }



    /**
     * 修改储蓄卡
     */
    public function action_Change(){


        $bankCardInfo_card_no = isset($this->_data['card_no']) ? $this->_data['card_no'] : '';
        $bankCardInfo_bank_id = isset($this->_data['bank_id']) ? $this->_data['bank_id'] : '';
        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        $verify_code = isset($this->_data['verify_code']) ? $this->_data['verify_code'] : '';
        if( !(Valid::digit($verify_code) && Valid::exact_length($verify_code,4)) ){
            $this->response_json(array(),"5006","验证码错误");
        }

        if($vid = $this->model['verify']->check($mobile,App::$_token['id'],$verify_code,Model_Verify_Sms::TYPE_BANKCARD)){
            //验证成功
        }else{
            if($v = $this->model['verify']->period_mobile_token($mobile,App::$_token['id'],Model_Verify_Sms::TYPE_BANKCARD)){
                $this->model['verify']->failed($v['id']);
            }
            $this->response_json(array(),"5006","验证码错误");
        }

        if( !(Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')) ){
            $this->response_json(array(),"5002","手机号码格式错误");
        }
        if(!Valid::not_empty($bankCardInfo_card_no) || !Valid::not_empty($bankCardInfo_bank_id)) {
            $this->response_json(array(),"4005",Model_OutputMessage::AUTH_CARD_OTHER);
        }
        $order = Model::factory("Order")->dealingOrder(App::$_token['user_id']);
        $bill = Model::factory("Bill")->dealingBill(App::$_token['user_id']);
        if( !empty($order) || !empty($bill) ){
            $this->response_json(array(),"5101","有正在处理中订单，不能修改银行卡");
        }


        $ra = Lib::factory('CardInfo_API')->query([
            'card_no' => $bankCardInfo_card_no,
        ])->execute()->asJson();
        $ras = json_decode($ra,true);
        if (!is_array($ras)) {
            $this->response_json(array(), "4008", Model_OutputMessage::AUTH_CARD_OTHER);
        }
        $bank_name='';
        $bank_code='';
        if (isset($ras['status']) && $ras['status'] === TRUE && isset($ras['api_result']['result'])) {
            if ((string)$ras['api_result']['result'] == Lib_Common::LIB_COMMON_API_RESULT_SUCCESS) {
                $bank_name = $ras['api_result']['info']['bank_name'];
                $bank_code = $ras['api_result']['info']['bank_code'];
            } else {
                $this->response_json(array(), "4010", $this->model['outputmessage']->get_card_info_message($ra['api_result']['result']));
            }
        } else {
            $this->response_json(array(), "4009", Model_OutputMessage::AUTH_CARD_OTHER);
        }

        if($re = $this->model['bankcard']->supported($bankCardInfo_bank_id,$bank_code)){
            //支持该银行卡
        }else{
            $this->response_json(array(),"5053",Model_OutputMessage::AUTH_CARD_NO_MATCH);//用户添卡时需要选择银行,不支持的银行也会在这里拦住
        }

        if($res = $this->model['bankcard']->get_one_by_card_no($bankCardInfo_card_no)) {
            $this->response_json(array(),"5046","不可重复添加同一张储蓄卡");
        }



        //超过N次 禁止验卡
        $step = $this->model['step']->get_one(App::$_token['user_id']);
        if(isset($step[Model_CreditInfo_Step::BANKCARD_AUTH_COUNT]) && $step[Model_CreditInfo_Step::BANKCARD_AUTH_COUNT] >= Model_BankCard::AUTH_ERROR_COUNT_MAX){
            $this->response_json(array(),"5119","验卡次数超限");
        }
        $this->model['step']->value_add(App::$_token['user_id'],Model_CreditInfo_Step::BANKCARD_AUTH_COUNT,1);//计次


        //融宝付费验卡
        $rb = Lib::factory('AuthCard_API')->auth('geo',[
            'phone' => $mobile,
            'card_no'=>$bankCardInfo_card_no,
            'card_holder' => App::$_user['name'],
            'identity_code' => App::$_user['identity_code'],
        ])->execute()->asJson();
        $rbs = json_decode($rb,true);
        if (!is_array($rbs)) {
            $this->response_json(array(), "4008", Model_OutputMessage::AUTH_CARD_OTHER);
        }
        if (isset($rbs['status']) && $rbs['status'] === TRUE && isset($rbs['api_result']['result'])) {
            if ((string)$rbs['api_result']['result'] == Lib_Common::LIB_COMMON_API_RESULT_SUCCESS) {
                //验证成功
                Model::factory('CreditInfo_Step')->change(App::$_token['user_id'],['status' => 0,'pass_time' => time()],Model_CreditInfo_Step::FACEID);


            } elseif((string)$rbs['api_result']['result'] == "5062"){
                $this->response_json(array(), "5062", Model_OutputMessage::AUTH_CARD_TYPE_ERROR);
            } else {
                $this->response_json(array(), "5048", $this->model['outputmessage']->get_auth_card_message($rbs['api_result']['result']));
            }
        } else {
            $this->response_json(array(), "4009", Model_OutputMessage::AUTH_CARD_OTHER);
        }

        $db = Database::instance();
        try{
            $db->begin();
            if($newcard_id = $this->model['bankcard']
                ->update(
                    App::$_token['user_id'],
                    array(
                        'mobile' => App::$_user['mobile'],
                        'card_no' => $bankCardInfo_card_no,
                        'bank_id' => $bankCardInfo_bank_id,
                        'holder' => App::$_user['name'],
                        'identity_code'=>App::$_user['identity_code'],
                    )
                )
            ){
                $db->commit();
                Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->remove();//CACHE ----- [REMOVE]


                $response_array=[];
                $response_array['bankcard_id'] = $newcard_id;
                $response_array['card_no'] = $bankCardInfo_card_no;
                $response_array['bank_id'] = $bankCardInfo_bank_id;


                //--[跳出绑卡]----------------------------------------------------------------------------
                $response_array['jump']= '0';
//                if(App::$ver>'2.3.9'){
//                    $res = Lib::factory('BankCard_Bind')->apply_by_bankcard_id($newcard_id);
//                    if(is_array($res)){
//                        if(isset($res['html']) && $res['html'] ){
//                            $response_array['jump'] = Model_BankCard_Bind::JUMP_HTML;
//                            $response_array['html'] = $res['html'];
//                        }elseif(isset($res['url']) && $res['url'] ){
//                            $response_array['jump']= Model_BankCard_Bind::JUMP_URL;
//                            $response_array['url']=  $res['url'];
//                        }
//                    }
//
//                }
                //--------------------------------------------------------------------------------------



                $this->response_json($response_array,"1000","修改成功",NULL,FALSE);

                //先结束并返回信息,之后再进行处理下面的代码
                if(function_exists('fastcgi_finish_request')){
                    fastcgi_finish_request();
                }else{
                    ignore_user_abort(TRUE);
                }


                //设备数据采集
                if(in_array(strtolower(App::$id),['android','ios'])){
                    Model::factory('EquipmentEvent')->create([
                        'equipment_id' => App::$unique_id,
                        'user_id' => App::$_token['user_id'] > 0 ? App::$_token['user_id'] : 0,
                        'token' => App::$token,
                        'type' => Model_EquipmentEvent::TYPE_CARD_AUTH,
                        'extend' => [
                            'app'=>[
                                'id' => App::$id,
                                'os' => App::$os,
                                'ver' => App::$ver,
                                'ip' => App::$ip,
                            ]
                        ]
                    ]);
                }
                exit;
            }else{
                $db->rollback();
                $this->response_json(array(),"5049",Model_OutputMessage::AUTH_CARD_OTHER);
            }
        }catch (Database_Exception $e){
            $db->rollback();
            $this->response_json(array(),"4000",Model_OutputMessage::AUTH_CARD_OTHER);
        }

    }


    /**
     * 更换银行卡验证码
     */
    public function action_ChangeVerifySMS(){

        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        if(isset($mobile) &&
            Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/') )
        {
            $verify_code = Text::random('nozero',1).Text::random('numeric',3);
            $verify_no = Text::random('numeric',6);

            if($rs = $this->model['verify']->today_mobile_token($mobile,App::$_token['id'],Model_Verify_Sms::TYPE_BANKCARD) ){
                if($rs['send_count'] >= Model_Verify_Sms::RETRY_MAX){
                    $this->response_json(array('max_count'=>Model_Verify_Sms::RETRY_MAX),"4006","短信发送数超上限");
                };
                if($rs['send_time']>(time()-Model_Verify_Sms::RESEND_PERIOD)){
                    $this->response_json(array('next_send'=> Model_Verify_Sms::RESEND_PERIOD - (time() - $rs['send_time'])),"5001","短信发送间隔太短");
                };

                if( NULL !== $this->model['verify']->update($rs['id'], array(
                        'verify_code' => $verify_code,
                        'verify_no' => $verify_no,
                        'send_count' => $rs['send_count']+1,
                        'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                        'send_time' => time()+1)) )
                {
                    if( $this->model['verify']->send($mobile,$verify_code,Model_Verify_Sms::TYPE_BANKCARD) ){
                        $this->response_json(
                            array(
                                'user_id' => isset($_token['user_id']) ? $_token['user_id'] : 0,
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => $rs['send_count']+1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    };
                };

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'send_count' => $rs['send_count'],
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");


            }else{

                if( $new_id = $this->model['verify']->create(array(
                    'mobile' => $mobile,
                    'token_id' => (int) App::$_token['id'] ,
                    'type' => Model_Verify_Sms::TYPE_BANKCARD,
                    'verify_code' => $verify_code,
                    'verify_no' => $verify_no,
                    'user_id' => isset(App::$_token['user_id']) ? (int) App::$_token['user_id'] : 0,
                    'create_time' => time(),
                    'send_time' => time()+1,
                    'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                    'status' => Model_Verify_Sms::STATUS_VALID,
                    'send_count' => 1)) )
                {

                    if( $this->model['verify']->send($mobile,$verify_code,Model_Verify_Sms::TYPE_REG) ){
                        $this->response_json(
                            array(
                                'user_id' => isset($_token['user_id']) ? $_token['user_id'] : 0,
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => 1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    }

                }

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");

            };


        }else{
            $this->response_json([],"4002","手机号码格式错误");
        }


    }


    public function action_List(){
        //USER_CACHE ----[BEGIN]
        $ca = Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->get();//CACHE GET
        if($ca) {
            $bank_card = $ca;
            $this->response_json(['bank_card_list'=>$bank_card],'1000','查询成功');
            exit;
        }
        $bank = Model::factory('Bank')->get_array();
        $bank_card = [];
        $bc= $this->model['user']->get_bankcard(App::$_token['user_id']);
        if($bc){
            foreach($bc as $card){
                $bank_card[] = array(
                    'id' => $card['id'],
                    'card_no' => Tool::factory('String')->str_shield_middle($card['card_no'],4,4),
                    'bank_id' => isset($card['bank_id']) ? $card['bank_id'] : 0,
                    'bank_name' => isset($bank[$card['bank_id']]['name']) ? $bank[$card['bank_id']]['name'] : '',
                    'short_bank_name' => isset($bank[$card['bank_id']]['short_name']) ? $bank[$card['bank_id']]['short_name'] : '',
                    'bank_code' => isset($bank[$card['bank_id']]['code']) ? $bank[$card['bank_id']]['code'] : '',
                );
            }
        }
        Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->set($bank_card);//CACHE ----- [WRITE]
        //USER_CACHE ----[END]
        $this->response_json(['bank_card_list'=>$bank_card],'1000','查询成功');
    }


    /**
     * 跳出式绑卡
     */
    public function action_BindCheck(){
        if($bc = $this->model['bankcard']->get_one_by_user_id(App::$_token['user_id'])){
            $bank = Model::factory('Bank')->get_array();
            $bank_card = [
                'id' => $bc['id'],
                'card_no' => Tool::factory('String')->str_shield_middle($bc['card_no'],4,4),
                'bank_id' => isset($bc['bank_id']) ? $bc['bank_id'] : 0,
                'bank_name' => isset($bank[$bc['bank_id']]['name']) ? $bank[$bc['bank_id']]['name'] : '',
                'short_bank_name' => isset($bank[$bc['bank_id']]['short_name']) ? $bank[$bc['bank_id']]['short_name'] : '',
                'bank_code' => isset($bank[$bc['bank_id']]['code']) ? $bank[$bc['bank_id']]['code'] : '',
            ];

            $res = Lib::factory('BankCard_Bind')->apply_by_bankcard_id($bc['id']);

            if(is_array($res)){
                if(isset($res['html']) && $res['html'] ){
                    $this->response_json([
                        'bank_card' => $bank_card,
                        'jump' => (string)Model_BankCard_Bind::JUMP_HTML,
                        'html' => $res['html'],
                    ],'1000','绑卡申请已生成');
                }elseif(isset($res['url']) && $res['url'] ){
                    $this->response_json([
                        'bank_card' => $bank_card,
                        'jump' => (string)Model_BankCard_Bind::JUMP_URL,
                        'url' => $res['url'],
                    ],'1000','绑卡申请已生成');

                }else{
                    $this->response_json([
                        'bank_card' => $bank_card,
                        'jump' => (string)Model_BankCard_Bind::NO_JUMP,
                    ],'1000','绑卡申请关闭');
                }
            }else{
                $this->response_json([],'4000','绑卡申请失败,请联系客服! ');
            }
        }else{
            $this->response_json([],'5138','该用户没有添加过任何银行卡');
        }





    }













    /**
     * 发送储蓄卡短信
     */
    /*
    public function action_VerifySMS(){
        $mobile = isset($this->_data['mobile']) ? $this->_data['mobile'] : '';
        if(isset($mobile) &&
            Valid::phone($mobile,11) &&
            strlen($mobile)==11 &&
            Valid::regex($mobile,'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/') )
        {
            if($u = $this->model['user']->get_one_by_mobile($mobile) ){
                //已注册
            }else{
                $this->response_json(array(),"5019","手机号码未注册");
            }

            $verify_code = Text::random('nozero',1).Text::random('numeric',3);
            $verify_no = Text::random('numeric',6);

            if($rs = $this->model['verify']->today_mobile($mobile,Model_Verify_Sms::TYPE_BANKCARD) ){
                if($rs['send_count'] >= Model_Verify_Sms::RETRY_MAX){
                    $this->response_json(array('max_count'=>Model_Verify_Sms::RETRY_MAX),"4006","短信发送数超上限");
                };
                if($rs['send_time']>(time()-Model_Verify_Sms::RESEND_PERIOD)){
                    $this->response_json(array('next_send'=> Model_Verify_Sms::RESEND_PERIOD - (time() - $rs['send_time'])),"5001","短信发送间隔太短");
                };

                if( NULL !== $this->model['verify']->update($rs['id'], array(
                        'verify_code' => $verify_code,
                        'verify_no' => $verify_no,
                        'send_count' => $rs['send_count']+1,
                        'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                        'send_time' => time()+1)) )
                {
                    if( $this->model['verify']->send($mobile,$verify_code) ){
                        $this->response_json(
                            array(
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => $rs['send_count']+1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    };
                };

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'send_count' => $rs['send_count'],
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");


            }else{

                if( $new_id = $this->model['verify']->create(array(
                    'mobile' => $mobile,
                    'token_id' => (int) App::$_token['id'] ,
                    'type' => Model_Verify_Sms::TYPE_BANKCARD,
                    'verify_code' => $verify_code,
                    'verify_no' => $verify_no,
                    'user_id' => isset(App::$_token['user_id']) ? (int) App::$_token['user_id'] : 0,
                    'create_time' => time(),
                    'send_time' => time()+1,
                    'expire_time' => time()+Model_Verify_Sms::EXPIRE_PERIOD,
                    'status' => Model_Verify_Sms::STATUS_VALID,
                    'send_count' => 1)) )
                {

                    if( $this->model['verify']->send($mobile,$verify_code) ){
                        $this->response_json(
                            array(
                                'mobile' => $mobile,
                                'verify_no' => $verify_no,
                                'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                                'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                                'send_count' => 1,
                                'max_count' => Model_Verify_Sms::RETRY_MAX,
                            ),
                            "1000",
                            "发送成功");
                    }

                }

                $this->response_json(
                    array(
                        'mobile' => $mobile,
                        'verify_no' => '',
                        'expire_in' => Model_Verify_Sms::EXPIRE_PERIOD,
                        'next_send' => Model_Verify_Sms::RESEND_PERIOD,
                        'max_count' => Model_Verify_Sms::RETRY_MAX,
                    ),
                    "4000",
                    "发送失败");
            };
        }else{
            $this->response_json(array(),"4002","手机号码格式错误");
        }
    }
    */


    /**
     * 验证短信验证码
     * @param verify_code
     * @return bool

    public function _Verify($verify_code) {

        if( !(Valid::digit($verify_code) && Valid::exact_length($verify_code,4)) ){
            return FALSE;
        }
        if($vid = $this->model['verify']->check(App::$_user['mobile'],App::$_token['id'],$verify_code,Model_Verify_Sms::TYPE_BANKCARD)){
            //验证成功
            $this->model['verify']->success($vid);//标记验证码已经验证成功
            return TRUE;
        }else{
            if($v = $this->model['verify']->period_mobile_token(App::$_user['mobile'],App::$_token['id'])){
                $this->model['verify']->failed($v['id']);
            }
            return FALSE;
        }
    }
     */

}