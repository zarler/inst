<?php
defined('SYSPATH') or die('No direct script access.');
/**
 * Created by PhpStorm.
 * User: majin
 * Date: 16/5/19
 * Time: 上午11:02
 *
 * 授信信息
 * 2016-6-6 产品设计中取消了公司邮箱验证
 * 2016-6-16 新增京东授权 绑定安全验证的用户 需要提交短信验证码  {wangxuesong}
 * 2016-6-22 新增活体识别自动审核 通过或拒绝 {wangxuesong}
 * 2016-6-23 活体自动审核后 活体自动审核后 更改授信额度和担保比例  {wangxuesong}
 * 2016-6-24 新增移动运营商和淘宝 密码输入错误限制 {wangxuesong}
 * 2016-7-1 活体认证成功后发送短信 {wangxuesong}
 * 2016-7-27 独立拆分用户拒绝操作方法,每个ACTION内都可以独立调用. 添加action_Step() 独立提供授信列表和担保比例的API,增加对降担保授信的输出和判断.
 * 2016-8-23 新增调用手机号归属地查询api[主要判断是否为北京移动] 返回TRUE或FALSE {{wangxuesong}}
 * 2016-8-23 调整移动运营商接口如果为"北京移动"地区 增加网站查询密码 {{wangxuesong}}
 * 2016-9-13 聚信立和芝麻信用在快金2.2中被取消,取而代之的是百融评分和百融模型 by majin
 * 2016-9-20 取消聚信立和芝麻信用 by majin
 * 2016-10-10 取消授信有效期机制 by majin
 * 2016-10-11 将电话本,通话记录,短信记录 从 Controller_Ver2_CreditInfo_App 中挪进来 by majin
 * 2017-4-14 appv2.2.0 TCOA004：授信享好礼,基础授信通过发送优惠券 by chunyu
 * 2017-7-5 appv2.4.1 加入移动运营商记录抓取,跳出式。 by majin
 *
 */

class Controller_Ver1_CreditInfo extends AppCore {

    protected $face_pass;
    protected $identity_face_pass;
    protected $step;
    protected $server = '/API/Upload/Upload';

    private $tester = [         //我们的测试人员 避免被地区年龄和反欺诈过滤掉
        '130427199209265520',
        '370306199310095615',
    ];


    public function before() {
        parent::before(); // TODO: Change the autogenerated stub
        $this->model['step'] = Model::factory('CreditInfo_Step');
        $this->model['user'] = Model::factory('User');
        $this->model['finance'] = Model::factory('Finance_Profile');
        $this->model['faceidauth'] = Model::factory('User_FaceIDAuth');
        $this->face_pass = Model_User_FaceIDAuth::AUTO_PASS_RATE;
        $this->identity_face_pass = Model_User_FaceIDAuth::IDENTITY_PASS_RATE;

        $this->model['phonebook'] = Model::factory('App_PhoneBook');
        $this->model['smsrecord'] = Model::factory('App_SMSRecord');
        $this->model['callhistory'] = Model::factory('App_CallHistory');
        //$this->model['order'] = Model::factory('Order_FastLoan');
    }


    /**
     * 用户状态被禁将不允许进行授信
     */
    private function user_reject(){
        if(in_array(App::$_user['status'],array(Model_User::STATUS_LOANDENY,Model_User::STATUS_DENYFOREVER,Model_User::STATUS_DENYTEMP))){
            $this->response_json(array(),"4000","您的个人资料暂时不能支持此操作.");
        }
    }




    /**
     * 授信记录
     */
    public function action_Step(){


        //USER_CACHE ----[BEGIN]
        $ca = Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->get();//CACHE GET
        if($ca){
            $response_array =$ca;
            //老用户已经通过基础授信的不需要采集运营商数据 v2.4.1
            if(in_array(App::$_user['credit_auth'],[
                Model_User::CREDIT_AUTH_BASE_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_READY,
                Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                Model_User::CREDIT_AUTH_STATUS_SUBMITED,
                Model_User::CREDIT_AUTH_STATUS_CHECKING,
                Model_User::CREDIT_AUTH_STATUS_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_FAILED,
                Model_User::CREDIT_AUTH_STATUS_BACK
            ])){
                //$response_array['credit_info']['step']['mno'] =  (string)Model_CreditInfo_Step::COMPLETE;
            }
            $this->response_json($response_array,"1000","查询成功");
        }
        //USER_CACHE ----[END]


        $credit_info_step = array();
        $credit_info_count = array();
        $ci_step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        if(isset($ci_step)){
            //unset($credit_info_step['create_time']);
            //unset($credit_info_step['update_time']);
            //unset($credit_info_step['user_id']);

            $credit_info_step['identity'] = App::$_user['validated_identity'] == Model_User::IDENTITY_STATUS_VERIFIED ? (string)Model_CreditInfo_Step::COMPLETE : (string)Model_CreditInfo_Step::INCOMPLETE ;
            $credit_info_step['work_info'] = $ci_step[Model_CreditInfo_Step::WORK];
            $credit_info_step['home_info'] = $ci_step[Model_CreditInfo_Step::HOME];
            $credit_info_step['Mno'] = $ci_step[Model_CreditInfo_Step::MNO];
            $credit_info_step['phone_book'] = $ci_step[Model_CreditInfo_Step::PHONEBOOK];
            $credit_info_step['sms_record'] = $ci_step[Model_CreditInfo_Step::SMS];
            $credit_info_step['call_history'] = $ci_step[Model_CreditInfo_Step::CALL];
            $credit_info_step['contact'] = $ci_step[Model_CreditInfo_Step::CONTACT];
            $credit_info_step['faceid'] = $ci_step[Model_CreditInfo_Step::FACEID];
            $credit_info_step['location'] = $ci_step[Model_CreditInfo_Step::LOCATION];
            $credit_info_step['zhimacredit'] = $ci_step[Model_CreditInfo_Step::EMAIL];
            $credit_info_count['faceid'] = $ci_step[Model_CreditInfo_Step::FACEID_COUNT];
            $credit_info_count['taobao'] = $ci_step[Model_CreditInfo_Step::TAOBAO];
            $credit_info_count['jingdong'] = $ci_step[Model_CreditInfo_Step::JINGDONG];
            $credit_info_count['fund'] = $ci_step[Model_CreditInfo_Step::FUND];
            $credit_info_count['socialsecurity'] = $ci_step[Model_CreditInfo_Step::SOCIAL_SECURITY];
            $credit_info_count['bankcard'] = $ci_step[Model_CreditInfo_Step::BANKCARD_AUTH_COUNT];
            $credit_info_count['creditcard'] = $ci_step[Model_CreditInfo_Step::CREDITCARD_AUTH_COUNT];
            $credit_info_count['bank'] = $ci_step[Model_CreditInfo_Step::BANK];
            $credit_info_count['chsi'] = $ci_step[Model_CreditInfo_Step::CHSI];


            //老用户已经通过基础授信的不需要采集运营商数据 v2.4.1
            if(in_array(App::$_user['credit_auth'],[
                Model_User::CREDIT_AUTH_BASE_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_READY,
                Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                Model_User::CREDIT_AUTH_STATUS_SUBMITED,
                Model_User::CREDIT_AUTH_STATUS_CHECKING,
                Model_User::CREDIT_AUTH_STATUS_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_FAILED,
                Model_User::CREDIT_AUTH_STATUS_BACK
            ])){
                $credit_info_step['mno'] = (string)Model_CreditInfo_Step::COMPLETE;

            }else{
                $credit_info_step['mno'] = $ci_step[Model_CreditInfo_Step::MNO];
                $credit_info_step['creditcardbill'] = $ci_step[Model_CreditInfo_Step::EMAIL];
            }
        }


        //用户授信状态

        $user_credit_auth = isset(App::$_user['credit_auth']) ? App::$_user['credit_auth'] : (string)Model_User::CREDIT_AUTH_BASE_READY ;
        $user_status = isset(App::$_user['status']) ? App::$_user['status'] : (string)Model_User::STATUS_DELETED ;
        //暂时只支持100%担保借款，强制转型用户授信状态
        if((string)$user_credit_auth == (string)Model_User::CREDIT_AUTH_STATUS_VERIFIED){
            $user_credit_auth = (string)Model_User::CREDIT_AUTH_BASE_VERIFIED;
        }


        $response_array = array();
        $response_array['user']['credit_auth'] = $user_credit_auth;
        $response_array['user']['status'] = $user_status;
        if($ci_step){
            $response_array['credit_info']['step'] = $credit_info_step;
            $response_array['credit_info']['count'] = $credit_info_count;
        }


        Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->set($response_array);//CACHE ----- [WRITE]

        $response_array['_db_read'] = "1";
        $this->response_json($response_array,"1000","查询成功");

    }



    /**
     * 工作信息
     */
    public function action_WorkInfo(){
        $this->user_reject();
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        $company_name = isset($this->_data['company_name']) ? $this->_data['company_name'] : '';
        $company_province = isset($this->_data['company_province']) ? $this->_data['company_province'] : '';
        $company_city = isset($this->_data['company_city']) ? $this->_data['company_city'] : '';
        $company_county = isset($this->_data['company_county']) ? $this->_data['company_county'] : '';
        $company_address = isset($this->_data['company_address']) ? $this->_data['company_address'] : '';
        $company_tel = isset($this->_data['company_tel']) ? $this->_data['company_tel'] : '';
        if(!(Valid::not_empty($company_name) && Valid::not_empty($company_province) && Valid::not_empty($company_city) &&
            Valid::not_empty($company_address) && Valid::not_empty($company_tel) )){
            $this->response_json(array(),"4005","参数错误");
        }
        if(!isset($this->step[Model_CreditInfo_Step::WORK])){
            $this->model['step']->create(App::$_token['user_id'],Model_CreditInfo_Step::WORK);
        }

        $this->model['work'] = Model::factory('CreditInfo_Work');

        if($this->model['work']->get_one(App::$_token['user_id']) ||
            (isset($this->step[Model_CreditInfo_Step::WORK]) && $this->step[Model_CreditInfo_Step::WORK]==Model_CreditInfo_Step::COMPLETE ) ){
            $this->response_json(array(),"4002","记录已存在");

        }

        $this->model['work']->create(App::$_token['user_id'],array(
            'company_name'=>$company_name,
            'address'=>$company_address,
            'province'=>$company_province,
            'city'=>$company_city,
            'county'=>$company_county,
            'tel'=>$company_tel,
            //'email'=>$company_email,
            'validated_email'=>Model_Verify_Email::STATUS_VALITED,
        ));
        Model::factory('CreditInfo_Step')->change('123123123',['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::WORK);
        $this->response_json(array(),"1000","提交成功");
    }
    /*
     * 家庭信息
     * */
    public function action_HomeInfo(){
        $this->user_reject();
        $home_province = isset($this->_data['home_province']) ? $this->_data['home_province'] : '';
        $home_city = isset($this->_data['home_city']) ? $this->_data['home_city'] : '';
        $home_county = isset($this->_data['home_county']) ? $this->_data['home_county'] : '';
        $home_address = isset($this->_data['home_address']) ? $this->_data['home_address'] : '';
        $home_tel = isset($this->_data['home_tel']) ? $this->_data['home_tel'] : '';
        if(!(Valid::not_empty($home_province) && Valid::not_empty($home_city) && Valid::not_empty($home_county) &&
            Valid::not_empty($home_address) && Valid::not_empty($home_tel) )){
            $this->response_json(array(),"4005","参数错误");
        }
        $this->model['home'] = Model::factory("CreditInfo_Home");
        if($this->model['home']->get_one(App::$_token['user_id']) ||
            (isset($this->step[Model_CreditInfo_Step::HOME]) && $this->step[Model_CreditInfo_Step::HOME]==Model_CreditInfo_Step::COMPLETE ) ){
            $this->response_json(array(),"4002","记录已存在");
        }

        $this->model['home']->create(App::$_token['user_id'],array(
            'address'=> $home_province,
            'province'=> $home_address,
            'city'=>$home_city,
            'county'=> $home_county,
            'tel'=>$home_tel
        ));
        Model::factory('CreditInfo_Step')->change('123123123',['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::HOME);
        $this->response_json(array(),"1000","提交成功");
    }


    /**
     * 紧急联系人
     */
    public function action_Contact(){
        $this->user_reject();
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);
        $contact = isset($this->_data['contact']) ? $this->_data['contact'] : '';
        if(!is_array($contact)){
            $this->response_json(array(),"4005","参数错误");
        }
        if(count($contact)<2){
            $this->response_json(array(),"5033","联系人不能少于2人");
        }
        $this->model['contact'] = Model::factory('CreditInfo_Contact');


        if( isset($this->step[Model_CreditInfo_Step::CONTACT]) && $this->step[Model_CreditInfo_Step::CONTACT]==Model_CreditInfo_Step::COMPLETE ){
            $this->response_json(array(),"4002","记录已存在,无需提交.");
        }


        $array_name = array();
        $array_mobile = array();
        foreach($contact as $co){

            if(!(isset($co['name']) && $co['name']) ){
                $this->response_json(array(),"5034","没有联系人姓名");
            }
            if(in_array($co['name'],$array_name)){
                $this->response_json(array(),"5038","不能重复提交同一人");
            }
            if(!(isset($co['relation']) && $co['relation'] )){
                $this->response_json(array(),"5035","没有与联系人关系");
            }
            if(!in_array($co['relation'],Model_CreditInfo_Contact::ALLOW_RELATION)){
                $this->response_json(array(),"5037","与本人关系类型错误");
            }
            if(!(isset($co['mobile']) && $co['mobile'] ) ){
                $this->response_json(array(),"5036","没有联系人手机号码");
            }
            if(!Valid::phone($co['mobile'],11) || !Valid::regex($co['mobile'],'/^(13\d|14[57]|15[012356789]|18\d|17[01678])\d{8}$/')){
                $this->response_json(array(),"4002","手机号码格式错误");
            }
            if(in_array($co['mobile'],$array_mobile)){
                $this->response_json(array(),"5039","不能重复提交同一个手机号码");
            }
            if($rs = $this->model['contact']->get_one_by_array(App::$_token['user_id'],array('name'=>$co['name']))){
                $this->response_json(array(),"5040","联系人已经提交过");
            }
            if($rs = $this->model['contact']->get_one_by_array(App::$_token['user_id'],array('mobile'=>$co['mobile']))){
                $this->response_json(array(),"5041","联系人手机号码已经提交过");
            }

            $array_name[]=$co['name'];
            $array_mobile[]=$co['mobile'];
        }

        $create = TRUE;
        foreach($contact as $co){
            $c = $this->model['contact']->create(App::$_token['user_id'],array('name'=>$co['name'], 'relation'=>$co['relation'], 'mobile'=>$co['mobile'] ));
            if(!$c){
                $create = FALSE;
            }
        }

        if($create){
            Model::factory('CreditInfo_Step')->change('123123123',['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::CONTACT);
            $this->response_json(array(),"1000","提交成功");
        }


    }



    /**
     * FaceID 活体识别;身份证OCR;公安部网纹图片比对
     */
    public function action_FaceIDAuth(){
        $this->user_reject();
        if(App::$_user['validated_identity']!=Model_User::IDENTITY_STATUS_VERIFIED ){
            $this->response_json(array(),"5116","用户未通过实名认证");
        }


        $pic1 = array();
        $pic2 = array();
        $pic3 = array();
        $pic4 = array();
        $ocr_pic = array();

        $ocr_request_id = isset($this->_data['ocr_request_id']) ? $this->_data['ocr_request_id'] : '';
        $request_id = isset($this->_data['request_id']) ? $this->_data['request_id'] : '';
        $name = isset($this->_data['name']) ? $this->_data['name'] : '';

        //身份证号码解密
        $identity_code = isset($this->_data['identity']) ? $this->_data['identity'] : '';
        $source_identity_code = $this->decrypt($identity_code,App::$key);
        if( !Valid::not_empty($source_identity_code)  ){
            $this->response_json(array(),"5003","身份证号码错误");
        }

        //ocr 材质
        $IDPhoto = isset($this->_data['IDPhoto']) ? $this->_data['IDPhoto'] : '';
        $TemporaryIDPhoto = isset($this->_data['TemporaryIDPhoto']) ? $this->_data['TemporaryIDPhoto'] : '';
        $Photocopy = isset($this->_data['Photocopy']) ? $this->_data['Photocopy'] : '';
        $Screen = isset($this->_data['Screen']) ? $this->_data['Screen'] : '';
        $Edited = isset($this->_data['Edited']) ? $this->_data['Edited'] : '';

        if($IDPhoto === '' || $TemporaryIDPhoto === '' || $Photocopy === '' || $Screen === '' || $Edited === ''){
            $this->response_json(array(),"4005","缺少参数 legality");
        }

        //活体 材质
        $synthetic_face_confidence = isset($this->_data['synthetic_face_confidence']) ? $this->_data['synthetic_face_confidence'] : '';
        $synthetic_face_threshold = isset($this->_data['synthetic_face_threshold']) ? $this->_data['synthetic_face_threshold'] : '';
        $mask_confidence = isset($this->_data['mask_confidence']) ? $this->_data['mask_confidence'] : '';
        $mask_threshold = isset($this->_data['mask_threshold']) ? $this->_data['mask_threshold'] : '';
        $screen_replay_confidence = isset($this->_data['screen_replay_confidence']) ? $this->_data['screen_replay_confidence'] : '';
        $screen_replay_threshold = isset($this->_data['screen_replay_threshold']) ? $this->_data['screen_replay_threshold'] : '';

        if($synthetic_face_confidence === '' || $synthetic_face_threshold === '' || $mask_confidence === '' || $mask_threshold === '' || $screen_replay_confidence === '' || $screen_replay_threshold === ''){
            $this->response_json(array(),"4005","缺少参数 face_geuuineness");
        }


        $birthday = isset($this->_data['birthday']) ? $this->_data['birthday'] : '';
        $gender = isset($this->_data['gender']) ? $this->_data['gender'] : '';
        $race = isset($this->_data['race']) ? $this->_data['race'] : '';
        $address = isset($this->_data['address']) ? $this->_data['address'] : '';


        if(!Valid::not_empty($ocr_request_id) || !Valid::not_empty($request_id) || !Valid::not_empty($name) || !Valid::not_empty($gender)
            || !Valid::not_empty($birthday) || !Valid::not_empty($race) || !Valid::not_empty($address)
        ){
            $this->response_json(array(),"4005","缺少参数 OCR");
        }

        $E5 = isset($this->_data['1e-5']) ? $this->_data['1e-5'] : 0;
        $E4 = isset($this->_data['1e-4']) ? $this->_data['1e-4'] : 0;
        $E3 = isset($this->_data['1e-3']) ? $this->_data['1e-3'] : 0;

        if($E5 == 0 || $E4 == 0 || $E3 == 0){
            $this->response_json(array(),"4005","缺少参数 E");
        }

        $score = isset($this->_data['confidence']) ? $this->_data['confidence'] : 0;//相似度得分

        if($score == 0){
            $this->response_json(array(),"4005","缺少参数 score");
        }

        $req_data = json_encode(array(
            'ocr_request_id' => $ocr_request_id,
            'request_id' => $request_id,
            '1e-5' => $E5,
            '1e-4' => $E4,
            '1e-3' => $E3,
            'synthetic_face_confidence' => $synthetic_face_confidence,
            'synthetic_face_threshold' => $synthetic_face_threshold,
            'mask_confidence' => $mask_confidence,
            'mask_threshold' => $mask_threshold,
            'screen_replay_confidence' => $screen_replay_confidence,
            'screen_replay_threshold' => $screen_replay_threshold,
            'IDPhoto' => $IDPhoto,
            'TemporaryIDPhoto' => $TemporaryIDPhoto,
            'Photocopy' => $Photocopy,
            'Screen' => $Screen,
            'Edited' => $Edited,
        ));


        //计次
        $this->model['step']->value_add(App::$_token['user_id'],Model_CreditInfo_Step::FACEID_COUNT,1);

        //比较是否可以通过
        if(bccomp($score,$this->face_pass,2) < 0){
            $stepinfo = $this->model['step']->get_one(App::$_token['user_id']);
            if(isset($stepinfo['faceid_count']) && $stepinfo['faceid_count'] >= 3){//验证超过3次 基础授信自动失败
                Lib::factory('Approval_CreditAudit')->user_id(App::$_token['user_id'])->base_credit_refuse();
                $this->model['user']->credit_auth(App::$_token['user_id'],Model_User::CREDIT_AUTH_BASE_FAILED);


                //$this->model['user']->update(App::$_token['user_id'],array('status'=> Model_User::STATUS_DENYTEMP));
            }
            $this->response_json(array(),"5078","活体照片分数过低");
        }


        if(!isset($_FILES['pic1']['tmp_name']) || !isset($_FILES['pic2']['tmp_name'])
            || !isset($_FILES['pic3']['tmp_name']) || !isset($_FILES['pic4']['tmp_name'])
            || !isset($_FILES['ocr_pic']['tmp_name'])
        ){
            $this->response_json(array(),"5064","缺少上传文件");
        }

        if(!is_uploaded_file($_FILES['pic1']['tmp_name']) || !is_uploaded_file($_FILES['pic2']['tmp_name'])
           || !is_uploaded_file($_FILES['pic3']['tmp_name']) || !is_uploaded_file($_FILES['pic4']['tmp_name'])
           || !is_uploaded_file($_FILES['ocr_pic']['tmp_name'])
        ){
            $this->response_json(array(),"5064","上传临时文件失败");
        }
        if($_FILES['pic1']['size'] > Model_User_FaceIDAuth::UPLOAD_MAX_SIZE || $_FILES['pic2']['size'] > Model_User_FaceIDAuth::UPLOAD_MAX_SIZE
            || $_FILES['pic3']['size'] > Model_User_FaceIDAuth::UPLOAD_MAX_SIZE || $_FILES['pic4']['size'] > Model_User_FaceIDAuth::UPLOAD_MAX_SIZE
            || $_FILES['ocr_pic']['size'] > Model_User_FaceIDAuth::UPLOAD_MAX_SIZE
        ){
            $this->response_json(array(),"5065","上传图像文件超限");
        }

        if ($rs = $this->model['faceidauth']->get_by_user_id(App::$_token['user_id'], array(Model_User_FaceIDAuth::STATUS_VERIFIED,Model_User_FaceIDAuth::STATUS_FAILED, Model_User_FaceIDAuth::STATUS_READY, Model_User_FaceIDAuth::STATUS_CHECKING)) ||
            ( isset($step[Model_CreditInfo_Step::FACEID]) && $step[Model_CreditInfo_Step::FACEID]==Model_CreditInfo_Step::COMPLETE ) ) {
            $this->response_json(array(), "5066", "照片已提交");
        }

        $pic1['name'] = $_FILES['pic1']['name'];
        $pic1['size'] = $_FILES['pic1']['size'];

        $pic2['name'] = $_FILES['pic2']['name'];
        $pic2['size'] = $_FILES['pic2']['size'];

        $pic3['name'] = $_FILES['pic3']['name'];
        $pic3['size'] = $_FILES['pic3']['size'];

        $pic4['name'] = $_FILES['pic4']['name'];
        $pic4['size'] = $_FILES['pic4']['size'];

        $ocr_pic['name'] =  $_FILES['ocr_pic']['name'];
        $ocr_pic['size'] = $_FILES['ocr_pic']['size'];

        $ocr_pic_back['name'] =  $_FILES['ocr_pic_back']['name'];
        $ocr_pic_back['size'] = $_FILES['ocr_pic_back']['size'];

        $config = Kohana::$config->load('api')->get('PS');
        if(!$config && isset($config['site']) && isset($config['client_id']) && isset($config['client_key']) ){
            $this->response_json(array(),"4000","存储服务异常");
        }

        $res1 = HttpClient::factory($config['ps_url'] . $this->server)
            ->file(['file'=> $_FILES['pic1']['tmp_name']])
            ->post(['json'=>json_encode(array('filename'=> $_FILES['pic1']['name']))])
            ->httpheader(array("CLIENTID:".$config['client_id'], "CLIENTSIGN:".md5(md5(file_get_contents($_FILES['pic1']['tmp_name'])).$config['client_key'])))
            ->execute()
            ->body();
        $rj1 = json_decode($res1,TRUE);
        if(!is_array($rj1)){
            $this->response_json(array(),"4008","pic1 存储异常");
        }
        if(!isset($rj1['status']) || $rj1['status']!=TRUE){
            $this->response_json([],"4000","pic1 存储失败");
        }
        $hash1 = isset($rj1['hash']) ? $rj1['hash'] : '';
        //上传pic1结束

        //上传pic2开始
        $res2 = HttpClient::factory($config['ps_url'] . $this->server)
            ->file(['file'=> $_FILES['pic2']['tmp_name']])
            ->post(['json'=>json_encode(array('filename'=> $_FILES['pic2']['name']))])
            ->httpheader(array("CLIENTID:".$config['client_id'], "CLIENTSIGN:".md5(md5(file_get_contents($_FILES['pic2']['tmp_name'])).$config['client_key'])))
            ->execute()
            ->body();
        $rj2 = json_decode($res2,TRUE);
        if(!is_array($rj2)){
            $this->response_json(array(),"4008","pic2 存储异常");
        }
        if(!isset($rj2['status']) || $rj2['status']!=TRUE){
            $this->response_json(array(),"4000","pic2 存储失败");
        }
        $hash2 = isset($rj2['hash']) ? $rj2['hash'] : '';
        //上传pic2结束

        //上传pic3开始
        $res3 = HttpClient::factory($config['ps_url'] . $this->server)
            ->file(['file'=> $_FILES['pic3']['tmp_name']])
            ->post(['json'=>json_encode(array('filename'=> $_FILES['pic3']['name']))])
            ->httpheader(array("CLIENTID:".$config['client_id'], "CLIENTSIGN:".md5(md5(file_get_contents($_FILES['pic3']['tmp_name'])).$config['client_key'])))
            ->execute()
            ->body();
        $rj3 = json_decode($res3,TRUE);
        if(!is_array($rj3)){
            $this->response_json(array(),"4008","pic3 存储异常");
        }
        if(!isset($rj3['status']) || $rj3['status']!=TRUE){
            $this->response_json(array(),"4000","pic3 存储失败");
        }
        $hash3 = isset($rj3['hash']) ? $rj3['hash'] : '';
        //上传pic3结束

        //上传pic4开始
        $res4 = HttpClient::factory($config['ps_url'] . $this->server)
            ->file(['file'=> $_FILES['pic4']['tmp_name']])
            ->post(['json'=>json_encode(array('filename'=> $_FILES['pic4']['name']))])
            ->httpheader(array("CLIENTID:".$config['client_id'], "CLIENTSIGN:".md5(md5(file_get_contents($_FILES['pic4']['tmp_name'])).$config['client_key'])))
            ->execute()
            ->body();
        $rj4 = json_decode($res4,TRUE);
        if(!is_array($rj4)){
            $this->response_json(array(),"4008","pic4 存储异常");
        }
        if(!isset($rj4['status']) || $rj4['status']!=TRUE){
            $this->response_json(array(),"4000","pic4 存储失败");
        }
        $hash4 = isset($rj4['hash']) ? $rj4['hash'] : '';
        //上传pic4结束

        //上传ocr_pic开始
        $res5 = HttpClient::factory($config['ps_url'] . $this->server)
            ->file(['file'=> $_FILES['ocr_pic']['tmp_name']])
            ->post(['json'=>json_encode(array('filename'=> $_FILES['ocr_pic']['name']))])
            ->httpheader(array("CLIENTID:".$config['client_id'], "CLIENTSIGN:".md5(md5(file_get_contents($_FILES['pic5']['tmp_name'])).$config['client_key'])))
            ->execute()
            ->body();
        $rj5 = json_decode($res5,TRUE);
        if(!is_array($rj5)){
            $this->response_json(array(),"4008","ocr_pic 存储异常");
        }
        if(!isset($rj5['status']) || $rj5['status']!=TRUE){
            $this->response_json(array(),"4000","ocr_pic 存储失败");
        }
        $hash5 = isset($rj5['hash']) ? $rj5['hash'] : '';

        //上传ocr_pic_back开始
        $res6 = HttpClient::factory($config['ps_url'] . $this->server)
            ->file(['file'=> $_FILES['ocr_pic_back']['tmp_name']])
            ->post(['json'=>json_encode(array('filename'=> $_FILES['ocr_pic_back']['name']))])
            ->httpheader(array("CLIENTID:".$config['client_id'], "CLIENTSIGN:".md5(md5(file_get_contents($_FILES['pic5']['tmp_name'])).$config['client_key'])))
            ->execute()
            ->body();
        $rj6 = json_decode($res6,TRUE);
        if(!is_array($rj6)){
            $this->response_json(array(),"4008","ocr_pic 存储异常");
        }
        if(!isset($rj6['status']) || $rj6['status']!=TRUE){
            $this->response_json(array(),"4000","ocr_pic 存储失败");
        }
        $hash5 = isset($rj6['hash']) ? $rj6['hash'] : '';
        //上传ocr_pic结束
        //计算对比分数 获得审核状态
        $status = bccomp($score,Model_User_FaceIDAuth::AUTO_PASS_RATE,2)>=0 ? Model_User_FaceIDAuth::STATUS_VERIFIED : Model_User_FaceIDAuth::STATUS_FAILED ;
        $db = Kohana_Database::instance();
        $db->begin();
        try {
            if ($this->model['faceidauth']->create(
                App::$_token['user_id'],
                array(
                    'pic1' => $hash1,
                    'pic2' => $hash2,
                    'pic3' => $hash3,
                    'pic4' => $hash4,
                    'ocr_pic' => $hash5,
                    'name' => $name,
                    'identity_code' => $source_identity_code,
                    'birthday' => $birthday,
                    'gender' => $gender,
                    'race' => $race,
                    'address' => $address,
                    'score' => $score,
                    'status' => $status,
                    'req_data' => $req_data,
                ))
            ) {
                Model::factory('CreditInfo_Step')->change(App::$_token['user_id'],['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::FACEID);
                $db->commit();

            } else {
                $db->rollback();
                $this->response_json(array(), "4000", "提交失败");
            }
        }catch (Exception $e){
            $db->rollback();
            $this->response_json(array(),"4000","数据库异常");
        }



        //设备数据采集
        if(in_array(strtolower(App::$id),['android','ios'])){
            try{
                Model::factory('EquipmentEvent')->create([
                    'equipment_id' => App::$unique_id,
                    'user_id' => App::$_token['user_id'] > 0 ? App::$_token['user_id'] : 0,
                    'token' => App::$token,
                    'type' => Model_EquipmentEvent::TYPE_FACEID_AUTH,
                    'extend' => [
                        'app'=>[
                            'id' => App::$id,
                            'os' => App::$os,
                            'ver' => App::$ver,
                            'ip' => App::$ip,
                        ]
                    ]
                ]);
            }catch (Exception $e){
                //..
            }
        }






        //活体图片与身份证网纹图片比对
        $identity_face = '';

        if(empty(App::$_user['identity_face'])){//没有身份证网纹图片
            $res = Lib::factory('Identity_API')->verify([
                'realName' => App::$_user['name'],
                'identityCard' => App::$_user['identity_code'],
            ])->execute()->asJson();
            if($res && $rjson = json_decode($res,TRUE)){
                if( isset($rjson['status']) && $rjson['status']===TRUE ){
                    if(isset($rjson['api_result']['result']) && (string)$rjson['api_result']['result'] == Lib_Common::LIB_COMMON_API_RESULT_SUCCESS){//验证成功
                        $identity_face = isset($rjson['api_result']['identity_face']) && $rjson['api_result']['identity_face'] ? $rjson['api_result']['identity_face'] : '' ;
                        $this->model['user']->update(App::$_token['user_id'],array('identity_face'=>$identity_face));
                    }else{
                        $this->response_json(array(),"5014",'身份证验证失败');
                    }
                }else{
                    $this->response_json(array(),"5013",'身份证接口远程请求失败');
                }
            }else{
                $this->response_json(array(),"4008",'身份证接口返回失败');
            }

        }else{
            $identity_face = App::$_user['identity_face'];
        }
        $rb = Lib::factory('Veriface_API')->verify([
            'name' => App::$_user['name'],
            'identity_code' => App::$_user['identity_code'],
            'best_img' => $identity_face,
            'head_img' => $hash1,
        ])->execute()->asJson();
        if(!is_array(json_decode($rb,true))){
            $this->response_json(array(),"4008","活体识别接口返回失败");
        }
        $rbs = json_decode($rb,true);
        if(isset($rbs['status']) && $rbs['status']===TRUE && isset($rbs['api_result']['result'])){
            if((string)$rb['api_result']['result']== Lib_Common::LIB_COMMON_API_RESULT_SUCCESS){
                //验证成功
            }else{
                $this->response_json(array(),"4009","活体识别接口异常");
            }
        }else{
            if((string)$rbs['error'] == Lib_Common::LIB_COMMON_API_MISS_PARAM){
                $this->response_json(array(),"5012","照片异常,请联系客户");
            }
            $this->response_json(array(),"4009","活体识别接口异常");
        }

        //网纹对比返回分数
        $score = $rb['api_result']['info']['confidence'];
        //计算对比分数 获得审核状态
        $status = bccomp($score,Model_User_FaceIDAuth::IDENTITY_PASS_RATE,2)>=0 ? Model_User_FaceIDAuth::STATUS_VERIFIED : Model_User_FaceIDAuth::STATUS_FAILED ;


        $credit_auth = 0;
        $db = Kohana_Database::instance();
        $db->begin();
        try{
            $this->model['faceidauth']->update(
                App::$_token['user_id'],
                array(
                    'identity_score' => $score,
                    'identity_status' => $status,
                    'identity_req_data' => json_encode($rb['api_result']['info']),
                ));

            $db->commit();
        }catch (Exception $e){
            $db->rollback();
            $this->response_json(array(),"4000","数据库异常");
        }


        if($status == Model_User_FaceIDAuth::STATUS_VERIFIED){
            //$this->activity_coupon(App::$_user['id']);//基础授信通过后发放优惠券活动
            $this->response_json([], "1000", "活体识别通过",NULL,FALSE);
        }else{
            $this->response_json(['status'=>$status], "5117", "活体识别未通过");
        }
        //基础授信反欺诈埋点
        if(!in_array($source_identity_code,$this->tester)){//放过测试员
            $af = Lib::factory('TCCredit_Event')->base(App::$_token['user_id']);
        }


    }



    /**
     * 电话本采集
     * Android & iOS
     */
    public function action_PhoneBook(){
        $phonebook = isset($this->_data['phonebook']) ? $this->_data['phonebook'] : '';
        if(!is_array($phonebook) || count($phonebook)<1){
            $this->response_json(array(),"4005","参数错误");
        }
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);

        if( isset($this->step[Model_CreditInfo_Step::PHONEBOOK]) && (int)$this->step[Model_CreditInfo_Step::PHONEBOOK] == (int)Model_CreditInfo_Step::COMPLETE  ){
            $this->response_json(array(),"4002","记录已存在");
        }

        $phonebook2 = array();
        foreach($phonebook as $pb){
            if(isset($pb['tel']) && count($pb['tel'])>0 ){
                $pb['birthday'] = isset($pb['birthday']) && strtotime($pb['birthday'])>0 ? date('Y-m-d',strtotime($pb['birthday'])) : '';
                $phonebook2[] = $pb;
            }
        }
        if(count($phonebook2) < Model_App_PhoneBook::MIN_AVAILABLE_COUNT){
            $this->response_json(array(),"5063","电话本有效记录数不足");
        }

        $redis = Redis_Hash::instance();
        if( $redis->set('api3_phone_add_'.App::$_token['user_id'],array('user_id'=>App::$_token['user_id'],'phonebook'=>json_encode($phonebook2))) ){
            Model::factory('CreditInfo_Step')->change('123123123',['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::PHONEBOOK);

            $this->response_json(array(),"1000","提交成功");
        }else{
            $this->response_json(array(),"4000","电话本记录失败");
        }

        exit;
        //------------------移入task
        //foreach($phonebook2 as $pb){
        //    $this->model['phonebook']->create(App::$_token['user_id'],$pb);
        //}

    }


    /**
     * 短信采集
     * Android
     */
    public function action_SMSRecord(){
        $sms = isset($this->_data['sms']) ? $this->_data['sms'] : '';
        if(!is_array($sms) || count($sms)<1){
            $this->response_json(array(),"4005","参数错误");
        }
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);

        if( isset($this->step[Model_CreditInfo_Step::SMS]) && (int)$this->step[Model_CreditInfo_Step::SMS]== (int)Model_CreditInfo_Step::COMPLETE ){
            $this->response_json(array(),"4002","记录已存在");
        }

        $message = array();
        foreach($sms as $m){
            if(isset($m['number']) && $m['number'] && Valid::regex($m['number'],'/^[\+]?[0-9][0-9\- \.\,#]{4,25}[0-9]$/')  && isset($m['message']) && $m['message']){
                $message[] = array(
                    'number'=>$m['number'],
                    'type'=>$m['type']=='receive' ? Model_App_SMSRecord::TYPE_RECEIVE : Model_App_SMSRecord::TYPE_SEND,
                    'message'=>$m['message'],
                    'dateline'=>$m['time'],
                );
            }

        }
        if(count($message)<1){
            $this->response_json(array(),"5055","不接受无内容提交");
        }

        $redis = Redis_Hash::instance();
        if( $redis->set('api3_sms_add_'.App::$_token['user_id'],array('user_id'=>App::$_token['user_id'],'message'=>json_encode($message))) ){
            Model::factory('CreditInfo_Step')->change('123123123',['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::SMS);

            $this->response_json(array(),"1000","提交成功");
        }else{
            $this->response_json(array(),"4000","短信记录失败");
        }

        exit;
        //----------------移入task
        //foreach($message as $m){
        //    $this->model['smsrecord']->create(App::$_token['user_id'],$m);
        //}

    }

    /**
     * 通话记录采集
     * Android
     */
    public function action_CallHistory(){
        $history = isset($this->_data['history']) ? $this->_data['history'] : '';
        if(!is_array($history) || count($history)<1){
            $this->response_json(array(),"4005","参数错误");
        }
        $this->step = $this->model['user']->get_ci_step(App::$_token['user_id']);

        if( isset($this->step[Model_CreditInfo_Step::CALL]) && (int)$this->step[Model_CreditInfo_Step::CALL]== (int)Model_CreditInfo_Step::COMPLETE ){
            $this->response_json(array(),"4002","记录已存在");
        }

        $history_list = array();
        foreach($history as $h){
            if(isset($h['from']) &&
                ( ($h['from'] && Valid::regex($h['from'],'/^[\+]?[0-9][0-9\- \.\,#]{4,25}[0-9]$/')) || empty($h['from'])  ) &&
                isset($h['to']) &&
                ( ($h['to'] && Valid::regex($h['to'],'/^[\+]?[0-9][0-9\- \.\,#]{4,25}[0-9]$/')) || empty($h['to']) ) &&
                isset($h['type']) && $h['type'] && isset($h['connected'])
            ){
                $history_list[] = array(
                    'from_number'=> $h['from'],
                    'to_number'=> $h['to'],
                    'type'=> $h['type']=='out' ? Model_App_CallHistory::TYPE_OUT : Model_App_CallHistory::TYPE_IN ,
                    'connected'=> $h['connected']=='yes' ? Model_App_CallHistory::CONNECTED_YES : Model_App_CallHistory::CONNECTED_NO ,
                    'connect_time' => isset($h['connect_time']) ? (int)$h['connect_time'] : 0,
                    'dateline'=>$h['time'],
                );
            }

        }
        if(count($history_list)<1){
            $this->response_json(array(),"5055","不接受无内容提交");
        }


        $redis = Redis_Hash::instance();
        if( $redis->set('api3_call_add_'.App::$_token['user_id'],array('user_id'=>App::$_token['user_id'],'history_list'=>json_encode($history_list))) ){
            Model::factory('CreditInfo_Step')->change('123123123',['status' => Model_CreditInfo_Step::COMPLETE,'pass_time' => time()],Model_CreditInfo_Step::CALL);
            $this->response_json(array(),"1000","提交成功");
        }else{
            $this->response_json(array(),"4000","通话记录失败");
        }


        exit;
        //-----------------移入task
        //foreach($history_list as $h){
        //    $this->model['callhistory']->create(App::$_token['user_id'],$h);
        //}


    }


    /**
     * 移动运营商抓取(跳出式)
     */
    public function action_MNORecord(){
        $res = Lib::factory('Risk_API')->credit()->html(Model_CreditInfo_Step::MNO, [
            'user_id' => App::$_token['user_id'],
        ])->execute()->body();
        if($res['api_result'] == '4002'){
            $this->response_json(array(),"4002","记录已存在");
        }
        if(is_array($res)){
            if(isset($res['api_result']['html']) && $res['api_result']['html'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');
            }elseif(isset($res['api_result']['url']) && $res['api_result']['url'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');

            }else{
                $this->response_json(['jump' => $res['jump']],'1000','申请关闭');
            }
        }else{
            $this->response_json([],'4000','申请失败,请联系客服! 001');
        }

    }



    /**
     * 信用卡账单抓取(跳出式)
     */
    public function action_CreditCardBillRecord(){
        $res = Lib::factory('Risk_API')->credit()->html(Model_CreditInfo_Step::Email, [
            'user_id' => App::$_token['user_id'],
        ])->execute()->body();
        if($res['api_result'] == '4002'){
            $this->response_json(array(),"4002","记录已存在");
        }
        if(is_array($res)){
            if(isset($res['api_result']['html']) && $res['api_result']['html'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '1'
                ],'1000','申请已生成');
            }elseif(isset($res['api_result']['url']) && $res['api_result']['url'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '1'
                ],'1000','申请已生成');

            }else{
                $this->response_json(['jump' => $res['jump']],'1000','申请关闭');
            }
        }else{
            $this->response_json([],'4000','申请失败,请联系客服! 001');
        }

    }

    /**
     * 京东信息抓取
     */
    public function action_Jingdong(){
        $res = Lib::factory('Risk_API')->credit()->html(Model_CreditInfo_Step::JINGDONG, [
            'user_id' => App::$_token['user_id'],
        ])->execute()->body();
        if($res['api_result'] == '4002'){
            $this->response_json(array(),"4002","记录已存在");
        }
        if(is_array($res)){
            if(isset($res['api_result']['html']) && $res['api_result']['html'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');
            }elseif(isset($res['api_result']['url']) && $res['api_result']['url'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');

            }else{
                $this->response_json(['jump' => $res['jump']],'1000','申请关闭');
            }
        }else{
            $this->response_json([],'4000','申请失败,请联系客服! 001');
        }
    }

    /**
     * 淘宝信息抓取
     */
    public function action_TaoBao(){
        $res = Lib::factory('Risk_API')->credit()->html(Model_CreditInfo_Step::TAOBAO, [
            'user_id' => App::$_token['user_id'],
        ])->execute()->body();
        if($res['api_result'] == '4002'){
            $this->response_json(array(),"4002","记录已存在");
        }
        if(is_array($res)){
            if(isset($res['api_result']['html']) && $res['api_result']['html'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');
            }elseif(isset($res['api_result']['url']) && $res['api_result']['url'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');

            }else{
                $this->response_json(['jump' => $res['jump']],'1000','申请关闭');
            }
        }else{
            $this->response_json([],'4000','申请失败,请联系客服! 001');
        }
    }

    /**
     * 公积金信息抓取
     */
    public function action_Fund(){
        $res = Lib::factory('Risk_API')->credit()->html(Model_CreditInfo_Step::FUND, [
            'user_id' => App::$_token['user_id'],
        ])->execute()->body();
        if($res['api_result'] == '4002'){
            $this->response_json(array(),"4002","记录已存在");
        }
        if(is_array($res)){
            if(isset($res['api_result']['html']) && $res['api_result']['html'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');
            }elseif(isset($res['api_result']['url']) && $res['api_result']['url'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');

            }else{
                $this->response_json(['jump' => $res['jump']],'1000','申请关闭');
            }
        }else{
            $this->response_json([],'4000','申请失败,请联系客服! 001');
        }
    }

    /**
     * 社保信息抓取
     */
    public function action_SocialSecurity(){
        $res = Lib::factory('Risk_API')->credit()->html(Model_CreditInfo_Step::SOCIAL_SECURITY, [
            'user_id' => App::$_token['user_id'],
        ])->execute()->body();
        if($res['api_result'] == '4002'){
            $this->response_json(array(),"4002","记录已存在");
        }
        if(is_array($res)){
            if(isset($res['api_result']['html']) && $res['api_result']['html'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');
            }elseif(isset($res['api_result']['url']) && $res['api_result']['url'] ){
                $this->response_json([
                    'html'=>$res['api_result']['html'],
                    'jump' => $res['api_result']['jump'],
                    'sdk' => '0'
                ],'1000','申请已生成');

            }else{
                $this->response_json(['jump' => $res['jump']],'1000','申请关闭');
            }
        }else{
            $this->response_json([],'4000','申请失败,请联系客服! 001');
        }
    }






    /**
     * 查询授信情况 v2.4.0
     *  用于基础授信最后一步的倒计时读秒过程中不断地请求检测
     *  返回的集中状态 query_result
     *      pass 通过
     *      processing 处理中
     *      back 退回
     *      failed 失败
     *      reject 拒绝
     */
    public function action_CreditQuery(){

        $array = [];
        $ca = Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->get();//CACHE GET
        if($ca){
            $array =$ca;
            //USER_CACHE ----[END]
        }else{
            $user = $this->model['user']->get_one(App::$_token['user_id']);
            $array['user_id'] = $user['id'];
            $array['name'] = $user['name'];
            $array['mobile'] = $user['mobile'];
            $array['status'] = $user['status'];
            $array['credit_auth'] = $user['credit_auth'];
            Lib::factory('TCCache_User')->user_id(App::$_token['user_id'])->uri(Request::current()->uri())->set($array);//CACHE ----- [WRITE]
            $array['_db_read'] = "1";
        }
        if($array['status']==Model_User::STATUS_NORMAL){
            if(in_array($array['credit_auth'],[
                Model_User::CREDIT_AUTH_BASE_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_READY,
                Model_User::CREDIT_AUTH_STATUS_ONSUBMIT,
                Model_User::CREDIT_AUTH_STATUS_CHECKING,
                Model_User::CREDIT_AUTH_STATUS_VERIFIED,
                Model_User::CREDIT_AUTH_STATUS_FAILED,
                Model_User::CREDIT_AUTH_STATUS_BACK
            ])){
                $array['query_result'] = 'pass';
            }elseif(in_array($array['credit_auth'],[Model_User::CREDIT_AUTH_BASE_READY,Model_User::CREDIT_AUTH_BASE_ONSUBMIT,Model_User::CREDIT_AUTH_BASE_SUBMITED,Model_User::CREDIT_AUTH_BASE_CHECKING])){
                $array['query_result'] = 'processing';
            }elseif(in_array($array['credit_auth'],[Model_User::CREDIT_AUTH_BASE_BACK,Model_User::CREDIT_AUTH_BASE_FAILED])){
                $array['query_result'] = 'failed';
            }
        }else{
            $array['query_result'] = 'reject';
        }
        $response_array = [];
        $response_array['name'] = $array['name'];
        $response_array['mobile'] = $array['mobile'];
        $response_array['query_result'] = $array['query_result'];
        $this->response_json($response_array,"1000","查询成功");
    }


    /**
     * 新授信列表 v3.0.0
     *
     */
    public function action_List(){


        $title = '授信列表';
        $summary = '';
        $top_button = [
            'hidden' => '1',
            'enable' => '0',
            'title' =>'下一步立即借款',
            'click' => 'app://app.timecash/AppHome/Index',
        ];
        $foot_button = [
            'hidden' => '1',
            'enable' => '0',
            'title' =>'下一步立即借款',
            'click' => 'app://app.timecash/AppHome/Index',
        ];
        $button_enable = TRUE;

        $credit_list = Lib::factory('Credit_List')->app_id(App::$id)->credit_list(App::$_token['user_id']);
        if(!is_array($credit_list)){
            $this->response_json(['user_id'=>App::$_token['user_id']],"4000","用户授数据异常");
        }
        //遍历每一项授信,如发现未完成或者未通过项目,将按钮置亮,按钮
        foreach ($credit_list as $k => $ci){
            if(isset($ci['status']) &&( (int)$ci['status']==Model_Credit_List::STATUS_INIT || (int)$ci['status']==Model_Credit_List::STATUS_RETRY)  ){
/*                $foot_button['enable'] = '1';
                $foot_button['title'] = '继续完成授信';
                $foot_button['click'] = $ci['url'];
                break;*/
                $credit_list[$k]['url'] = '';
                $button_enable = FALSE;
            }
        }

        if(
            //empty(App::$_user['identity_code']) ||
            //(int)App::$_user['validated_identity']!=(int)Model_User::IDENTITY_STATUS_VERIFIED ||
            (int)App::$_user['allow_login']!==(int)Model_User::ALLOW_LOGIN__ALLOWED ||
            in_array(App::$_user['status'],[Model_User::STATUS_DENY,Model_User::STATUS_LOANDENY,Model_User::STATUS_DENYFOREVER,Model_User::STATUS_DENYTEMP,Model_User::STATUS_DELETED])
        ){

            $button_enable = FALSE;
            //用户被拒绝借款, 取消其他未完成的授信链接,不允许提交
            foreach ($credit_list as $k => $v){
                if(isset($v['status']) &&( (int)$v['status']==Model_Credit_List::STATUS_INIT || (int)$v['status']==Model_Credit_List::STATUS_RETRY)  ){
                    $credit_list[$k]['url']='';
                }
            }
            $foot_button['enable'] = '0';
            $foot_button['title'] = '资料不符，无法继续提交';
            $foot_button['click'] = 'app://app.timecash/AppHome/Index';
        }
        $must = array(
            'title'=>'完成以下资料才可以申请借款',
            'icon'=>'必填项',
            'list' => isset($credit_list['must']) ? $credit_list['must']:[]
        );
        $chose = array(
            'title'=>'以下请至少提交一项，提交资料有助于您获得更好额度',
            'icon'=>'选填项',
            'list' => isset($credit_list['chose']) ? $credit_list['chose']:[]
        );


        $order_rate_html = Lib::factory('Helper_OrderFeeRate')->html(Model_Order::TYPE_INST);
        $foot_html = $order_rate_html ? $order_rate_html : '';

        $response_array = [
            'title' => $title,
            'summary' => $summary,
            'credit_list_must' => $must,
            'credit_list_chose' => $chose,
            'foot_html' => $foot_html,
            'top_button' => $top_button,
            'foot_button' => $foot_button,
        ];

        $this->response_json($response_array,"1000","授信列表");

    }





}
